
<%@page import="org.apache.commons.io.filefilter.RegexFileFilter"%>
<%@page import="java.security.acl.Owner"%>
<%@page import="com.mayatech.baseLibs.shellLib"%>
<%@page import="org.jfree.chart.plot.PlotOrientation"%>
<%@page import="org.jfree.data.category.CategoryDataset"%>
<%@page import="com.sun.jndi.cosnaming.CNNameParser"%>
<%@page import="com.sun.jmx.remote.util.OrderClassLoaders"%>
<%@page import="com.sun.org.apache.xpath.internal.axes.HasPositionalPredChecker"%>
<%@page import="org.xml.sax.InputSource"%>
<%@page import="java.net.InetAddress"%>
<%@page import="java.net.HttpURLConnection"%>
<%@page import="java.net.URL"%>
<%@page import="org.omg.CORBA.INVALID_ACTIVITY"%>
<%@ page import="java.io.DataInputStream"%>
<%@page import="java.io.IOException"%>
<%@page import="java.io.File"%>
<%@page import="java.io.PrintWriter"%>
<%@page import="java.io.BufferedReader"%>
<%@page import="java.io.BufferedWriter"%>
<%@page import="java.io.ObjectInputStream"%>
<%@page import="java.io.ByteArrayInputStream"%>
<%@page import="java.io.OutputStream"%>
<%@page import="java.io.OutputStreamWriter"%>
<%@page import="java.io.FileInputStream"%>
<%@page import="java.io.FileOutputStream"%>
<%@page import="java.io.InputStream"%>
<%@page import="java.io.InputStreamReader"%>
<%@page import="java.io.StringReader"%>

<%@ page import="java.sql.*" %>
<%@ page import="javax.naming.*" %>
<%@ page import="javax.naming.directory.DirContext" %>
<%@ page import="javax.naming.directory.InitialDirContext" %>
<%@ page import="javax.sql.*" %>
<%@ page import="java.util.*" %> 
<%@ page import="java.text.NumberFormat" %>
<%@ page import="java.text.SimpleDateFormat" %>
<%@page import="org.json.simple.JSONObject"%>
<%@page import="java.io.ByteArrayOutputStream"%>
<%@page import="java.util.zip.*"%>
<%@page import="java.util.Date"%>
<%@page import="javax.servlet.*"%>
<%@page import="oracle.sql.ROWID"%>
<%@page import="java.sql.DatabaseMetaData"%>
<%@page import="javax.mail.Message" %>
<%@page import="javax.mail.MessagingException" %>
<%@page import="javax.mail.PasswordAuthentication" %>
<%@page import="javax.mail.Session" %>
<%@page import="javax.mail.Transport" %>
<%@page import="javax.mail.internet.AddressException" %>
<%@page import="javax.mail.internet.InternetAddress" %>
<%@page import="javax.mail.internet.MimeMessage" %>
<%@page import="com.sun.mail.util.BASE64DecoderStream" %>
<%@page import="com.sun.mail.util.BASE64EncoderStream" %>
<%@page import="javax.crypto.Cipher" %>
<%@page import="javax.crypto.KeyGenerator" %>
<%@page import="javax.crypto.SecretKey" %>
<%@page import="javax.crypto.spec.SecretKeySpec" %>
<%@page import="org.apache.commons.codec.binary.Base64" %>
<%@page import="org.apache.commons.io.FileUtils" %>
<%@page import="com.jbase.jremote.DefaultJConnectionFactory" %>
<%@page import="com.jbase.jremote.JDynArray" %>
<%@page import="com.jbase.jremote.JRemoteException" %>
<%@page import="com.jbase.jremote.JResultSet" %>
<%@page import="com.jbase.jremote.JStatement" %>
<%@page import="com.jbase.jremote.JConnection" %>
<%@page import="javax.xml.parsers.DocumentBuilderFactory" %>
<%@page import="javax.xml.parsers.DocumentBuilder" %>
<%@page import="org.w3c.dom.*" %>

<%@page import="org.jfree.chart.*"%>
<%@page import="org.jfree.chart.entity.*"%>
<%@page import="org.jfree.data.general.*"%>
<%@page import="org.jfree.data.category.*"%>

<%@page import="com.mayatech.repoDrivers.RepoExplorer" %>




<%@page import="javax.script.ScriptEngine" %>
<%@page import="javax.script.ScriptEngineManager" %>

<%@page import="java.util.regex.Matcher" %>
<%@page import="java.util.regex.Pattern" %>

<%@page import="java.text.DecimalFormat" %>


<%@page import="difflib.Chunk" %>
<%@page import="difflib.Delta" %>
<%@page import="difflib.DiffUtils" %>
<%@page import="difflib.Patch" %>

<%@page import="tdm.deployment.oracleConverter" %>




<%

request.setCharacterEncoding("utf-8");

String logout=nvl(request.getParameter("logout"),"");



if (logout.equals("YES")) 	{
	session.setAttribute("username", "");	
	session.setAttribute("userid", 0);	
	session.setAttribute("userfname","");	
	session.setAttribute("userlname", "");	
	session.setAttribute("useremail", "");	
	session.setAttribute("curr_lang", null);
	session.setAttribute("hostname", "");
	
	session.setAttribute("langArr", null);
	
	session.setAttribute("WAITING_ACTION_LIST", null);
	
	session.setAttribute("FLOW_STATE_LIST", null);
	
	Connection connconf=getconn();

	if (connconf!=null)  {
		String sql="select shortcode from tdm_role";
		ArrayList<String[]> allRoles=getDbArrayConf(connconf, sql, Integer.MAX_VALUE, new ArrayList<String[]>());
		
		
		for (int i=0;i<allRoles.size();i++) {
			session.setAttribute("hasrole_"+allRoles.get(i)[0], "false");
		}
		
		
		sql="select id, permission_name from mad_permission";
		ArrayList<String[]> allPerms=getDbArrayConf(connconf, sql, Integer.MAX_VALUE, new ArrayList<String[]>());
		
		
		for (int i=0;i<allPerms.size();i++) {
			session.setAttribute("haspermission_id_"+allPerms.get(i)[0], "false");
			session.setAttribute("haspermission_name_"+allPerms.get(i)[1], "false");
		}
		
		for (int i=1;i<10;i++) 
			session.setAttribute("haspermission_id_-"+i, "false");
		
		//clear filters
		
		
		session.setAttribute("MAD_QUERY_WAITING_MY_ACTION", "UNSET");
		clearFlexFieldFilters(session,"FILTER");
		clearFlexFieldFilters(session,"SELECT");
		
		clearMadSearchAllFilters(session,"FILTER");
		clearMadSearchAllFilters(session,"SELECT");
		
		unsetAllMadQueries(connconf, session);
		
		session.setAttribute("sort_statement","");
		session.setAttribute("fields_to_show","");
		
		closeconn(connconf);
		
	}
	
	
	
	response.sendRedirect("default2.jsp");
}


String currurl="";

currurl=nvl(request.getRequestURL().toString(),"");

String curruser="";

curruser=nvl((String) session.getAttribute("username"),"");

if ((!currurl.contains("default2.jsp") && !currurl.contains("install.jsp") && !currurl.contains("runMethod.jsp"))  && curruser.isEmpty()) {
	session.setAttribute("username", "");	
		
	response.sendRedirect("default2.jsp");	
}


 
%>


<%! 


final String DEFAULT_DATE_FORMAT="dd/MM/yyyy HH:mm:ss";
String mysql_format="%d.%m.%Y %H:%i:%s";



//*************************************************************
public ArrayList<String[]> getDbArrayConf(Connection connConf, String sql, int limit,ArrayList<String[]> bindlist) {
//*************************************************************
	return  getDbArrayConf(connConf, sql, limit, bindlist,9999);
	}
//*************************************************************

public ArrayList<String[]> getDbArrayConf(Connection connConf, String sql, int limit,ArrayList<String[]> bindlist, int timeout_insecond) {
	return getDbArrayConf(connConf,sql,limit, bindlist,timeout_insecond,null);
}

public ArrayList<String[]> getDbArrayConf(Connection connConf, String sql, int limit,ArrayList<String[]> bindlist, int timeout_insecond, ArrayList<String> columnList) {
//*************************************************************
		ArrayList<String[]> ret1 = new ArrayList<String[]>();

		PreparedStatement pstmtConf = null;
		ResultSet rsetConf = null;
		ResultSetMetaData rsmdConf = null;


		int reccnt = 0;
		try {
			if (pstmtConf == null) 	pstmtConf = connConf.prepareStatement(sql);
			
			//------------------------------ end binding

			if (bindlist!=null) {
				for (int i = 1; i <= bindlist.size(); i++) {
					String[] a_bind = bindlist.get(i - 1);
					String bind_type = a_bind[0];
					String bind_val = a_bind[1];
	
					if (bind_type.equals("INTEGER")) {
						if (bind_val == null || bind_val.equals(""))
							pstmtConf.setNull(i, java.sql.Types.INTEGER);
						else
							pstmtConf.setInt(i, Integer.parseInt(bind_val));
					} else if (bind_type.equals("LONG")) {
						if (bind_val == null || bind_val.equals(""))
							pstmtConf.setNull(i, java.sql.Types.INTEGER);
						else
							pstmtConf.setLong(i, Long.parseLong(bind_val));
					} else if (bind_type.equals("DOUBLE")) {
						if (bind_val == null || bind_val.equals(""))
							pstmtConf.setNull(i, java.sql.Types.DOUBLE);
						else
							pstmtConf.setDouble(i, Double.parseDouble(bind_val));
					} else if (bind_type.equals("FLOAT")) {
						if (bind_val == null || bind_val.equals(""))
							pstmtConf.setNull(i, java.sql.Types.FLOAT);
						else
							pstmtConf.setFloat(i, Float.parseFloat(bind_val));
					} 
					else {
						pstmtConf.setString(i, bind_val);
					}
				}
				//------------------------------ end binding
			}  // if bindlist 
			
			pstmtConf.setQueryTimeout(timeout_insecond);
			
			if (rsetConf == null) rsetConf = pstmtConf.executeQuery();
			if (rsmdConf == null) rsmdConf = rsetConf.getMetaData();
			
			

			int colcount = rsmdConf.getColumnCount();
			
			if (columnList!=null) {
				columnList.clear();
				for (int i=1;i<=colcount;i++) {
					columnList.add(rsmdConf.getColumnName(i));
				}
			}
			
			String a_field = "";
			while (rsetConf.next()) {
				reccnt++;
				if (reccnt > limit) break;
				String[] row = new String[colcount];
				for (int i = 1; i <= colcount; i++) {
					try {
						a_field = rsetConf.getString(i);
						if (a_field.equals("null")) a_field=""; 
						} 
					catch (Exception enull) {a_field = "";}
					row[i - 1] = a_field;
				}
				ret1.add(row);
			}
		} catch (Exception ignore) {
			ignore.printStackTrace();
			System.out.println("Exception@getDbArrayConf : " + sql);
		} finally {
			try {rsmdConf = null;} catch (Exception e) {}
			try {rsetConf.close();rsetConf = null;} catch (Exception e) {}
			try {pstmtConf.close();	pstmtConf = null;} catch (Exception e) {}
		}
		return ret1;
	}

	//*************************************************************
	public ArrayList<String[]> getDbArrayApp(Connection connconf,String env_id, String sql, int limit,ArrayList<String[]> bindlist) {
		return getDbArrayApp(connconf,env_id,sql,limit, bindlist,null);
	}
	
	
	//*************************************************************
	public ArrayList<String[]> getDbArrayApp(
			String db_driver, 
			String db_connstr, 
			String db_username , 
			String db_password, 
			String test_sql,
			String sql, 
			int limit,
			ArrayList<String[]> bindlist
			) {
	//*************************************************************
		ArrayList<String[]> ret1 = new ArrayList<String[]>();

		
		Connection connApp=getconn(db_driver, db_connstr, db_username, db_password, test_sql);
		ret1=getDbArrayApp(connApp, sql, limit, bindlist, null);
		
		
		return ret1;
	}	
	
//*************************************************************
public ArrayList<String[]> getDbArrayApp(Connection connconf,String env_id, String sql, int limit,ArrayList<String[]> bindlist, ArrayList<String> colList) {
//*************************************************************
	ArrayList<String[]> ret1 = new ArrayList<String[]>();

	
	Connection connApp=getconn(connconf, env_id);
	ret1=getDbArrayApp(connApp, sql, limit, bindlist, colList);
		
	
	return ret1;
}
	
//*********************************************************************************************	
public ArrayList<String[]> getDbArrayApp(
		Connection connApp,
		String sql, 
		int limit,
		ArrayList<String[]> bindlist, 
		ArrayList<String> colList) {
	
	ArrayList<String[]> ret1 = new ArrayList<String[]>();
	
	int reccnt = 0;
	
	PreparedStatement pstmtApp = null;
	ResultSet rsetApp = null;
	ResultSetMetaData rsmdApp = null;
	
	try {
		
		pstmtApp = connApp.prepareStatement(sql);
		
		//------------------------------ end binding

		if (bindlist!=null) {
			for (int i = 1; i <= bindlist.size(); i++) {
				String[] a_bind = bindlist.get(i - 1);
				String bind_type = a_bind[0];
				String bind_val = a_bind[1];

				if (bind_type.equals("INTEGER")) {
					if (bind_val == null || bind_val.equals(""))
						pstmtApp.setNull(i, java.sql.Types.INTEGER);
					else
						pstmtApp.setInt(i, Integer.parseInt(bind_val));
				} else if (bind_type.equals("LONG")) {
					if (bind_val == null || bind_val.equals(""))
						pstmtApp.setNull(i, java.sql.Types.INTEGER);
					else
						pstmtApp.setLong(i, Long.parseLong(bind_val));
				} else if (bind_type.equals("ROWID")) {
						ROWID r = new ROWID();
						r.setBytes(bind_val.getBytes());
						pstmtApp.setRowId(i, r);
				} else if (bind_type.equals("DATE") || bind_type.equals("DATETIME") || bind_type.equals("TIMESTAMP")) {
					if (bind_val == null || bind_val.equals(""))
						pstmtApp.setNull(i, java.sql.Types.DATE);
					else
					{
						Date b=new Date();
						try {
							SimpleDateFormat df=new SimpleDateFormat(DEFAULT_DATE_FORMAT);
							b=df.parse(bind_val);
						} catch(Exception e) {};
						java.sql.Date sqld=new java.sql.Date(b.getTime());
						//pstmtConf.setDate(i, sqld);
						Timestamp t=new Timestamp(b.getTime());
						pstmtApp.setTimestamp(i, t);
					}
						
				} else {
					pstmtApp.setString(i, bind_val);
				}
			}
			//------------------------------ end binding
		}  // if bindlist 
		
		if (rsetApp == null) rsetApp = pstmtApp.executeQuery();
		if (rsmdApp == null) rsmdApp = rsetApp.getMetaData();

		int colcount = rsmdApp.getColumnCount();
		
		if (colList!=null) {
			colList.clear();
			for (int i=1;i<=colcount;i++) 
				colList.add(rsmdApp.getColumnName(i));
			
			
		}
		
		
		String a_field = "";
		while (rsetApp.next()) {
			reccnt++;
			if (reccnt > limit) break;
			String[] row = new String[colcount];
			for (int i = 1; i <= colcount; i++) {
				try {
					if ("DATE,TIMESTAMP,DATETIME".indexOf(rsmdApp.getColumnTypeName(i).toUpperCase()) > -1) {
						Date d = rsetApp.getDate(i);
						if (d == null)	a_field = "";
						else a_field = new SimpleDateFormat(DEFAULT_DATE_FORMAT).format(d);
					} else
						a_field = rsetApp.getString(i);
						if (a_field.equals("null")) {
							if (rsetApp.wasNull()) a_field="";
						}
					} 
				catch (Exception enull) {a_field = "";}
				row[i - 1] = a_field;
			}
			ret1.add(row);
		}
		
	} catch (Exception ignore) {
		
		ignore.printStackTrace();
		System.out.println("Exception@getDbArrayApp : " + sql);
	} finally {
		try {rsmdApp = null;} catch (Exception e) {}
		try {rsetApp.close();rsetApp = null;} catch (Exception e) {}
		try {pstmtApp.close();pstmtApp = null;} catch (Exception e) {}
	}
	return ret1;
}
//*********************************************************************************************
void loadUserPermissions(Connection conn, HttpSession session, String user_id) {

	ArrayList<String[]> permList=getUserPermissions(conn, session, user_id);
	
	for (int i=0;i<permList.size();i++) {
		String permission_id=permList.get(i)[0];
		String permission_name=permList.get(i)[1];
		//System.out.println("Permission to set : " + permission_name + "["+permission_id+"]");
		session.setAttribute("haspermission_id_"+permission_id, "true"); 
		session.setAttribute("haspermission_name_"+permission_name, "true"); 
	}
	
}
//*********************************************************************************************
public String newMenuItem(
		Connection conn, 
		HttpSession session, 
		HttpServletRequest request, 
		String icon, 
		String title, 
		String page) {

	String string_name="SYS_MENU_ITEM_FOR_"+page;
	String menu_title_by_lang=decodeStringTitle(conn, session, title, string_name, false);


	
	String def_class="navbar-brand";
	String style="";
	
	if(request.getRequestURI().contains(page)) {
		style="background-color:#428bca; color: white; ";
	}
		
	

		return 
				"<a class=\""+def_class+"\" href=\""+page+"\" style=\""+style+"\">" +
			            "<span class=\"glyphicon glyphicon-"+icon+"\" ></span> <small><small><b>"+menu_title_by_lang +"</b></small></small>" +
					  "</a>";
		
}


//***********************************
public String printHeader(HttpServletRequest request, HttpSession session) {
//***********************************
	Connection conn=getconn();
	

	String html=""+

		
	   "<div class=\"navbar\" role=\"navigation\">\n" +
	      "<div class=\"container\">\n" +
	      
	        "<div class=\"navbar-header\">\n" +
	          "<button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\n" +
	            "<span class=\"sr-only\">Toggle navigation</span>\n" +
	            "<span class=\"icon-bar\">\n" +"</span>\n" +
	            "<span class=\"icon-bar\">\n" +"</span>\n" +
	            "<span class=\"icon-bar\">\n" +"</span>\n" +
	          "</button>\n";
	          
	          html=html + 
	        		  "<ul class=\"nav\">";
	          
	          
	        	  html=html+ newMenuItem(conn, session, request, "home", "Home", "default2.jsp");


			  

	  //****************************************************************
	  if (checkrole(session, "MADDES") || checkrole(session, "MADRM") || checkrole(session, "MADUSR") || checkrole(session, "MADPLN") || checkrole(session, "ADMIN")) 	
		  html=html+newMenuItem(conn, session, request, "screenshot", "Request", "madrequest.jsp");
	  
	//****************************************************************
    if (checkrole(session, "MADDES") || checkrole(session, "MADRM") || checkrole(session, "MADUSR") || checkrole(session, "MADPLN") || checkrole(session, "ADMIN")) 	
		  html=html+newMenuItem(conn, session, request, "dashboard", "Dashboard", "dashboard.jsp");
		  
	  if (checkrole(session, "ADMIN")) 
		  html=html+ newMenuItem(conn, session, request, "picture", "Monitoring", "monitoring2.jsp");
	  
	  //****************************************************************
	  if (checkrole(session, "MADRM") || checkrole(session, "ADMIN") || checkrole(session, "MADPLN")) 	
		  html=html+newMenuItem(conn, session, request, "wrench", "Configuration", "configuration.jsp");
	  

	  if (checkrole(session, "ADMIN"))
		  html=html+ newMenuItem(conn, session, request, "wrench", "Administration", "admin2.jsp");
	  
	  
	

	  
		html=html+ newMenuItem(conn, session, request, "info-sign", "", "about.jsp");
		  
		html=html+
	        "</div>\n" +
	        
	        "<div class=\"navbar-collapse collapse\">\n" +
	          "<ul class=\"nav navbar-nav navbar-right\">\n";
	          
	          String curruser="";
	            
			try{curruser=(String) session.getAttribute("username");} catch(Exception e) {curruser="";}
			
			int len=0;
			try {len=curruser.length();} catch(Exception e) {len=0;}
            if (len==0) {
            	html=html+
	            "<form class=\"form-inline\" role=\"form\" name=\"flogin\">\n" +
	            "  <div class=\"form-group\" style=\"margin:5px;\">\n" +
	            "    <label class=\"sr-only\" for=\"txtUsername\">Username</label>\n" +
	            "    <input class=\"form-control\" id=\"txtUsername\" placeholder=\"Username\" name=\"username\" onkeypress=\"return doLoginOnEnter(event)\">\n" +
	            "  </div>\n" +
	            "  <div class=\"form-group\">\n" +
	            "    <label class=\"sr-only\" for=\"password\">Password</label>\n" +
	            "    <input type=\"password\" id=\"txtPassword\" class=\"form-control\" id=\"password\" placeholder=\"Password\" name=\"password\" onkeypress=\"return doLoginOnEnter(event)\">\n" +
	            "  </div>\n"+
	            "  <input type=\"button\" name=btlogin class=\"btn-primary btn-sm\" value=\"Login\" onclick=\"doLogin();\"  />\n";
	            
	           if (nvl(((String) session.getAttribute("invalid_user_attempt")),"-").equals("true")) 
	        	   html=html+"<br><center><font color=red size=2>Invalid username or password!!!</font></center>";
	            		
	           html=html+"</form>";
            }
            else {
            	String curr_lang=nvl((String) session.getAttribute("curr_lang"),"");
            	
            	ArrayList<String[]> langArr=(ArrayList<String[]>) session.getAttribute("langArr");
            	
            	String lang_combo=makeComboArr(langArr, "", "size=1  id=langCombo onchange=\"setUserLang()\" ", curr_lang, 0);
            	
            	html=html+
            			"<table border=0 cellspacing=0 cellpadding=0>"+


							
            			"<tr>"+
            			
						"<td>"+
						lang_combo+
						"</td>"+

						"<td>"+
            			"<span class=\"glyphicon-class\">[<font color=red>"+curruser+"</font>]</span>"+
            			"</td>"+
            					
            					
						"<td>"+
						"<a class=\"navbar-brand\" href=\"default2.jsp?logout=YES\">\n" +
								" <span class=\"glyphicon glyphicon-off\">\n" +"</span>\n" +
						" </a>\n"+            			
						"</td>"+

            			"</tr>"+
            			
            			
            			"</table>";
            	
            	
            	}
				  
	  	html=html+				  
			  "</ul>\n" +
	        "</div>\n" +
	      "</div>\n" +
	    "</div>\n" ;

	 
		
	   html = html + "\n" +
			   "<div class=\"alert alert-success hide\" role=\"alert\" id=\"myAlert\">MyAlertMessage</div>";
		
	   if (conn!=null) closeconn(conn);

	return html;
}


//***********************************************
public void testmail(Connection conn) {
//***********************************************
	
	String sql="";
	String from=nvl(getParamByName(conn,"JAVAX_TEST_EMAIL_ADDRESS"), "TDM@tdmexpert.com");
	
	String to=getParamByName(conn,"JAVAX_EMAIL_ADDRESS");
	if (to.trim().length()==0) return;

	final String username=getParamByName(conn,"JAVAX_EMAIL_USERNAME");
	final String password=decode(getParamByName(conn,"JAVAX_EMAIL_PASSWORD"));
	
	System.out.println("*****************   TEST MAIL *************************");
	System.out.println("JAVAX_TEST_EMAIL_ADDRESS : " + from);
	System.out.println("JAVAX_EMAIL_USERNAME : " + username);
	
	Properties props=System.getProperties();

	String props_str=getParamByName(conn,"JAVAX_EMAIL_PROPERTIES");
	
	if (props_str.length()==0) return; 
	else 
	{
		String[] arr=props_str.split("\n");
		for (int i=0;i<arr.length;i++) {
			String line=arr[i].trim();
			String par="";
			String val="";
			if (line.contains("=")) {
				par=line.split("=")[0];
				val=line.split("=")[1];
			}
			if (par.length()>0) {
				System.out.println("Setting Javax Email Property : " + par+"="+val);
				props.put(par, val);
			}
			
		}
		
	}
	
	
	
	
	StringBuilder sb=new StringBuilder();
	sb.append("test mail");
	
	Session session=null;
	String auth_err_msg="";
	if (username.length()==0) 
			session=Session.getInstance(props);
	else {
		try {
		session=Session.getInstance(props,new javax.mail.Authenticator() {
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(username, password);
			}
		  });
		} catch(Exception e) {auth_err_msg=e.getMessage(); e.printStackTrace();}
	}
	
	if (session==null) {
		System.out.println("Not authenticated. : "+auth_err_msg);
		props=null;
		return;
	}
	else
		System.out.println("authenticated... ");

	
	
	Message msg=new MimeMessage(session);
	
	try {

				msg.setContent(sb.toString(), "text/html; charset=utf-8");
				sb=null;
				msg.setFrom(new InternetAddress(from));

				String[] targetAddresses=to.split(";");
				for (int t=0;t<targetAddresses.length;t++) {
					String atarget=targetAddresses[t].trim();
					if (atarget.length()>0) {
					msg.addRecipients(Message.RecipientType.TO, InternetAddress.parse(atarget,false));
					}
				}
				
			

				msg.setSubject("test mail from data masking");

				System.out.println("message is ready to send. transporting... ");

				Transport.send(msg);

				System.out.println("mail was sent successfully to : "+to);
		
	} catch (Exception e) {
		System.out.println("Exception@sendmail : "+e.getMessage());
		e.printStackTrace();
	}
	finally {
		props=null;
		msg=null;
	}

	
}




// ----------------------------------------------
public String getEnvValue(String key1) {
    String ret1 = "";

    Map<String, String> env = System.getenv();

    for (String envName : env.keySet()) {
        if (envName.toUpperCase().indexOf(key1.toUpperCase()) == 0) {
            ret1 = env.get(envName);
        }
    }
    
    ret1=ret1.replaceAll("\"", "");
    //System.out.println(key1+"="+ret1);
    
    
    return ret1;
}


/*
//*************************************************************
private boolean testconn(Connection connconf, String env_id) {
//************************************************************
boolean ret1=true;
Connection conn=getconn(connconf, env_id);
if (conn==null) ret1=false;
closeconn(conn);
return ret1;
}
*/



//*************************************************************
private Connection getconn() {
	Connection conn = null;

	try {
		Context initContext = new InitialContext();
		Context envContext  = (Context)initContext.lookup("java:/comp/env");
		DataSource ds = (DataSource) envContext.lookup("jdbc/tdmconfig");
		
		try {ds.setLoginTimeout(20);} catch(Exception e) {}

		try {
			
			conn = ds.getConnection();
			
		} catch (SQLException e) {
			conn=null;
			System.out.print("getconn@"+e.getMessage());
			e.printStackTrace();
		}
		
	} catch (NamingException e) {
		conn=null;
		System.out.print("NamingException@"+e.getMessage());
		e.printStackTrace();
	}
	


	return conn;
}



String last_connection_error="";

String start_char="\"";
String end_char="\"";
String middle_char=".";

//*************************************************************
private Connection getconn(Connection connconf, String env_id) {
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",env_id});
	
	String sql="select db_driver, db_connstr, db_username, db_password from tdm_envs where id=?";
	ArrayList<String[]> recs=getDbArrayConf(connconf, sql, 1, bindlist);
	
	if (recs.size()==0) {
		System.out.println("Exception@getconn : Environment parameters cannot be retrieved. Environment id : "+env_id);
		return null;
	}
	
	String db_driver="";
	String db_connstr="";
	String db_username="";
	String db_password="";
	
	try{
	db_driver=recs.get(0)[0];
	db_connstr=recs.get(0)[1];
	db_username=recs.get(0)[2];
	db_password=recs.get(0)[3]; 
	
	
	} catch(Exception e) {
		e.printStackTrace();
		return null;
	}
	
		Connection ret1 = null;
		String test_sql="";
		
		sql="select flexval1, flexval2 from  tdm_ref where ref_type='DB_TYPE' and ref_name='"+db_driver+"'";
		
		ArrayList<String[]> retdb=getDbArrayConf(connconf, sql, 1, new ArrayList<String[]>());
		
		if (retdb.size()==0) {
			System.out.println("Exception@getconn : Database type parameters cannot be retrieved. db driver : "+db_driver);
			return null;
		}
		
		String db_type=retdb.get(0)[0];
		String template=retdb.get(0)[1];
		

		
		if (template.contains("|")) 
			test_sql=template.split("\\|")[0];
		
		if (test_sql.length()==0) test_sql="select 1";
		
		ret1=getconn(db_driver, db_connstr, db_username, db_password, test_sql);
			

	return ret1;
	}

//*************************************************************
private Connection getconn(String db_driver, String db_connstr, String db_username, String db_password, String test_sql) {
	Connection ret1=null;
	
	
	
	try {
		Class.forName(db_driver);
		Connection conn = DriverManager.getConnection(db_connstr, db_username, db_password);
		
		Statement stmt = conn.createStatement();
		ResultSet rset = stmt.executeQuery(test_sql);
		while (rset.next()) {rset.getString(1);	}

		ret1=conn; 
		
		if(conn!=null && conn.getMetaData().getIdentifierQuoteString().trim().length()>0) 
			try {
				start_char=conn.getMetaData().getIdentifierQuoteString();
				end_char=start_char;
				middle_char=nvl(conn.getMetaData().getCatalogSeparator(),".");
			} catch(Exception e) {
				e.printStackTrace();
			}
		
	} catch (Exception ignore) {
		last_connection_error=ignore.getMessage();
		ignore.printStackTrace();
		ret1=null;
	}
	
	return ret1;
}
//*************************************************************
private void closeconn(Connection conn) {
		if (conn==null) return;
		try {
			conn.close();
			conn=null;
		} catch (SQLException e) {
			conn=null;
			System.out.print("closeconn@"+e.getMessage());
		}
		
}

//*************************************************************
public ArrayList<String[]> getWpcListByWorkPlan(Connection connconf,String work_plan_id, String a_filter) {
	String sql="select id,status from tdm_work_package where work_plan_id="+nvl(work_plan_id,"0");
	if(!nvl(a_filter,"-").equals("-")  && !nvl(a_filter,"-").equals("ALL")) sql=sql +" and tab_id=" + a_filter;
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	return getDbArrayConf(connconf, sql, Integer.MAX_VALUE, bindlist);
}


//*************************************************************
String getDbName(Connection conn) {
//*************************************************************
	String url="";

	try {url=conn.getMetaData().getURL();} catch(Exception e) {}
	
	String split_str="";
	if (url.indexOf("database=")>-1) split_str="database=";
	if (url.indexOf("databaseName=")>-1) split_str="databaseName=";
	if (url.indexOf("DatabaseName=")>-1) split_str="DatabaseName=";
	if (url.indexOf("db=")>-1) split_str="db=";
	if (url.indexOf("dbname=")>-1) split_str="dbname=";
	
	String db_name="";
	try{db_name=url.split(split_str)[1].split(";")[0];} catch(Exception e) {}
	
	return db_name;
}


//*************************************************************
public String getEnvDBParam(Connection conn, String env_id, String param_name) {
//*************************************************************
	ArrayList<String[]> bindlist=new ArrayList<String[]>();

	String sql="";
	String fname="";
	String ret1="";
	
	if (param_name.equals("DB_TYPE")) fname="flexval1";
	if (param_name.equals("TEST_SQL")) fname="flexval2";
	if (param_name.equals("ROWID")) fname="flexval3";
	
	
	sql="select r." + fname + " from  tdm_envs e, tdm_ref r where e.id="+env_id+" and e.db_driver=r.ref_name"; 
	

	ArrayList<String[]> env=getDbArrayConf(conn, sql, 1, bindlist);
	

	try {
		ret1=env.get(0)[0].replaceAll("null", "");
	} catch(Exception e) {
		System.out.println("Error on loading db info");
		e.printStackTrace();
	}

	return ret1;

}

//**************************************************************
public String codehtml(String a) {
//**************************************************************
//if (nvl(a,"").length()==0) return "";
if (a==null) return "";
return a.replaceAll("\"", "&quot;");
}



//*************************************************************
	public boolean execDBConf(Connection conn, String sql,	ArrayList<String[]> bindlist) {
		boolean ret1 = true;
		PreparedStatement pstmt_execbind=null;

		StringBuilder using = new StringBuilder();
		try {
			pstmt_execbind = conn.prepareStatement(sql);

			for (int i = 1; i <= bindlist.size(); i++) {
				String[] a_bind = bindlist.get(i - 1);
				String bind_type = a_bind[0];
				String bind_val = a_bind[1];
				if (i > 1)
					using.append(", ");
				using.append("{" + bind_val + "}");

				if (bind_type.equals("INTEGER")) {
					if (bind_val == null || bind_val.equals(""))
						pstmt_execbind.setNull(i, java.sql.Types.INTEGER);
					else
						pstmt_execbind.setInt(i, Integer.parseInt(bind_val));
				} else if (bind_type.equals("LONG")) {
					if (bind_val == null || bind_val.equals(""))
						pstmt_execbind.setNull(i, java.sql.Types.INTEGER);
					else
						pstmt_execbind.setLong(i, Long.parseLong(bind_val));
				} else if (bind_type.equals("DATE")) {
					if (bind_val == null || bind_val.equals(""))
						pstmt_execbind.setNull(i, java.sql.Types.DATE);
					else {
						java.util.Date d = new SimpleDateFormat("dd/MM/yyyy").parse(bind_val);
						java.sql.Date date = new java.sql.Date(d.getTime());
						pstmt_execbind.setDate(i, date);
					}
				} 
				else {
					pstmt_execbind.setString(i, bind_val);
				}
			}


			pstmt_execbind.executeUpdate();



		} catch (Exception e) {
			e.printStackTrace();
			ret1 = false;
		} finally {
			try {
				pstmt_execbind.close();
				pstmt_execbind = null;
			} catch (Exception e) {
			}
		}

		return ret1;
	}
	

	// *******************************
	public String nvl(String in, String out) {
		String r = "";
		try {
			r=in;
			if (r.equals("null")) r="";
		} catch (Exception e) {
			r = "";
		}

		if (r.length() == 0)
			r = out;

		return r; 
	}


//**************************************************************
public String makeComboArr(ArrayList<String[]> arr, String name, String additional, String curr_value, int width) {
//**************************************************************
//String a="<div>";

String v_width="100%";
if (width>0) v_width=""+width+"px"; 
if (width<0) v_width=""+Math.abs(width)+"%";



	String a="<select style=\"width:"+v_width+"; \" class=\"form-control\" #SIZE# name=\""+name+"\" "+additional+">";
	
	if (additional.toLowerCase().contains("size=")) 
		a=a.replace("#SIZE#", "");
	else {		
		a=a.replace("#SIZE#", "size=1");
		a=a+"<option></option>";
	}
	
	String selected="";
	
	if (arr!=null)
	for (int i=0;i<arr.size();i++) {
		String[] opt=arr.get(i);
		String val="";
		String cap="";
		
		val=opt[0];
		
		try{cap=opt[1];} catch(Exception e) {cap=val;}
		
		selected="";
		if (val.equals(curr_value)) selected="selected";
		
		a=a+"<option "+selected+" value=\""+codehtml(val)+"\">" +codehtml(cap)+ "</option>";	
	}
	
	//a=a+"</select></div>";
	a=a+"</select>";
	
	return a;
}

//**************************************************************
public String makeCombo(Connection connconf, String sql, String name, String additional, String curr_value, int width) {
//**************************************************************
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	ArrayList<String[]> arr=getDbArrayConf(connconf, sql, Integer.MAX_VALUE, bindlist);
	
	return makeComboArr(arr, name, additional, curr_value, width);
}

//**************************************************************
public String makeComboArray(Connection connconf, String sql, String name) {
//**************************************************************
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	ArrayList<String[]> arr=getDbArrayConf(connconf, sql, Integer.MAX_VALUE, bindlist);
	
	String ret1="var " + name + "=new Array(ARRAYLIST);";
	String arritems="\"\"";
	
	

	
	for (int i=0;i<arr.size();i++) {
		String[] opt=arr.get(i);
		arritems=arritems + ",\"" + opt[0] +"::" +  opt[1] + "\"";
	}
	
	ret1=ret1.replaceAll("ARRAYLIST", arritems);
	
	
	return ret1;
	
	
}


//**************************************************************
public String makeMemo(Connection conn, String sql, String name, String cols, String rows ) {
//**************************************************************
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);

    String a = "<div class=\"input-group\">";

	a+="<textarea style=\"width:700px\" name=\""+name+"\" cols=\""+cols+"\" rows=\""+rows+"\" class=\"form-control\">";
	
	for (int i=0;i<arr.size();i++) {
		String[] opt=arr.get(i);
		a=a+opt[0]+"\n";	
	}
	
	a=a+"</textarea></div>";
	
	
	return a;
	
	
}


//**************************************************************
public String getDBSingleVal(Connection connconf, String sql) {
//**************************************************************
String ret1="";
ArrayList<String[]> bindlist=new ArrayList<String[]>();
try {
	ret1=getDbArrayConf(connconf, sql, 1, bindlist).get(0)[0];
} catch(Exception e) {ret1="";}

return ret1;
}

//----------------------------------------------------------------------
public String formatnum(String num) {
	
	long l=0;
	
	try{l=Long.parseLong(num);} catch(Exception e) {l=0;}
	String t=""+l;
	String ret1="";
	int z=0;
	
	for (int i=t.length()-1;i>=0;i--) {
			ret1=""+t.charAt(i)+ret1;
			if (z>0 && i>0 && (z+1) %3==0) ret1=","+ret1;
			z++;
	}
	
	
	return ret1;
}


//----------------------------------------------------------------------
public String progressbar(String ax, String bx) {
	
long a=0;
long b=0;

try{a=Long.parseLong(ax);} catch(Exception e) {a=0;}

try{b=Long.parseLong(bx);} catch(Exception e) {b=0;}

double d=0;

if (b>0) d=100*a/b; else d=0;

if (d>100) d=100;

int carpan=1;
int completed=(int) d*carpan;
int not_completed=(100-(int) d)*carpan;

String alt_text=nvl(formatnum(ax),"0") + " / " + formatnum(bx);

String progressbar=	"" + 
"<img src=\"img/prog_completed.png\" border=0 height=14 width=\"" +  completed + "\" alt=\"" + alt_text + "\">" + 
"<img src=\"img/prog_not_completed.png\" border=0 height=14 width=\"" +  not_completed + "\" alt=\"" + alt_text + "\">" + 
" [<font color=red><b>" + d + "%</b></font>]" + 
"<br><center><font size=2>(" + alt_text + ")</font><center>";

if (b==0) progressbar="-";

return progressbar;

}


//********************************************
private void setBinInfo(Connection conn, String table_name, int id, String field_name, StringBuilder sb_info) {
	
	if (sb_info.length()==0) return;
	
	byte[] compressed=compress(sb_info.toString());
	
	String sql="update "+table_name+" set "+field_name+" =? where id=?";
	PreparedStatement stmt=null;
	try {
		stmt = conn.prepareStatement(sql);
		stmt.setBytes(1, compressed);
		stmt.setInt(2, id);
		stmt.executeUpdate();
	}  catch (Exception e) {
		e.printStackTrace();
	} finally {
		try {stmt.close();stmt = null;} catch (Exception e) {	}
	}
}

//********************************************
void setBinInfo(Connection conn, String table_name, int id, String field_name, byte[] byte_info) {
	
	if (byte_info==null || byte_info.length==0) return;
	
	byte[] compressed=compress(byte_info);
	
	String sql="update "+table_name+" set "+field_name+" =? where id=?";
	PreparedStatement stmt=null;
	try {
		stmt = conn.prepareStatement(sql);
		stmt.setBytes(1, compressed);
		stmt.setInt(2, id);
		stmt.executeUpdate();
	}  catch (Exception e) {
		e.printStackTrace();
	} finally {
		try {stmt.close();stmt = null;} catch (Exception e) {	}
	}
}
//********************************************
public void setMadRequestAttachment(Connection conn, HttpSession session, int id, String file_path, String file_name) {
	
	session.setAttribute("attachment_process_busy", "true");
	
	
	byte[] byte_info=null;
	
	DataInputStream dis =null;
	boolean file_read_ok=true;
    try {
    	File storeFile=new File(file_path);
    	byte_info = new byte[(int) storeFile.length()];
    	System.out.println("File length : " + byte_info.length);
    	dis = new DataInputStream(new FileInputStream(storeFile));
    	dis.readFully(byte_info);
    	System.out.println("File read successfully. ");
    } catch(Exception e ) {
    	e.printStackTrace();
    	file_read_ok=false;
    } finally {
    	 try {dis.close();} catch(Exception e) {}
    	
    }
    
    if (!file_read_ok) {
    	System.out.println("File read error");
    	 session.setAttribute("attachment_process_busy", "false");
    	return;
    }
    
	
	String curruser=""+((Integer) session.getAttribute("userid"));
	
	String sql="update mad_request_attachment set file_name=?, file_size=?, entuser=?,entdate=now() where id=? ";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"STRING",file_name});
	bindlist.add(new String[]{"LONG",""+byte_info.length});
	bindlist.add(new String[]{"INTEGER",curruser});
	bindlist.add(new String[]{"INTEGER",""+id});
	
	execDBConf(conn, sql, bindlist);
	
	setBinInfo(conn, "mad_request_attachment", id, "file_blob", byte_info);
	
	 session.setAttribute("attachment_process_busy", "false");

}

//***********************************************
boolean waitForAttachmentCompleted(Connection conn, HttpSession session) {
	long timeout=120000;
	long start_ts=System.currentTimeMillis();
	while(true) {
		try{Thread.sleep(100);} catch(Exception e) {}
		String busy=nvl((String) session.getAttribute("attachment_process_busy"),"false");
		if (busy.equals("false")) break;
		if (System.currentTimeMillis()-start_ts>timeout) return true;
	}
	
	return false;
	
}
//***********************************************
public byte[] getInfoBin(Connection conn, String table_name, int id,String fldname) {
//******************************************************

	byte[] ret1=null;
	String sql="select "+fldname+" from " +table_name+  " where id=?";
	
	PreparedStatement pstmt = null;
	ResultSet rset = null;
	
	if (conn==null) conn=getconn();
	
	if (conn!=null)
	{
		try {
			
			
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, id);
			
			rset = pstmt.executeQuery();
			
			while (rset.next()) {
				try {
				ret1=rset.getBytes(1); 
				
				} catch(Exception e) {ret1=null;}
				break;
			}
			
		} catch (Exception ignore) {
			ignore.printStackTrace();
			ret1=null;
		} finally {
			try {rset.close();rset = null;} catch (Exception e) {}
			try {pstmt.close();	pstmt = null;} catch (Exception e) {}
		}
	} //if (conn!=null)
	
	return ret1;
}


//*************************************************
public static byte[] compress(String data){
	byte[] input;
	try {
		input = data.getBytes();
	} catch (Exception e) {
		e.printStackTrace();
		return null;
	}
    Deflater df = new Deflater();
    df.setLevel(Deflater.BEST_COMPRESSION);
    df.setInput(input);

    ByteArrayOutputStream baos = new ByteArrayOutputStream(input.length);
    df.finish();
    byte[] buff = new byte[1024];
    while (!df.finished()) {
        int count = df.deflate(buff);
        baos.write(buff, 0, count);
    }
    try {
		baos.close();
	} catch (IOException e) {
		e.printStackTrace();
	}
    byte[] output = baos.toByteArray();

    return output;
}


//*************************************************
public static byte[] compress(byte[] input){
	
    Deflater df = new Deflater();
    df.setLevel(Deflater.BEST_COMPRESSION);
    df.setInput(input);

    ByteArrayOutputStream baos = new ByteArrayOutputStream(input.length);
    df.finish();
    byte[] buff = new byte[1024];
    while (!df.finished()) {
        int count = df.deflate(buff);
        baos.write(buff, 0, count);
    }
    try {
		baos.close();
	} catch (IOException e) {
		e.printStackTrace();
	}
    byte[] output = baos.toByteArray();

    return output;
}


//******************************************************
public static String uncompress(byte[] input)  {
//******************************************************
  Inflater ifl = new Inflater();
  ifl.setInput(input);

  ByteArrayOutputStream baos = new ByteArrayOutputStream(input.length);
  
  byte[] buff = new byte[1024];
  while (!ifl.finished()) {
      int count;
		try {
			count = ifl.inflate(buff);
		} catch (DataFormatException e) {
			return "ERROR";
		}
      baos.write(buff, 0, count); 
  }
 
  byte[] output = baos.toByteArray();
  try {baos.close();} catch (IOException e){}
 
  
  try {
  return new String(output,"UTF-8");
  
  } 	
  catch(Exception e) 
  	{
	  return "ERROR";
	  }
}



//******************************************************
byte[]  uncompresstobyte(byte[] input)  {
//******************************************************
if (input==null) return null;
Inflater ifl = new Inflater();
ifl.setInput(input);

ByteArrayOutputStream baos = new ByteArrayOutputStream(input.length);

byte[] buff = new byte[1024];
while (!ifl.finished()) {
    int count;
		try {
			count = ifl.inflate(buff);
		} catch (DataFormatException e) {
			return null;
		}
    baos.write(buff, 0, count); 
}

byte[] output = baos.toByteArray();
try {baos.close();} catch (IOException e){}


return output;
}

//**************************************************************
public String printMonitoringDetails(Connection connconf, String work_plan_id,String tab_name, String status, String only_failed, String a_filter) {
//**************************************************************
String sql="";

sql="select wplan_type from tdm_work_plan where id="+work_plan_id;
String wp_type=getDBSingleVal(connconf, sql);

StringBuilder html=new StringBuilder();
if (tab_name.toUpperCase().equals("TDM_WORK_PACKAGE")) {
	sql="select id, wp_name, status, " + 
		" start_date, end_date, duration, all_count, export_count, " + 
		" done_count, success_count, fail_count  "+
		" from tdm_work_package where status=? and work_plan_id=?";
	
	if (!wp_type.equals("AUTO") && !nvl(a_filter,"-").equals("-") && !nvl(a_filter,"-").equals("ALL")) sql = sql + " and tab_id=" + a_filter;
		sql=sql + " order by id ";
	
	html.append(""+
			"<table class=table>"+
			"<tr>"+
			"<td>#</td>"+
			"<td>Wpack Name</td>"+
			"<td>Status</td>"+
			"<td>Start Time</td>"+
			"<td>End Time</td>"+
			"<td>Duration</td>"+
			"<td>Export#</td>"+
			"<td>Progress</td>"+
			"<td>Fail#</td>"+
			"<td>Err.</td>"+
			"</tr>");
} 

if (tab_name.toUpperCase().contains("TDM_TASK")) {
	sql="select id, task_name, status, " + 
			" start_date, end_date, duration,  " + 
			" all_count, done_count, success_count, fail_count  "+
			" from tdm_task_"+work_plan_id+"_xxWPACKIDxx  ";
	
	if (nvl(status,"ALL").equals("ALL"))  sql = sql + " where status!=? ";
	else sql = sql + " where status=? ";
	
	if (nvl(only_failed,"-").equals("YES")) 
		sql=sql + " and fail_count>0 ";
	
	if (wp_type.equals("AUTO") && !nvl(a_filter,"-").equals("-") && !nvl(a_filter,"-").equals("ALL"))  
		sql=sql + " and script_id="+a_filter;
	
	sql=sql + " order by id ";
	
	
		html.append(""+
				"<table  class=\"table table-condensed\">"+
				"<tr class=active>"+
				"<td>#</td>"+
				"<td>Task Name</td>"+
				"<td>Task<br>Status</td>"+
				"<td>Start/End Time</td>"+
				"<td>Duration</td>");
		if (wp_type.equals("AUTO"))
			html.append("<td>Test<br>Status</td>"+
					"<td>Script</td>"+
					"<td>Log.</td>");
		else
			html.append("<td>All#</td>"+
				"<td>Success#</td>"+
				"<td>Fail#</td>"+
				"<td>Task<br>Content</td>"+
				"<td>Log.</td>");
		
		if (wp_type.equals("AUTO")) 
			html.append("<td>Report</td>");
		else 
			html.append("<td>Error</td>");
		html.append("</tr>");
}

	


ArrayList<String[]> bindlist=new ArrayList<String[]>();
bindlist.add(new String[]{"STRING",status});
if (tab_name.toUpperCase().equals("TDM_WORK_PACKAGE")) 
	bindlist.add(new String[]{"INTEGER",work_plan_id});


	
	
					
	if (tab_name.toUpperCase().equals("TDM_WORK_PACKAGE")) {
		ArrayList<String[]> recs=getDbArrayConf(connconf, sql, 100, bindlist);	

		for (int i=0;i<recs.size();i++) {
			String[] arec=recs.get(i);
			String wpc_status=arec[2];
			html.append(""+
					"<tr>"+
					"<td>"+arec[0]+"</td>"+ //id
					"<td>"+arec[1]+"</td>"+ //wp name
					"<td>"+wpc_status+"</td>"+ // status
					"<td>"+arec[3]+"</td>"+ //start
					"<td>"+arec[4]+"</td>"+ //end
					"<td>"+formatnum(arec[5])+"</td>"+ //duration
					"<td>"+arec[7]+"</td>"+ //exp progress
					"<td>"+progressbar(arec[9],arec[7])+"</td>"+ //done progress
					"<td>"+formatnum(arec[10])+"</td>");//fail
					
					
					if (wpc_status.equals("FAILED") || Integer.parseInt(nvl(arec[10],"0"))>0) 
						html.append("<td><a href=\"#\" onclick=\"showInfoDetail('"+arec[0]+"','tdm_work_package','err_info');\">Show Err.</a></td>");
					else 
						html.append("<td>-</td>");
					
					
					html.append("</tr>");
		} //for (int i=0;i<recs.size();i++) {
	}  //if (tab_name.equals("TDM_WORK_PACKAGE")) {
	
		
		
		
	if (tab_name.toUpperCase().contains("TDM_TASK")) {
		int task_count=0;
		int MAX_TASK_SHOW=100;
		
		
		String wpc_filter=a_filter;
		if (wp_type.equals("AUTO")) {
			MAX_TASK_SHOW=Integer.MAX_VALUE;
			wpc_filter="ALL";
		}
		ArrayList<String[]> currWpcArr=getWpcListByWorkPlan(connconf, work_plan_id,wpc_filter);
		
		String env_id=getDBSingleVal(connconf, "select env_id from tdm_work_plan where id="+work_plan_id);
		
		for (int w=0;w<currWpcArr.size();w++) {
			
			if (task_count>MAX_TASK_SHOW) break;
		
			String work_package_id=currWpcArr.get(w)[0];
			
			ArrayList<String[]> recs=getDbArrayConf(connconf, sql.replaceAll("xxWPACKIDxx", work_package_id), 100, bindlist);	
			for (int i=0;i<recs.size();i++) {
				task_count++;
				if (task_count>100) break;
				String[] arec=recs.get(i);
				String task_status=arec[2];
			
				
					html.append(""+
							"<tr>"+
							"<td>"+arec[0]+"</td>"+ //id
							"<td>"+arec[1]+"</td>"+ // status
							"<td>"+task_status+"</td>"+ // status
							"<td nowrap>"+arec[3]+"<br>"+arec[4]+"</td>"+ //start end
							"<td>"+formatnum(arec[5])+"</td>" //duration
							); 
							if (wp_type.equals("AUTO")) {
								if (arec[8].equals("1")) html.append("<td class=success>SUCCESS</td>");
								else html.append("<td class=danger>FAIL</td>");
							} else {
								html.append("<td>"+formatnum(arec[6])+"</td>"+ //export
										"<td>"+formatnum(arec[8])+"</td>"+ //success
										"<td>"+formatnum(arec[9])+"</td>"); //fail
							}
							
							html.append(
							"<td><input type=button value=\"...\" onclick=\"showInfoDetail('"+arec[0]+"','tdm_task_"+work_plan_id+"_"+work_package_id+"','task_info_zipped','"+env_id+"');\" class=\"btn btn-warning btn-sm\"></td>"+
							"<td><input type=button value=\"...\"         onclick=\"showInfoDetail('"+arec[0]+"','tdm_task_"+work_plan_id+"_"+work_package_id+"','log_info_zipped','"+env_id+"');\" class=\"btn btn-info btn-sm\"></td>"
							);
				
						if (wp_type.equals("AUTO")) {
							if (Integer.parseInt(nvl(arec[8],"0"))>0) {
								sql="select max(id) from tdm_test_run where work_package_id=? and task_id=?";
								bindlist.clear();
								bindlist.add(new String[]{"INTEGER",""+work_package_id});
								bindlist.add(new String[]{"INTEGER",""+arec[0]});
								ArrayList<String[]> arr=getDbArrayConf(connconf, sql, 1, bindlist);
								
								String test_run_id="";
								if (arr.size()>0) test_run_id=arr.get(0)[0];
								
								if (!nvl(test_run_id,"0").equals("0"))
									html.append("<td><input type=button value=\"...\" onclick=\"openTestReport('"+test_run_id+"');\" class=\"btn btn-danger btn-sm\"></td>");
								else html.append("<td>-</td>");
							}
							else
								html.append("<td>-</td>");
						} //if (wp_type.equals("AUTO"))
						else {
							if (Integer.parseInt(nvl(arec[9],"0"))>0) 
								html.append("<td><input type=button value=\"Error\" onclick=\"showInfoDetail('"+arec[0]+"','tdm_task_"+work_plan_id+"_"+work_package_id+"','err_info_zipped');\" class=\"btn btn-danger btn-sm\"></td>");
							else 
								//html.append("<td><input type=button value=\"Show Rollbacks\" onclick=\"showInfoDetail('"+arec[0]+"','tdm_task_"+work_plan_id+"_"+work_package_id+"','rollback_info_zipped');\" class=\"btn btn-success btn-sm\"></td>");
								html.append("<td>-</td>");
						}
						
						html.append("</tr>");
			} //for (int i=0;i<recs.size();i++) {
			
		} //for (int w=0;w<currWpcArr.size();w++) {

	}


html.append("</table>");

return html.toString();
}

		
		
static final String TYPE_LIST_STRING="VARCHAR2,CHAR,VARCHAR,LONGVARCHAR,NCHAR,NVARCHAR,NLONGVARCHAR,LONG";
static final String TYPE_LIST_INT="NUMBER,TINYINT,SMALLINT,INTEGER,BIGINT,FLOAT,REAL,DOUBLE,NUMERIC,DECIMAL";
static final String TYPE_LIST_DATE="DATE,TIME,TIMESTAMP";
static final String TYPE_LIST_BLOB="BLOB,LONGBLOB,MEDIUMBLOB,TINYBLOB,LONGVARBINARY,BINARY,VARBINARY";
static final String TYPE_LIST_CLOB="CLOB,LONGCLOB,MEDIUMCLOB,TINYBCLOB,LONGVARCHAR,MEDIUMVARCHAR";

private String fieldtype2bindtype(String field_type,String orig_val) {
	String bindtype = "UNKNOWN";

	if (TYPE_LIST_STRING.indexOf(field_type.toUpperCase()) > -1) {
		return  "STRING";
	}

	if (TYPE_LIST_INT.indexOf(field_type.toUpperCase()) > -1) {

		bindtype = "INTEGER";

		try {
			long l = Long.parseLong(orig_val);
			bindtype = "LONG";
		} catch (Exception e) {	}

		try {
			int l = Integer.parseInt(orig_val);
			bindtype = "INTEGER";
		} catch (Exception e) {	}
		
		return bindtype;
	}

	if (TYPE_LIST_DATE.indexOf(field_type.toUpperCase()) > -1) 
		return "DATE";
	
	if (TYPE_LIST_BLOB.indexOf(field_type.toUpperCase()) > -1) 
		return  "BLOB";

	if (TYPE_LIST_BLOB.indexOf(field_type.toUpperCase()) > -1) 
		return  "BLOB";

	if ("ROWID".indexOf(field_type.toUpperCase()) > -1) 
		return  "ROWID";
		
	return bindtype;
}


//****************************************
String addStartEnd(String tabin) {
	
	

	if (tabin.contains(start_char)) return tabin;
	String ret1=tabin;
	try {
		ret1=
				start_char+tabin.split("\\.")[0]+end_char+
				middle_char+
				start_char+tabin.split("\\.")[1]+end_char;
	} catch(Exception e) {
		ret1=start_char+tabin+end_char;
	}
	
	String[] arr=tabin.split("\\.");
	return ret1;
	
}


//**************************************************************
public String printLongDet2(Connection connconf, String wp_type, String env_id, String id, String tab, String fld) {
//**************************************************************
	/*
	final String TAG_RECORD_START="<record>";
	final String TAG_RECORD_END="</record>";
	
	final String TAG_FIELD_START="<field>";
	final String TAG_FIELD_END="</field>";
	*/
	
	final String TAG_RECORD_START="<r>";
	final String TAG_RECORD_END="</r>";
	
	final String TAG_FIELD_START="<f>";
	final String TAG_FIELD_END="</f>";
	
	
	String sql="select " + fld.toLowerCase() + " from "+ tab.toLowerCase()+ " where id="+id;
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	String lines="";
	
	System.out.println(sql);
	
	if (fld.toUpperCase().indexOf("_ZIPPED")>-1) {
		try {
			lines=uncompress(getInfoBin(connconf, tab.toLowerCase(),Integer.parseInt(id),fld.toLowerCase()));
		} catch(Exception e) {lines=e.getMessage();}
	}
	else
	{
		ArrayList<String[]> recs=getDbArrayConf(connconf, sql, Integer.MAX_VALUE, bindlist);
		
		try {
			lines=recs.get(0)[0];
		} catch(Exception e) {lines="Exception@printLongDet:" + e.getMessage();}
	}
	
	//-----------------------------------
	if (fld.toUpperCase().equals("TASK_INFO_ZIPPED") && wp_type.equals("MASK2")) {
		ArrayList<String[]> taskArr=null;
		try { 
			String task_table_name=tab.toLowerCase();
			ByteArrayInputStream bis=new ByteArrayInputStream(
					uncompresstobyte(
							getInfoBin(connconf, task_table_name,Integer.parseInt(id),fld.toLowerCase())
									)
							);
			ObjectInputStream ois = new ObjectInputStream(bis);
			
			taskArr=(ArrayList<String[]>) ois.readObject();
			ois.close();
		} catch(Exception e) {
			System.out.println("Exception@maskingThread : " + e.getMessage());
			e.printStackTrace();
		} 
		
		StringBuilder tmp=new StringBuilder();
		
		if (taskArr!=null) {
			String[] exportInfo=taskArr.get(0);
			
			String export_catalog=exportInfo[0];
			String export_schema=exportInfo[1];
			String export_table=exportInfo[2];
			String export_statement=exportInfo[3];
			
			int colcount=Integer.parseInt(exportInfo[4]);
			
			int export_tab_id=Integer.parseInt(exportInfo[5]);
			
			System.out.println("export_tab_id : " + export_tab_id);
			
			String masking_table_name=export_schema+"."+export_table;
			if (export_schema.length()==0 || export_schema.equals("null")) masking_table_name=export_table;
			
			ArrayList<String[]> columnInfo=new ArrayList<String[]>();
			ArrayList<String> isPKArr=new ArrayList<String>();
			
			String app_sql="select ";
			
			sql="select 1 from tdm_fields where tab_id=?  and field_name=? and is_pk='YES'";
			for (int i=1;i<1+colcount;i++)  {
				columnInfo.add(taskArr.get(i));
				String field_name=columnInfo.get(i-1)[0];
				
				String isPk="NO";
				bindlist.clear();
				bindlist.add(new String[]{"INTEGER",""+export_tab_id});
				bindlist.add(new String[]{"STRING",""+field_name});
				
				ArrayList<String[]> arr=getDbArrayConf(connconf, sql, 1, bindlist);
				if (arr.size()==1) isPk="YES";
				isPKArr.add(isPk);
				
				
				if (i>1) app_sql=app_sql+ ", ";
				app_sql=app_sql+ field_name;
			}
			
			app_sql=app_sql + "  from " + masking_table_name + " where ";
			int k=0;
			for (int c=0;c<columnInfo.size();c++)  {
				String field_name=columnInfo.get(c)[0];
				if (!isPKArr.get(c).equals("YES")) continue;
				k++;
				if (k>1) app_sql= app_sql+ " and ";
				app_sql= app_sql + field_name + "=? ";
			}
			
			System.out.println("app sql : " + app_sql);
			
			int rec_start=1+colcount;
			

			
			
			tmp.append("<table class=table>");
			tmp.append("<tr class=info>");
			
			for (int c=0;c<columnInfo.size();c++)  {
				String field_name=columnInfo.get(c)[0];
				tmp.append("<td><b>"+field_name+"</b></td>");
				
				
			}
			tmp.append("</tr>");
			
			String task_status="";
			try {
				task_status=getDBSingleVal(connconf, "select status from " + tab.toLowerCase() + " where id="+id);
			} catch(Exception e) {};
			
			if (task_status.length()==0) return "Task is not there.";
			int max_rec=taskArr.size();
			if (max_rec>100) max_rec=100;
			
			for (int i=rec_start;i<max_rec;i++) {
				String[] row=taskArr.get(i);
				
				tmp.append("<tr class=active>");
				for (int c=0;c<row.length;c++) {
					tmp.append("<td>"+row[c]+"</td>");
				}
				tmp.append("</tr>");
				
				if (task_status.equals("FINISHED")) {
					
					
					bindlist.clear();
					for (int c=0;c<row.length;c++) {
						if (!isPKArr.get(c).equals("YES")) continue;
						String bindval=row[c];
						bindlist.add(new String[]{fieldtype2bindtype(columnInfo.get(c)[2], bindval),bindval});
					}
					
					ArrayList<String[]>  arr=getDbArrayApp(connconf, env_id, app_sql, 1, bindlist);
					if (arr==null || arr.size()==0) continue;
					
					
					String[] mrow=arr.get(0);
					tmp.append("<tr class=success>");
					for (int c=0;c<mrow.length;c++) {
						tmp.append("<td>"+mrow[c]+"</td>");
					}
					tmp.append("</tr>");
				}
			}
			
			tmp.append("</table>");
			
		} //if (taskArr!=null) {
		else {
			tmp.append("Array cannot be decoded.");
		}
		lines=tmp.toString();
	} 
	//-----------------------------------
	else if (fld.toUpperCase().equals("TASK_INFO_ZIPPED") && (wp_type.equals("MASK") || wp_type.equals("COPY")) ) {

		StringBuilder tmp=new StringBuilder();
		
		String a_line="";
		String table_name="";
		String task_status="";
		
		try {
			task_status=getDBSingleVal(connconf, "select status from " + tab.toLowerCase() + " where id="+id);
		} catch(Exception e) {};
		
		if (task_status.length()==0) return "Task is not there.";
		
		String[] lineArr=lines.split("\n");
		
		int recno=0;
		int fieldno=0;
		final int MAXFIELDCOUNT=300;
		
		String[] aRec=new String[MAXFIELDCOUNT];
		ArrayList<String[]> recs=new ArrayList<String[]>();
		
		ArrayList<String> fieldNames=new ArrayList<String>();
		ArrayList<String> fieldTypes=new ArrayList<String>();
		ArrayList<String> fieldIsPK=new ArrayList<String>();
		
		boolean printTable=false;
		int level=0;

		for (int i=0;i<lineArr.length;i++) {
			a_line=lineArr[i];

			
			if (a_line.indexOf("<start_of_file>")==0) {
				
				if (wp_type.equals("MASK")) table_name=a_line.split("\\|::\\|")[1];
			}
			
			if (a_line.indexOf("<end_of_file>")==0 || printTable) {

				printTable=false;
				
				if (recs.size()>0) {
				
					tmp.append("<table class=\"table table-condensed\">");
					
					tmp.append("<tr class=warning>");
					//for (int l=0;l<level;l++) 	tmp.append("<td>&nbsp;&nbsp;&nbsp;&nbsp;</td>");
					tmp.append("<td colspan="+fieldno+"><big><b>"+table_name+"</b></big></td>");
					tmp.append("</tr>");
					
					tmp.append("<tr class=active>");
					//for (int l=0;l<level;l++) 	tmp.append("<td>&nbsp;&nbsp;&nbsp;&nbsp;</td>");
					for (int r=0;r<fieldNames.size();r++) {
						tmp.append("<td>");
						tmp.append("<b>"+fieldNames.get(r));
						tmp.append("</td>");
					}
					tmp.append("</tr>");
					
					
					ArrayList<String[]> actrecs=new ArrayList<String[]>();
					if (task_status.equals("FINISHED")) {
						StringBuilder sqlbulk=new StringBuilder();
						bindlist.clear();
						for (int r=0;r<recs.size();r++) {
							if (r>0) sqlbulk.append("\nUNION ALL\n");
							sqlbulk.append("select ");
							int a=0;
							for (int f=0;f<fieldno;f++) {
								 
									if (f>0) sqlbulk.append(", ");
									
									if (fieldTypes.get(f).equals("CALCULATED")) 
										sqlbulk.append("'$CALCULATED'");
									else
										sqlbulk.append(fieldNames.get(f));
								
								
							} 
							sqlbulk.append(" from "+table_name +  " where ");
							
							int pk_count=0;
							for (int f=0;f<fieldno;f++) {
								if (fieldIsPK.get(f).equals("YES")) {
									pk_count++;
									if (pk_count>1) sqlbulk.append(" and ");
									sqlbulk.append(fieldNames.get(f)+"=? ");
									String bindval=recs.get(r)[f];
									if (bindval.equals("${EMPTY}")) bindval="";
									
									bindlist.add(new String[]{fieldtype2bindtype(fieldTypes.get(f), bindval),bindval});
								}
							}
							
						} //for (int r=0;r<recs.size();r++)
						//System.out.println(sqlbulk.toString());
						
						actrecs=getDbArrayApp(connconf, env_id, sqlbulk.toString(), Integer.MAX_VALUE, bindlist);
						
					} //if (task_status.equals("FINISHED"))
				
					int maxRec=recs.size();
					if (recs.size()>100) maxRec=100;
					
					for (int r=0;r<maxRec;r++) {
						tmp.append("<tr>");
						//for (int l=0;l<level;l++) 	tmp.append("<td>&nbsp;&nbsp;&nbsp;&nbsp;</td>");
						for (int f=0;f<fieldno;f++) {
							tmp.append("<td>");
							if (recs.get(r)[f].length()<=100)
								tmp.append(recs.get(r)[f]);
							else {
								tmp.append(recs.get(r)[f].substring(0, 99));
								tmp.append("...");
							}
							
							tmp.append("</td>");
						} 
						tmp.append("</tr>");
						
						if (recs.size()==actrecs.size()) {
							tmp.append("<tr>");
							//for (int l=0;l<level;l++) 	tmp.append("<td>&nbsp;&nbsp;&nbsp;&nbsp;</td>");
							for (int f=0;f<fieldno;f++) {
								tmp.append("<td class=success>");
								//if (!fieldIsPK.get(f).equals("YES")) 
									if (actrecs.get(r)[f].length()<=100)
										tmp.append(actrecs.get(r)[f]);
									else {
										tmp.append(actrecs.get(r)[f].substring(0, 99));
										tmp.append("...");
									}
								 
								tmp.append("</td>");
							}
							tmp.append("</tr>");
						}
						
					} //for (int r=0;r<recs.r++)
						
					tmp.append("</table>");
							
										
					
					recs.clear();
					fieldNames.clear();
					fieldTypes.clear();
					fieldIsPK.clear();
					recno=0;
					
				} //if (recs.size()>0)
					
			
			} //if (a_line.indexOf("<end_of_file>")==0)
			
			if (a_line.indexOf(TAG_RECORD_START)==0) {
				
				
				
				if (wp_type.equals("COPY")) {
					table_name=a_line.split("\\|::\\|")[3];
					
					try {level=Integer.parseInt(a_line.split("\\|::\\|")[4]);} catch(Exception e) {level=0;}
					
					
				}
				
				
				recno++;
				fieldno=0;
				
			}
			
			if (a_line.indexOf(TAG_FIELD_START)==0) {
				
				String fArr[]=a_line.split("\\|::\\|");
				
				if (recno==1) {
					String fname=fArr[1];
					String ftype=fArr[2].split(":")[0];
					String f_ispk=fArr[3];
					
					fieldNames.add(fname);
					fieldTypes.add(ftype);
					fieldIsPK.add(f_ispk);
				}
				
				
				String  fval="";

				short line_no=0;
				do {
					i++;
					line_no++;
					if (line_no>1) fval=fval+"\n";
					fval=fval+lineArr[i];
					
				} while(!lineArr[i+1].equals(TAG_FIELD_END));
				
				aRec[fieldno]=fval; 
				fieldno++;				
			} //if (a_line.indexOf(TAG_FIELD_START)==0)
				
			
			if (a_line.indexOf(TAG_RECORD_END)==0) {
				
				recs.add(aRec);
				aRec=new String[MAXFIELDCOUNT];
				
				if (wp_type.equals("COPY")) {

					int n=i;
					do {
						n++;
						
						if (lineArr[n].indexOf(TAG_RECORD_START)==0) {
							String next_table_name=lineArr[n].split("\\|::\\|")[1];
							int next_level=0;
							try {next_level=Integer.parseInt(lineArr[n].split("\\|::\\|")[2]);} catch(Exception e) {next_level=0;}
							
							if (!next_table_name.equals(table_name) || next_level!=level)
								printTable=true;
							
							
							break;
						}
						
						
					} while(lineArr[n+1].indexOf("<end_of_file>")==-1); 
						
						
					
					
					
				}
				
			} //if (a_line.indexOf("</record>")==0)
			
			
			
			
			
			
		} //for
		
		
				
		lines=tmp.toString();
		tmp.setLength(0);
		
		
	} //if (fld.equals("TASK_INFO_ZIPPED"))
	else {
		lines="<textarea rows=19 style=\"width:100%; font-family: monospace; background-color:black; color:white; \">"+lines+"</textarea>";
	}
	


	String html="<center>"+
			"<table border=0 cellspacing=0 cellpadding=0><tr><td><b>"+
			fld+"@"+tab+"["+id+"]"+
			"</b></td></tr></table>"+
			lines+
			"</center>";
	
	lines=null;
	
	return html;

  
  

}




	//*************************************************************
	public String getParamByName(Connection conn, String param_name) {
	//*************************************************************
	String ret1="";
	String sql="select param_value from tdm_parameters where param_name='"+param_name+"'";

	ret1=getDBSingleVal(conn, sql);
	
	return ret1;
	
	}

	
	//*************************************************************
	public void setParamByName(Connection conn, String param_name, String param_value) {
	//*************************************************************
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	String sql="delete from tdm_parameters where param_name=?";

	bindlist.add(new String[]{"STRING",param_name});
	execDBConf(conn, sql, bindlist);

	sql="insert into tdm_parameters (param_name, param_value) values (?,?)";

	bindlist.add(new String[]{"STRING",param_value});
	execDBConf(conn, sql, bindlist);
	
	
	
	}
	
	//*************************************************************
	void setProcessStatus(Connection conn, HttpSession session, String ptype, String pid, String paction) {
		
		String sql="";
		
		if (ptype.equals("manager")) {
			if (paction.equals("start")) {
				startManager(conn);
			}
			
			if (paction.equals("restart")) {
				sql="update tdm_manager set cancel_flag='RES'";
				execDBConf(conn, sql, new ArrayList<String[]>());
			}
			
			if (paction.equals("stop")) {
				sql="update tdm_manager set cancel_flag='YES'";
				//sql="delete from tdm_manager";
				execDBConf(conn, sql, new ArrayList<String[]>());
			}
		}
		
		
		
		

		
		
		if (ptype.equals("master")) {
			if (paction.equals("set_limit")) {
				try {
					int process_count=Integer.parseInt(pid);

					int max_count=0;
					try {
						max_count=Integer.parseInt(nvl(getParamByName(conn, "MAX_PROCESS_COUNT"),"100"));
					} catch(Exception e) {
						max_count=100;
					}
					
					if (process_count>max_count) process_count=max_count;
					if (process_count<0) process_count=0;

					setParamByName(conn, "TARGET_MASTER_COUNT", ""+process_count);
				} catch(Exception e) {	}
			}
			
			if (paction.equals("stop")) {
				sql="update tdm_master set cancel_flag='YES' where id="+pid;
				execDBConf(conn, sql, new ArrayList<String[]>());
			}
		}
		
		
		
		if (ptype.equals("worker")) {
			if (paction.equals("set_limit")) {
				try {
					int process_count=Integer.parseInt(pid);
					
					int max_count=0;
					try {
						max_count=Integer.parseInt(nvl(getParamByName(conn, "MAX_PROCESS_COUNT"),"100"));
					} catch(Exception e) {
						max_count=100;
					}
					
					if (process_count>max_count) process_count=max_count;
					if (process_count<0) process_count=0;

					setParamByName(conn, "TARGET_WORKER_COUNT", ""+process_count);
				} catch(Exception e) {	}
			}
			
			if (paction.equals("stop")) {
				sql="update tdm_worker set cancel_flag='YES' where id="+pid;
				execDBConf(conn, sql, new ArrayList<String[]>());
			}
		}

	}
	
	

	//*************************************************************
	public String encrypt(String input) {
	//*************************************************************
	String ret1=input;
	Cipher ecipher;
    SecretKey key;
	try {
		String theKey = "01234567";
        key = KeyGenerator.getInstance("DES").generateKey();
        key=new SecretKeySpec(theKey.getBytes("UTF-8"), "DES");
        ecipher = Cipher.getInstance("DES");
        ecipher.init(Cipher.ENCRYPT_MODE, key);
        
        byte[] utf8 = input.getBytes("UTF8");
        byte[] enc = ecipher.doFinal(utf8);
        enc = BASE64EncoderStream.encode(enc);

        //convert to hex
        StringBuilder sb = new StringBuilder();
        for(int i=0; i< enc.length ;i++)
            sb.append(Integer.toString((enc[i] & 0xff) + 0x100, 16).substring(1));

        ret1 = sb.toString();
	} catch (Exception e) {
		e.printStackTrace();
	}

	return ret1;
	}


	
	
	//*************************************************************
	public boolean checkLDAPAuthentication(Connection conn, String username, String password) {
	//*************************************************************
	boolean ret1=true;
	
	
	String ldap_properties=nvl(getParamByName(conn, "LDAP_PROPERTIES"),"");
	if (ldap_properties.length()==0) return false;
	
	Hashtable<String, Object> env = new Hashtable<String, Object>();

	String[] lines=ldap_properties.split("\n");
	
	for (int i=0;i<lines.length;i++) {
		String aline=lines[i].trim();
		if (aline.length()>0 && aline.contains("=")) {
			int aloc=aline.indexOf("=");
			String prop_name=aline.substring(0, aloc);
			String prop_val=aline.substring(aloc+1);

			if (prop_name.equals(Context.SECURITY_PRINCIPAL))
				prop_val=prop_val.replace("%UID%", username);
			
			System.out.println(prop_name+"="+prop_val);
			
			
			env.put(prop_name, prop_val);
		} //if
	} //for

	env.put(Context.SECURITY_CREDENTIALS, password);
	
	try {
        DirContext authContext = new InitialDirContext(env);

    } catch (Exception ex) {
    	ex.printStackTrace();
        return false;
    }
	
	
	
	return ret1;
	}
	
	//*************************************************************
	public int checkuser(Connection conn, String username, String password) {
	//*************************************************************
	int ret1=0;
	
	String p_authentication_method=nvl(getParamByName(conn, "AUTHENTICATION_METHOD"),"LOCAL");
	
	if (username.equals("admin")) 
		p_authentication_method="LOCAL";
	else {
		String sql=sql="select authentication_method from tdm_user where valid='Y' and upper(username)=?";
		ArrayList<String[]> bindlist=new ArrayList<String[]>();
		bindlist.add(new String[]{"STRING",username.toUpperCase()});
		ArrayList<String[]>  res=getDbArrayConf(conn, sql, 1, bindlist);
		
		String user_authentication_method="SYSTEM";
		if (res.size()>0) 
			user_authentication_method=res.get(0)[0];
		
		
		
		if (!user_authentication_method.equals("SYSTEM"))  
			p_authentication_method=user_authentication_method;
		
	}
	
	
	System.out.println("p_authentication_method :  " + p_authentication_method);

	if (p_authentication_method.equals("LDAP")) {

		String sql="select username, id from tdm_user where valid='Y' and username=?";
		ArrayList<String[]> bindlist=new ArrayList<String[]>();
		ArrayList<String[]> res=null;
		String dbusername="";
		int dbuserid=0;
	
		try {
			bindlist.add(new String[]{"STRING",username});
			res=getDbArrayConf(conn, sql, 1, bindlist);
			if (res.size()>0) {
				dbusername=res.get(0)[0]; 
				dbuserid=Integer.parseInt(res.get(0)[1]);
				}
		} catch(Exception e) {
			dbusername="";
			dbuserid=0;
			e.printStackTrace();
		}
		
		if (dbusername.length()>0) {
			boolean is_ldap_ok=checkLDAPAuthentication(conn, dbusername,password);
			if (is_ldap_ok) return dbuserid; 
			return 0;
		}
	
		
	}

	
	
	if (p_authentication_method.equals("LOCAL"))
	{
		
		String sql="select upper(username), id from tdm_user where valid='Y' and upper(username)=? and password=?";
		ArrayList<String[]> bindlist=new ArrayList<String[]>();
		ArrayList<String[]> res=null;
		String dbusername="";
		String encpass="";
	
		try {
			encpass=encrypt(password);
			bindlist.add(new String[]{"STRING",username.toUpperCase()});
			bindlist.add(new String[]{"STRING",encpass});
			res=getDbArrayConf(conn, sql, 1, bindlist);
			if (res.size()>0) 
				dbusername=res.get(0)[0];
		} catch(Exception e) {
			dbusername="";
			e.printStackTrace();
		}
	
	
		
		if (dbusername.length()>0 && username.length()>0 && encpass.length()>0 && res.size()==1) {
			if (dbusername.equals(username.toUpperCase())) {
				ret1=Integer.parseInt(res.get(0)[1]);
			}
		}

	} //if (p_authentication_method.equals("LOCAL"))

	
	return ret1;
	
	}
	
	
	//*************************************************************
	public boolean checkrole(HttpSession session, String role_name) {
	//*************************************************************
	boolean ret1=false;
	String rolevar="";
	try {
		rolevar=nvl((String) session.getAttribute("hasrole_"+role_name),"false");;
		if (rolevar.equals("true")) ret1=true;
	} catch(Exception e) {	}
	
	return ret1;
	}
	
	//*************************************************************
	public boolean checkpermissionByName(HttpSession session, String permission_name) {
	//*************************************************************
	boolean ret1=false;
	String permissionvar="";
	try {
		permissionvar=nvl((String) session.getAttribute("haspermission_name_"+permission_name),"false");
		if (permissionvar.equals("true")) ret1=true;
	} catch(Exception e) {	}
	
	return ret1;
	}
	
	//*************************************************************
	public boolean checkpermissionById(HttpSession session, String permission_id) {
	//*************************************************************
	boolean ret1=false;
	String permissionvar="";
	
	try {
		permissionvar=nvl((String) session.getAttribute("haspermission_id_"+permission_id),"false");
		if (permissionvar.equals("true")) ret1=true;
	} catch(Exception e) {	}
	
	return ret1;
	}

	//*************************************************************
	public void roleRestrict(HttpSession session,  HttpServletResponse response, String role_names) {
	//*************************************************************
	
	// skip check role for admin
	if (nvl((String) session.getAttribute("username"),"-").equals("admin")) return;
	
	boolean hasany=false;
	
	String[] rolesArr=role_names.split(",");
	for (int i=0;i<rolesArr.length;i++) {
		if (checkrole(session,rolesArr[i])) {
			hasany=true;
			break;
		}
	}
	

	if (!hasany) 
		try {
			System.out.println("There is no authorization for this page to user : "+((String) session.getAttribute("username")  ));
			response.sendRedirect("default2.jsp");
		} catch(Exception e) {}
	
	}



	
	//************************************************
	public void startManager(Connection conn) {
	

		String HomePath=getParamByName(conn, "TDM_PROCESS_HOME");
		String username=getParamByName(conn, "CONFIG_USERNAME");
		String password=decode(getParamByName(conn, "CONFIG_PASSWORD"));

		String[] envparams=new String[]{
					"CONFIG_USERNAME="+username,
					"CONFIG_PASSWORD="+password
					};
		
		int process_count=1;
		String run_classname="managerDriver";
		System.out.println("new "+run_classname+ " is being started : "+process_count);
		String fname;
		String system_type="";
		String run_cmd="";

		String OS = System.getProperty("os.name").toLowerCase();
		if (OS.indexOf("win") >= 0) {
			run_cmd="cmd /c start XXX";
			system_type=".bat";
		}
			
		if (OS.indexOf("nix") >= 0 || OS.indexOf("nux") >= 0 || OS.indexOf("aix") > 0 || OS.indexOf("sunos") >= 0) {
			//run_cmd="./XXX "+username+" " + password+ " 1 &";
			run_cmd="cd "+HomePath+";sh "+HomePath+"/XXX  1 &";
			system_type=".sh";
		}
			
		run_cmd=nvl(getParamByName(conn, "PROCESS_START_COMMAND_TEMPLATE"),"/data/oracle/MayaTDM/XXX 1 &");

		
		System.out.println("system type : "+system_type);
		File dir = new File(HomePath);
		File[] filesList = dir.listFiles();
		for (File file : filesList) {
		    if (file.isFile()) {
		       fname=file.getName();
		       if (fname.toLowerCase().contains(system_type)) {
		    	   try {
					Scanner scanner = new Scanner(file);
					while (scanner.hasNextLine()) {
						   final String lineFromFile = scanner.nextLine();
						   if(lineFromFile.contains(run_classname) && lineFromFile.contains("java")) { 
						       // a match!
						       System.out.println("Running new process " +run_classname+ " " +process_count + " times..");
						       for (int i=0;i<process_count;i++) {						    	   
							       try {
							    	   
							       	   run_cmd=run_cmd.replaceAll("XXX", fname);
							       	   System.out.println("Executiong : " +run_cmd);
							    	   Runtime.getRuntime().exec(run_cmd,envparams, new File(HomePath));   
							       } catch(Exception ex) {
							    	   System.out.println("Exception@ Runtime.getRuntime().exec : "+ex.getMessage());
							    	   ex.printStackTrace();
							       }
						    	   
						       }
						       return;
						   }
					} 
					scanner.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
		       }
		        
		    }
		}
		
		
	}

	
	
	//**********************************************
	void createDir(String dir) {
		File theDir = new File(dir);
		if (!theDir.exists()) {
		    boolean result = false;

		    try{
		        theDir.mkdir();
		        result = true;
		     } catch(SecurityException se){
		        //handle it
		     }        
		}
	}
	
	
	// *****************************************
	private void text2file(String text, String filepath) {
			BufferedWriter out = null;
			
			File f=new File(filepath);
			if (f.exists()) f.delete();
		
		try {
			out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(filepath),"UTF-8"));
			out.append(text);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {out.close();} catch(Exception e) {}
		}
	}
	
	
	//*******************************************************
	public String encode(String a) {
		
		byte[]   bytesEncoded = Base64.encodeBase64(a.getBytes());

		return new String(bytesEncoded);
	}

	//*******************************************************
	public String decode(String a) {
		byte[] valueDecoded= Base64.decodeBase64(a);
		return new String(valueDecoded);
		
	}
	
	//************************************************
		ArrayList<String> getJbaseCommandRes(JConnection JBASEconn, String cmd) {
			ArrayList<String> ret1=new ArrayList<String>();
			
			if (JBASEconn==null)  return ret1;
			System.out.println(" ******************************** " );
			System.out.println(cmd);
			System.out.println(" ******************************** " );
			
			try {
				JStatement stmt=JBASEconn.createStatement();
				JResultSet res=stmt.execute(cmd);
				
				while(res.next()) {
					JDynArray row1=res.getRow();
					for (int i=1;i<=row1.getNumberOfAttributes();i++) {
						for (int j=1;j<=row1.getNumberOfValues(i);j++) {
							for (int t=1;t<=row1.getNumberOfSubValues(i,j);t++) {
								String a_val=row1.get(i, j, t);
								ret1.add(a_val);
							}  // for t
						} // for j
					} // for i
				} // while 
				
			} 
			catch (JRemoteException e) {
				e.printStackTrace();

			}
			return ret1;
		}

	
	//*************************************************************
	ArrayList<String> getJbaseFields(String table_name) {
		ArrayList<String> ret1=new ArrayList<String>();
		
		JConnection JBASEconn=null;	
		String sql="select db_connstr, db_username, db_password from tdm_envs where db_driver='com.jbase.jdbc.driver.JBaseJDBCDriver'";
		
		ArrayList<String[]> jbaseparams=getDbArrayConf(getconn(), sql, 1, new ArrayList<String[]>());
		
		if (jbaseparams.size()==0) return ret1;
		
		String db_connstr=jbaseparams.get(0)[0];
		String db_username=jbaseparams.get(0)[1];
		String db_password=jbaseparams.get(0)[2];
		
		String hostport="";
		
		try { hostport=db_connstr.split("\\@")[1].split("\\?")[0];} catch(Exception e) {hostport=db_connstr.split("\\@")[1];}
		String params="";
		try { params=db_connstr.split("\\@")[1].split("\\?")[1];} catch(Exception e) {params="";}
		String host="";
		try {host=hostport.split(":")[0];} catch(Exception e) {host="";}
		String port="";
		try {port=hostport.split(":")[1];} catch(Exception e) {port="";}
		
		
		
		DefaultJConnectionFactory dcf=new DefaultJConnectionFactory();
		
		dcf.setHost(host);
		dcf.setPort(Integer.parseInt(port));
		String cmd_for_pks_ext=nvl(getParamByName(getconn(), "JBASE_CMD_PKS")," WITH (F1 EQ \"D\" OR F1 EQ \"I\") AND F4 NE \"@ID\" AND F2 EQ \"0\" ONLY");
		String cmd_for_fields_ext=nvl(getParamByName(getconn(), "JBASE_CMD_FIELDS")," WITH (F1 EQ \"D\" OR F1 EQ \"I\") AND F2 NE \"0\" ONLY");

		try {
			JBASEconn=dcf.getConnection(db_username,db_password);
			String cmd_for_pks="LIST "+table_name + "]D "+cmd_for_pks_ext;

			ret1=getJbaseCommandRes(JBASEconn,cmd_for_pks);
			
			if (ret1.size()==0) ret1.add("RECID");
			
			for (int i=0;i<ret1.size();i++) 
					ret1.set(i,"*"+ret1.get(i));
			
			
			
			String cmd_for_fields="LIST "+table_name + "]D "+cmd_for_fields_ext;

			ArrayList<String> tmp=getJbaseCommandRes(JBASEconn,cmd_for_fields);
			
			for (int i=0;i<tmp.size();i++)  
				if (ret1.indexOf("*"+tmp.get(i))==-1)
				ret1.add(tmp.get(i));
			
			//replace . with _
			for (int i=0;i<ret1.size();i++) {
				if (ret1.get(i).indexOf(".")>-1)
					ret1.set(i,ret1.get(i).replaceAll("\\.", "_"));
			}
			
			
			return ret1;
			
		} catch (JRemoteException e) {
			e.printStackTrace();
		} finally {
			try {
				JBASEconn.close();
				System.out.println("Connection is closed");
			} catch(Exception e) {
				e.printStackTrace();
			} 
		}
		
		
		
		return ret1;
	}


	//*************************************************************
	public ArrayList<String[]> getFieldListFromApp(Connection conn, String env_db_rowid, String owner, String table, String db_type) {
	//*************************************************************

		long s=System.currentTimeMillis();
		ArrayList<String[]> ret1=new ArrayList<String[]>();
		
		DatabaseMetaData md=null;
		
		String f_name="";
		String f_type="";
		String f_size="";
		String f_is_pk="";
		
		
		ArrayList<String> pklist=new ArrayList<String>();

		//if db have row id add it as a first column
		if (env_db_rowid.trim().length()>0) {
			String[] arr=new String[]{env_db_rowid, env_db_rowid, "0","YES"};
			ret1.add(arr);
		} 
		else
		{
			try {
			DatabaseMetaData meta = conn.getMetaData();
			
			ResultSet rspk = null;
			
			try {
				rspk = meta.getPrimaryKeys(owner, null, table);
				
				while (rspk!=null && rspk.next()) {
				      String columnName = rspk.getString(4); //"COLUMN_NAME"
				      pklist.add(columnName);
				    }
			} catch(Exception e) {} finally {try{rspk.close();} catch(Exception e){}}
			
			
		
			if (pklist.size()==0) {
				try {
					rspk = meta.getPrimaryKeys(null, owner, table);
					while (rspk!=null && rspk.next()) {
					      String columnName = rspk.getString(4); //"COLUMN_NAME"
					      pklist.add(columnName);
					    }
				} catch(Exception e) {} finally {try{rspk.close();} catch(Exception e){}}
			}
			
			//DBs like SQL Server
			if (pklist.size()==0) {
				String db_name=getDbName(conn);

				
				if (db_name.length()>0) {
					rspk = meta.getPrimaryKeys(db_name, owner, table);
					while (rspk!=null && rspk.next()) {
					      String columnName = rspk.getString(4); //"COLUMN_NAME"
					      pklist.add(columnName);
					    }
					rspk.close();
				} //if (db_name.length()>0)
				
			}
			
			} catch(Exception e) {
				e.printStackTrace();
			}
			
		} //if (env_db_rowid.length()>0) 
		

		String[] type_filter=new String[] {"TABLE"};
		
		if (conn!=null) {
			
			
			if (db_type.equals("JBASE")) {
				ArrayList<String> jbaseFields=getJbaseFields(table);
				for (int i=0;i<jbaseFields.size();i++) {
					
					String field_name=jbaseFields.get(i);
					String is_pk="NO";
					
					if (field_name.indexOf("*")==0) {
						field_name=field_name.substring(1);
						is_pk="YES";
					}

					String[] arr=new String[]{field_name, "VARCHAR", "1000", is_pk};
					ret1.add(arr);
				}
			}
			else {
				
				ResultSet rs = null;

				try {

					md = conn.getMetaData();
					//JBASE 
					if (owner.length()>0 || owner.equals("null"))
						rs = md.getColumns(null, null, table, null);
					else 
						rs = md.getColumns(conn.getCatalog(), owner, table, null);
					
					while (rs.next()) {
						boolean is_added=false;
						f_name=rs.getString("COLUMN_NAME"); //4
						f_type=rs.getString("TYPE_NAME");
						f_size=rs.getString("COLUMN_SIZE");
						f_is_pk="NO";
						
						for (int p=0;p<pklist.size();p++)
							if (f_name.equals(pklist.get(p))) f_is_pk="YES";
						
						//for some tables (partitioned eg.) column names may be duplicated
						for (int f=0;f<ret1.size();f++)
							if (f_name.equals(ret1.get(f)[0])) is_added=true;
							
						String[] arr=new String[]{f_name, f_type, f_size, f_is_pk};
						if (!is_added) ret1.add(arr);
						}
				
				} catch (Exception e) {
					e.printStackTrace();
				} finally {
					try {md = null;} catch (Exception e) {}
					try {rs.close();rs = null;} catch (Exception e) {}
				}
				
			} // else if (db_type.equals("JBASE"))
			
		
		}
		
		
		return ret1;

	}

//************************************************************************
public void log_trial(Connection conn, String table_name, int id, String user, String action) {
	
	String schema_name="";
	//try {schema_name=conn.getSchema(); } catch(Exception e) {schema_name="";}
	ArrayList<String[]> fields=getFieldListFromApp(conn, "", schema_name , table_name,"MYSQL");

	String sql="select ";
	for (int i=0;i<fields.size();i++)
	{
		if (i>0) sql=sql+",";
		sql=sql+fields.get(i)[0];
	}
	sql=sql+" from "+table_name + " where id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",""+id});
	ArrayList<String[]> currRec=getDbArrayConf(conn, sql, 1, bindlist, 10);
	StringBuilder sb=new StringBuilder();

	
	for (int i=0;i<currRec.size();i++) {
		sb.append("<REC>\n");
		String[] arec=currRec.get(i);
		for (int f=0;f<arec.length;f++)
			sb.append("<FIELD name=\""+fields.get(f)[0]+"\">\n"+arec[f]+"\n</FIELD>\n");
		sb.append("</REC>");
	}
	
	
	sql="insert into tdm_audit_logs (table_name, table_id, log_action, log_user, old_record) values (?,?,?,?,?) ";
	bindlist.clear();
	bindlist.add(new String[]{"STRING",""+table_name});
	bindlist.add(new String[]{"INTEGER",""+id});
	bindlist.add(new String[]{"STRING",""+action});
	bindlist.add(new String[]{"STRING",""+user});
	bindlist.add(new String[]{"STRING",""+sb.toString()});
	
	execDBConf(conn, sql, bindlist);
	
	
}



//************************************************
int getProgressRate(Connection conn, String wpid) {
	int progress=0;
	
	String sql="select round((100*sum(success_count)/sum(export_count))) a from tdm_work_package " +
			" where work_plan_id=? and export_count>0";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",wpid});		
	
	try { progress=Integer.parseInt(getDbArrayConf(conn, sql, 1, bindlist).get(0)[0]);} catch(Exception e) {progress=0;}
	
	if (progress<0) progress=0;
	if (progress>100) progress=100;
	
	return progress;
}



//******************************************
public String gethostinfo() {
	String ret1 = "";
	InetAddress addr;
	try {
		addr = InetAddress.getLocalHost();
		ret1 = addr.getHostName()+" ["+addr.getHostAddress()+"]";
	} catch (Exception e) {
		ret1 = "unknown";
	}
	
	return ret1;
}

//********************************************************************
String makeText(String id, String curr_val,String additional, int width) {
	return makeText(id, curr_val, additional, width, "EDITABLE");
}

//********************************************************************
String makeText(String id, String curr_val,String additional, int width, String field_mode) {
	StringBuilder sb=new StringBuilder();
	String width_str=""+Math.abs(width)+"px";
	if (width==0) width_str="100%";
	if (width<0) width_str=""+Math.abs(width)+"%";
	
	String disabled=""; 
	if (!field_mode.equals("EDITABLE") & !field_mode.equals("SEARCH")) disabled="disabled";
	
	sb.append("<div class=\"input-group\" style=\"width:"+width_str+";\">");
	sb.append("<input type=\"text\" "+disabled+" id=\""+id+"\" class=\"form-control\" value=\""+codehtml(curr_val)+"\" "+additional+" >");
	sb.append("</div>");
	
	return sb.toString();
}
//********************************************************************
String makePassword(String id, String curr_val,String additional, int width) {
	return makePassword(id, curr_val, additional, width, "EDITABLE");
}
//********************************************************************
String makePassword(String id, String curr_val,String additional, int width, String field_mode) {
	StringBuilder sb=new StringBuilder();
	String width_str=""+Math.abs(width)+"px";
	if (width==0) width_str="100%";
	if (width<0) width_str=""+Math.abs(width)+"%";
	
	String disabled=""; 
	if (!field_mode.equals("EDITABLE") & !field_mode.equals("SEARCH")) disabled="disabled";
	
	sb.append("<div class=\"input-group\" style=\"width:"+width_str+";\">");
	sb.append("<input type=\"password\" "+disabled+" id=\""+id+"\" class=\"form-control\" value=\""+curr_val+"\" "+additional+" >");
	sb.append("</div>");
	
	return sb.toString();
}

//********************************************************************

String makeDateCondition(String FILTER_DATETIME, ArrayList<String[]> datecondbindlist) {
	StringBuilder sb=new StringBuilder();
	
	String from_date="x";
	String to_date="x";
	String formula="x";
	
	try{from_date=FILTER_DATETIME.split("with")[0].split("to")[0];} catch(Exception e) {}
	try{to_date=FILTER_DATETIME.split("with")[0].split("to")[1];} catch(Exception e) {}
	try{formula=FILTER_DATETIME.split("with")[1];} catch(Exception e) {}
	
	
	String from_date_formatted="";
	String to_date_formatted="";
	
	String condition_type="between";
	
	if(!from_date.equals("x") && !to_date.equals("x") && formula.equals("x")) {
		condition_type="between";
		from_date_formatted=from_date;
		to_date_formatted=to_date;
	}
	
	if(from_date.equals("x") && !to_date.equals("x")) {
		condition_type="to";
		to_date_formatted=to_date;
	}
	
	if(!from_date.equals("x") && to_date.equals("x")) {
		condition_type="from";
		from_date_formatted=from_date;
	}
	
	if(from_date.equals("x") && to_date.equals("x")) {
		condition_type="formula";
	}
	
	if (condition_type.equals("between") && from_date.equals(to_date)) {
		condition_type="equals";
		from_date_formatted=from_date;
		to_date_formatted=to_date;
	}
	
	if (condition_type.equals("between")) {
		sb.append( " between STR_TO_DATE(?,'"+mysql_format+"') and STR_TO_DATE(?,'"+mysql_format+"') ");
		datecondbindlist.add(new String[]{"STRING",""+from_date_formatted});
		datecondbindlist.add(new String[]{"STRING",""+to_date_formatted});
	}
	
	if (condition_type.equals("to")) {
		sb.append( " <= STR_TO_DATE(?,'"+mysql_format+"') ");
		datecondbindlist.add(new String[]{"STRING",""+to_date_formatted});
	}
	
	if (condition_type.equals("from")) {
		sb.append( " >= STR_TO_DATE(?,'"+mysql_format+"') ");
		datecondbindlist.add(new String[]{"STRING",""+from_date_formatted});
	}
	
	if (condition_type.equals("equals")) {
		sb.append( " = STR_TO_DATE(?,'"+mysql_format+"') ");
		datecondbindlist.add(new String[]{"STRING",""+from_date_formatted});
	}
	
	if (condition_type.equals("formula")) {


		String formula_type="";
		int formula_count=0;
		
		try {formula_type=formula.split(":")[0]; } catch(Exception e) {e.printStackTrace();} 
		try {formula_count=Integer.parseInt(formula.split(":")[1]); } catch(Exception e) {e.printStackTrace();}
		
		if (formula_type.indexOf("THIS_")==0) {
			String date_function="";
			if (formula_type.equals("THIS_YEAR")) 
				sb.append( " >=DATE_SUB(CURDATE(),INTERVAL DAYOFYEAR(CURDATE())-1 DAY) ");
			if (formula_type.equals("THIS_MONTH")) 
				sb.append( " >=DATE_SUB(CURDATE(),INTERVAL DAYOFMONTH(CURDATE())-1 DAY) ");
			if (formula_type.equals("THIS_WEEK")) 
				sb.append( " >=DATE_SUB(CURDATE(),INTERVAL WEEKDAY(CURDATE()) DAY) ");
			if (formula_type.equals("THIS_DAY")) 
				sb.append( " >=CURDATE() ");
		} else {
			sb.append( " >=DATE_SUB(now(), INTERVAL ? "+formula_type+") ");
			datecondbindlist.add(new String[]{"INTEGER",""+formula_count});
		}
	}
	
	return sb.toString();
}



//********************************************************************

String makeNumberCondition(String FILTER_NUMBER, ArrayList<String[]> datecondbindlist) {
	StringBuilder sb=new StringBuilder();
	
	String from_number="x";
	String to_number="x";
	
	
	
	try{from_number=FILTER_NUMBER.split("to")[0];} catch(Exception e) {}
	try{to_number=FILTER_NUMBER.split("to")[1];} catch(Exception e) {}
	
	
	String condition_type="none";
	
	if(!from_number.equals("x") && !to_number.equals("x")) {
		if (from_number.equals(to_number)) condition_type="equals";
		else  condition_type="between";
	}
	
	if(from_number.equals("x") && !to_number.equals("x")) {
		condition_type="to";
	}
	
	if(!from_number.equals("x") && to_number.equals("x")) {
		condition_type="from";
	}
	
	if(from_number.equals("x") && to_number.equals("x")) {
		condition_type="none";
	}
	
	
	
	if (condition_type.equals("between")) {
		sb.append( " between ? and ? ");
		datecondbindlist.add(new String[]{"DOUBLE",""+from_number});
		datecondbindlist.add(new String[]{"DOUBLE",""+to_number});
	}
	
	if (condition_type.equals("equals")) {
		sb.append( " = ? ");
		datecondbindlist.add(new String[]{"DOUBLE",""+from_number});
	}
	
	
	if (condition_type.equals("to")) {
		sb.append( " <= ? ");
		datecondbindlist.add(new String[]{"DOUBLE",""+to_number});
	}
	
	if (condition_type.equals("from")) {
		sb.append( " >= ? ");
		datecondbindlist.add(new String[]{"DOUBLE",""+from_number});
	}
	
	
	return sb.toString();
}

//********************************************************************
String makeDateFormula(String id, String curr_date_formula) {
	StringBuilder sb=new StringBuilder();
	
	ArrayList<String[]> arrF=new ArrayList<String[]>();
	arrF.add(new String[]{"THIS_DAY","Today"});
	arrF.add(new String[]{"THIS_WEEK","This Week"});
	arrF.add(new String[]{"THIS_MONTH","This Month"});
	arrF.add(new String[]{"THIS_YEAR","This Year"});
	arrF.add(new String[]{"DAY","Day(s) old"});
	arrF.add(new String[]{"WEEK","Week(s) old"});
	arrF.add(new String[]{"MONTH","Month(s) old"});
	arrF.add(new String[]{"YEAR","Year(s) old"});
	arrF.add(new String[]{"HOUR","Hour(s) old"});
	arrF.add(new String[]{"MINUTE","Minute(s) old"});
	
	String formula_type="";
	int formula_count=1;
	
	try{formula_type=curr_date_formula.split(":")[0];} catch(Exception e) {}
	try{formula_count=Integer.parseInt(curr_date_formula.split(":")[1]);} catch(Exception e) {}
	
	sb.append("<input type=hidden id=\"formula_"+id+"\" value=\""+curr_date_formula+"\">");
	
	sb.append("<div class=\"row\">");
	sb.append("<div class=\"col-md-12\">");
	sb.append("<table>");
	sb.append("<tr>");
	sb.append("<td>");
	sb.append(makeText("formula_period_count_"+id, ""+formula_count, " onchange=\"setDateFormulaPeriodCountField('"+id+"');\" ", 80));
	sb.append("</td>");
	sb.append("<td>");
	sb.append(makeComboArr(arrF, "", "id=\"formula_type_"+id+"\"   onchange=\"setDateFormulaPeriodCountField('"+id+"');\" ", formula_type, 150));
	sb.append("</td>");
	sb.append("</tr>");
	sb.append("</table>");
	sb.append("</div>");
	sb.append("</div>");
	return sb.toString();
}
//********************************************************************
String makeDate(String table_id, String id, String curr_val, String additional) {
	
	return makeDate(table_id, id, curr_val, additional, "EDITABLE");
}
//********************************************************************
String makeDate(String table_id, String id, String curr_val, String additional, String field_mode) {
	StringBuilder sb=new StringBuilder();
	
	if (field_mode.equals("SEARCH")) {
		
		String curr_val_start="";
		String curr_val_end="";
		String curr_val_formula="";
		
		String[] arr=curr_val.split("with");
		try{curr_val_formula=arr[1];} catch(Exception e) {curr_val_formula="";}
		
		
		
		try{curr_val_start=arr[0].split("to")[0];} catch(Exception e) {curr_val_start="";}
		try{curr_val_end=arr[1].split("to")[1];} catch(Exception e) {curr_val_end=curr_val_start;}
		
		if (curr_val_start.equals("x")) curr_val_start="";
		if (curr_val_end.equals("x")) curr_val_end="";
		if (nvl(curr_val_formula,"x").equals("x")) curr_val_formula="";

		String start_checked="";
		String end_checked="";
		String formula_checked="";
		String formula_style="visibility:hidden; ";
		
		if (curr_val_start.length()>0) start_checked="checked";
		if (curr_val_end.length()>0) end_checked="checked";
		if (curr_val_formula.length()>0) {
			formula_checked="checked";
			formula_style="";
		}
		
		
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" style=\"white-space: nowrap;\" align=right> <font color=blue><small>From :</small></font> ");
		sb.append("<input "+start_checked+" type=checkbox id=\"ch_from_of_"+id+"\" onclick=\"setDateTimeVisibility(this,'search_start','"+id+"');\">");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sb.append(makeDate("0","search_start_"+id, curr_val_start, additional, "SEARCH_START"));
		sb.append("</div>");
		sb.append("</div>");
				
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" style=\"white-space: nowrap;\" align=right> <font color=blue><small>To :</small></font> ");
		sb.append("<input "+end_checked+" type=checkbox id=\"ch_to_of_"+id+"\" onclick=\"setDateTimeVisibility(this,'search_end','"+id+"');\">");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\" >");
		sb.append(makeDate("0","search_end_"+id, curr_val_end, additional, "SEARCH_END"));
		sb.append("</div>");
		sb.append("</div>");
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" style=\"white-space: nowrap;\" align=right> <font color=blue><small>Formula :</small></font> ");
		sb.append("<input "+formula_checked+" type=checkbox id=\"ch_formula_of_"+id+"\" onclick=\"setDateTimeVisibility(this,'formula','"+id+"');\">");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sb.append("<div id=\"NOFADE_datepicker_formula_"+id+"\" style=\""+formula_style+"\">");
		sb.append(makeDateFormula(id, curr_val_formula));
		sb.append("</div>");
		sb.append("</div>");
		sb.append("</div>");
				
		
	} else {
		String style="";
		if ((field_mode.equals("SEARCH_START") || field_mode.equals("SEARCH_END")) && curr_val.length()==0) {
			style="visibility:hidden;";
		}


		
		sb.append("<div id=\"NOFADE_datepicker_"+id+"\" style=\""+style+"\">");
		sb.append(makeDateContent(table_id, id, curr_val, additional, field_mode));
		sb.append("</div>");
	}
	
	
	return sb.toString(); 
}


//********************************************************************
String makeNumber(String table_id, String id, String curr_val, String onchange_script, String field_mode, 
		String fixed_length, 
		String decimal_length,
		String grouping_char,
		String decimal_char,
		String currency_symbol,
		String min_val,
		String max_val
		) {
	
	StringBuilder sb=new StringBuilder();
	
	
	if (field_mode.equals("SEARCH")) {
		
		String curr_val_start="";
		String curr_val_end="";
		
		try{curr_val_start=curr_val.split("to")[0];} catch(Exception e) {curr_val_start="";}
		try{curr_val_end=curr_val.split("to")[1];} catch(Exception e) {curr_val_end=curr_val_start;}
		
		if (curr_val_start.equals("x")) curr_val_start="";
		if (curr_val_end.equals("x")) curr_val_end="";

		String start_checked="";
		String end_checked="";
		
		if (curr_val_start.length()>0) start_checked="checked";
		if (curr_val_end.length()>0) end_checked="checked";
		
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-12\">");
		
		
		sb.append("<table border=0 cellspacing=0 cellpadding=0>");
		sb.append("<tr>");
		
		sb.append("<td width=80px; align=right><font color=blue>From :</font></td>");
		sb.append("<td><input "+start_checked+" type=checkbox id=\"ch_from_of_"+id+"\" onclick=\"setNumberVisibility(this,'search_start','"+id+"');\"> :</td>");
		sb.append("<td>");
		sb.append(makeNumber("0","search_start_"+id, curr_val_start, "", "SEARCH_START", 
				fixed_length, 
				decimal_length,
				grouping_char,
				decimal_char,
				currency_symbol,
				min_val,
				max_val));
		sb.append("</td>");
		
		sb.append("<td width=80px; align=right><font color=blue>To :</font></td>");
		sb.append("<td><input "+end_checked+" type=checkbox id=\"ch_to_of_"+id+"\" onclick=\"setNumberVisibility(this,'search_end','"+id+"');\"> : </td>");
		sb.append("<td>");
		sb.append(makeNumber("0","search_end_"+id, curr_val_end, "", "SEARCH_END",
				fixed_length, 
				decimal_length,
				grouping_char,
				decimal_char,
				currency_symbol,
				min_val,
				max_val));
		sb.append("</td>");
		sb.append("</tr>");
		sb.append("</table>");
		
		
		
		
		
		sb.append("</div>");
		sb.append("</div>");

		
		
	} else {
		String style="";
		if ((field_mode.equals("SEARCH_START") || field_mode.equals("SEARCH_END")) && curr_val.length()==0) {
			style="visibility:hidden;";
		}


		

		sb.append("<div id=\"NOFADE_numberinput_"+id+"\" style=\""+style+"\">");
		sb.append(makeNumberContent(table_id, id, curr_val, field_mode, onchange_script, 
				fixed_length, 
				decimal_length,
				grouping_char,
				decimal_char,
				currency_symbol,
				min_val,
				max_val));
		sb.append("</div>");
	}
	
	
	return sb.toString(); 
}



//********************************************************************
String makeDateContent(String table_id, String id, String curr_val, String additional, String field_mode) {
	StringBuilder sb=new StringBuilder();
	Calendar cal=Calendar.getInstance();
	//dd.mm.yyyy or dd.mm.yyyy hh24:mi:ss
	int day=cal.get(Calendar.DAY_OF_MONTH);
	int month=cal.get(Calendar.MONTH)+1;
	int year= cal.get(Calendar.YEAR);
	int hour=cal.get(Calendar.HOUR_OF_DAY);
	int minute=cal.get(Calendar.MINUTE);
	int second=cal.get(Calendar.SECOND);
	String size_1=" size=1 ";
	
	
	
	
	
	String date_part=curr_val;
	String hour_part="";
	
	//check if 
	if (curr_val.contains(" ")) {
		date_part=curr_val.split(" ")[0];
		hour_part=curr_val.split(" ")[1];
		
		
	}
	
	if (hour_part.length()>0) {
		String[] arr=hour_part.split(":");
		try{hour=Integer.parseInt(arr[0]);} catch(Exception e) {}
		try{minute=Integer.parseInt(arr[1]);} catch(Exception e) {}
		try{second=Integer.parseInt(arr[2]);} catch(Exception e) {}
		
	}
	
	
	String[] arr=date_part.split("\\.");
	try{day=Integer.parseInt(arr[0]);} catch(Exception e) {}
	try{month=Integer.parseInt(arr[1]);} catch(Exception e) {}
	try{year=Integer.parseInt(arr[2]);} catch(Exception e) {}
	
	if (year<1900) year=1900;
	if (year>2100) year=2100;
	
	if (month<1) month=1;
	if (month>12) month=12;
	
	if (day<1) day=1;
	int max_day=30;
	if (month==1 || month==3 || month==5 || month==7 || month==8 || month==10 || month==12) max_day=31;
	if (month==2) {
		max_day=28;
		if (year % 4==0) max_day=29;
	}

	if (day>max_day) day=max_day;
	
	
	Locale locale = Locale.getDefault();
	
	String[] monthlist=new String[]{"January","February","March","April","May","June","July","August","September","October","November","December"};
	
	ArrayList<String[]> arrDay=new ArrayList<String[]>();
	ArrayList<String[]> arrMonth=new ArrayList<String[]>();
	ArrayList<String[]> arrYear=new ArrayList<String[]>();
	
	
	
	for (int i=1;i<=max_day;i++) arrDay.add(new String[]{""+i,""+i});
	for (int i=1;i<=12;i++) arrMonth.add(new String[]{""+i,""+i+"."+monthlist[i-1]});
	int curr_year= cal.get(Calendar.YEAR);
	for (int i=curr_year-50;i<=curr_year+20;i++) arrYear.add(new String[]{""+i,""+i});
	
	String script=" onchange=\"changeDatePicker('"+table_id+"',this,'"+id+"','"+field_mode+"','"+additional+"');\"  ";
	
	String disabled="";
	if (!field_mode.equals("EDITABLE") && field_mode.indexOf("SEARCH")==-1)  disabled="disabled ";
	
	String valid_curr_val=""+day+"."+month+"."+year;
	if (hour_part.length()>0) 
		valid_curr_val=valid_curr_val+" "+hour+":"+minute+":"+second;
	sb.append("<input type=hidden id=\""+id+"\" value=\""+valid_curr_val+"\" "+additional+" >");
	
	sb.append("<table border=0 cellspacing=0 cellpadding=0>");
	sb.append("<tr>"); 
	 
	//sb.append("<td><span class=\"glyphicon glyphicon-calendar\"></span></td>");
	sb.append("<td>"+makeComboArr(arrDay, "", disabled + script+size_1+"  id=datepicker_day_of_"+id, ""+day, 70)+"</td>");
	sb.append("<td>"+makeComboArr(arrMonth, "", disabled + script+size_1+" id=datepicker_month_of_"+id, ""+month, 100)+"</td>");
	sb.append("<td>"+makeComboArr(arrYear, "", disabled + script+size_1+" id=datepicker_year_of_"+id, ""+year, 85)+"</td>");

	if (hour_part.length()>0) {
		ArrayList<String[]> arrHour=new ArrayList<String[]>();
		ArrayList<String[]> arrMinute=new ArrayList<String[]>();
		ArrayList<String[]> arrSecond=new ArrayList<String[]>();
		
		for (int i=0;i<24;i++) arrHour.add(new String[]{""+i,""+i});
		for (int i=0;i<60;i++) {arrMinute.add(new String[]{""+i,""+i}); arrSecond.add(new String[]{""+i,""+i});}
		
		sb.append("<td><span class=\"glyphicon glyphicon-dashboard\"></span></td>");
		sb.append("<td>"+makeComboArr(arrHour, "", disabled + script+size_1+" id=datepicker_hour_of_"+id, ""+hour, 70)+"</td>");
		sb.append("<td><big><big>:</big></big><td>");
		sb.append("<td>"+makeComboArr(arrMinute, "", disabled + script+size_1+" id=datepicker_minute_of_"+id, ""+minute, 70)+"</td>");
		sb.append("<td><big><big>:</big></big><td>");
		sb.append("<td>"+makeComboArr(arrSecond, "", disabled + script+size_1+" id=datepicker_second_of_"+id, ""+second, 70)+"</td>");
	}
	
	sb.append("</tr>");
	sb.append("</table>");
	
	
	
	return sb.toString();
}


//********************************************************************
String groupNumber(String numberin, String grouping_char) {
	String ret1="";
	String numerics="0123456789";
	int p=0;
	for (int i=numberin.length()-1;i>=0;i--) {
		
		char chr=numberin.charAt(i);
		if (numerics.indexOf(""+chr)==-1) continue;
		p++;
		ret1=chr+ret1;
		if ((p>1) && (p % 3==0) && (i!=0)) ret1=grouping_char+ret1;
	}
    if (ret1.length()==0) ret1="0";
	return ret1;
}
//********************************************************************
String makeNumberContent(String table_id, String id, String curr_val, String field_mode, String onchange_script,
		String fixed_length, 
		String decimal_length,
		String grouping_char,
		String decimal_char,
		String currency_symbol,
		String min_val,
		String max_val) {
	StringBuilder sb=new StringBuilder();
	
	
	String js_script_code="";
	if (onchange_script.length()>0) js_script_code=" onchange=\""+onchange_script+"\" ";
	

	
	String curr_val_fixed="0";
	String curr_val_decimal="0";
	try {curr_val_fixed=curr_val.split("\\.")[0];} catch(Exception e) {}
	try {curr_val_decimal=curr_val.split("\\.")[1];} catch(Exception e) {}
		
	if (curr_val_decimal.length()>Integer.parseInt(decimal_length)) 
		try{curr_val_decimal=curr_val_decimal.substring(0,Integer.parseInt(decimal_length));} catch(Exception e) { e.printStackTrace(); }
	if (Integer.parseInt(decimal_length)==0)
		curr_val_decimal="";
	else 
		try{curr_val_decimal=(curr_val_decimal+"0000000000").substring(0,Integer.parseInt(decimal_length));} catch(Exception e) { e.printStackTrace(); }
	
	curr_val_fixed=groupNumber(curr_val_fixed,grouping_char);

	

	sb.append(
  		"  <input type=hidden id=\""+id+"\" value=\""+curr_val+"\" min_val=\""+min_val+"\" max_val=\""+max_val+"\" "+js_script_code+"  > \n"+
		"   \n"+
		"  <table border=0 cellspacing=0 cellpadding=0> \n"+
		"  <tr> \n"+
		"  <td> \n"+
		"  	<input type=\"text\" id=\""+id+"_fixed\" value=\""+curr_val_fixed+"\" size="+fixed_length+" maxlength="+fixed_length+" style=\"text-align: right;\"  grouping=\""+grouping_char+"\"  onfocus=onNumericFieldEnter(this,'fixed') onblur=onNumericFieldExit(this,'fixed')  > \n"+
		"  </td> \n");
	
	if (decimal_char.length()>0 && Integer.parseInt(decimal_length)>0)
		sb.append("  <td><b>"+decimal_char+"</b></td> \n");
	
	if (!nvl(decimal_length,"0").equals("0"))
		sb.append(
			"  <td> \n"+
			"  <input type=\"text\" id=\""+id+"_decimal\" value=\""+curr_val_decimal+"\" size="+decimal_length+" maxlength="+decimal_length+" style=\"text-align: left;\"   onfocus=onNumericFieldEnter(this,'decimal') onblur=onNumericFieldExit(this,'decimal')> \n"+
			"  </td>  \n");
	
	if (decimal_char.length()>0)
		sb.append("  <td><span class=\"badge\">"+currency_symbol+"</span></td> \n");
	
	sb.append(
		"  \n"+
		"  </tr> \n"+
		"  </table> \n"
	);
	
	
	return sb.toString();
}


ArrayList<String[]> getArrayForList(Connection conn, HttpSession session, String id, String sql, String env_or_method_id, boolean use_cache) {
	ArrayList<String[]> arr=new ArrayList<String[]>();
	
	
	String source_type="DATABASE";
	
	if (env_or_method_id.contains("-")) {
		source_type="METHOD";
		env_or_method_id=env_or_method_id.replace("-", "");
	}

	if (use_cache)
		arr=(ArrayList<String[]>) session.getAttribute(id);
	else 
		arr=null;
	
	if (arr==null) {
		
		arr=new ArrayList<String[]>();
		
		
		if (source_type.equals("METHOD")) {
			//request_parametreleri burada gecirilebilir.
			String parameters="";
			StringBuilder executable=new StringBuilder();
			StringBuilder result=new StringBuilder();
			StringBuilder logs=new StringBuilder();
			executeMadMethod(conn, session, env_or_method_id, "0", "0", parameters, executable, result, logs);
			
			System.out.println("result="+result);
			
			String[] lines=result.toString().split("\n|\r");
			for (int i=0;i<lines.length;i++) {
				String val="";
				String title="";
				try {val=lines[i].split(":")[0];} catch(Exception e) {val=lines[i];}
				try {title=lines[i].split(":")[1];} catch(Exception e) {title=lines[i];}
				if (val.length()>0) arr.add(new String[]{val,title});
			}
			
		}
		else if (sql.toLowerCase().indexOf("select")<10 && sql.toLowerCase().indexOf("select")>-1)
			{
			
				
				ArrayList<String[]> bindlist=new ArrayList<String[]>();
				
				arr=getDbArrayApp(conn, env_or_method_id, sql, Integer.MAX_VALUE, bindlist);
				if (arr==null) arr=new ArrayList<String[]>();
			}
		else {
			String[] lines=sql.split("\n|\r");
			for (int i=0;i<lines.length;i++) {
				String val="";
				String title="";
				try {val=lines[i].split(":")[0];} catch(Exception e) {val=lines[i];}
				try {title=lines[i].split(":")[1];} catch(Exception e) {title=lines[i];}
				if (val.length()>0) arr.add(new String[]{val,title});
			}
			
		}
		
		session.setAttribute(id, arr);
	} //if (arr==null)
	
	return arr;
}



//********************************************************************
String makeList(Connection conn, HttpSession session, String id, String sql, String curr_value, String additional, int width, String env_or_method_id, String field_mode, boolean use_cache) {
	StringBuilder sb=new StringBuilder();
	
	
	ArrayList<String[]> arr=getArrayForList(conn, session, id, sql, env_or_method_id, use_cache);
	
	
	
	
	if (field_mode.equals("EDITABLE"))
		sb.append(makeComboArr(arr, "", "id=\""+id+"\" "+additional, curr_value, width));
	else if (field_mode.equals("READONLY")) {
		sb.append(makeComboArr(arr, "", "id=\""+id+"\" disabled", curr_value, width));
	}
	else {
		ArrayList<String[]> targetArr=new ArrayList<String[]>();
		String[] arrx=curr_value.split("\\|::\\|");
		for (int i=0;i<arrx.length;i++)
			if (arrx[i].trim().length()>0) targetArr.add(new String[]{arrx[i]});
		
		sb.append(makePickList("0","search_of_"+id, arr, targetArr, "", "", "EDITABLE"));
	}
		
	
	return sb.toString();

}




//********************************************************************
String makeLovFlexField(
		Connection conn, 
		HttpSession session, 
		String id, 
		String sql, 
		String curr_value, 
		int width, 
		String env_or_method_id, 
		String field_mode,
		String flex_field_id,
		String lov_window_title,
		String request_id
		) {
	StringBuilder sb=new StringBuilder();
	
	String lov_sql=sql;
	String lov_env_id=env_or_method_id;
	
	
	
	if (env_or_method_id.length()==0) {
		
	
		sql="select validation_sql, validation_env_id from mad_flex_field where id=?";
		ArrayList<String[]> bindlist=new ArrayList<String[]>();
		bindlist.add(new String[]{"INTEGER",flex_field_id});
		ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
		if (arr==null || arr.size()==0) return "Flex field not found id : " + flex_field_id;
		
		lov_sql=arr.get(0)[0];
		lov_env_id=arr.get(0)[1];
		
	}
	
	
	
	
	
	String lov_label="";
	ArrayList<String[]> lovArr=new ArrayList<String[]>();
	
	if (curr_value.length()>0) {
		
		lovArr=getLovArrayList(conn, session, "lov:"+flex_field_id, request_id, "YES");
		
		System.out.println("lovArr.size()="+lovArr.size());
		System.out.println("lovArr.SQL="+lov_sql);
		
		for (int i=0;i<lovArr.size();i++) {
			if (lovArr.get(i)[0].equals(curr_value)) {
				if (lovArr.get(i).length==0) lov_label=lovArr.get(i)[0];
				else {
					lov_label="<table border=0 >"+
								"<tr>";
					for (int c=1;c<lovArr.get(i).length;c++)
						lov_label=lov_label+"<td>&nbsp;"+clearHtml(lovArr.get(i)[c])+"&nbsp;</td>";			
					
					lov_label=lov_label+"</tr></table>";
				}
				
				break;
			}
		} //for (int i=0;i<lovArr.size();i++)
		
	} //if (curr_value.length()>0)
	



	
	if (field_mode.equals("EDITABLE")) {
		sb.append("<table border=0 cellspacing=0 cellpadding=0>");
		sb.append("<tr>");
		sb.append("<td>");
		
		
		String depended_fields="";
		ArrayList<String> paramNames=getParamNameList(new StringBuilder(lov_sql));
		for (int i=0;i<paramNames.size();i++) {
			if (i>0) depended_fields=depended_fields+",";
			 depended_fields=depended_fields+paramNames.get(i);
		}
		
		
		
		sb.append("<input  type=hidden id="+id+" value=\""+clearHtml(curr_value)+"\">");
		sb.append("<input  type=hidden id=depended_fields_"+id+" value=\""+depended_fields+"\">");

		
		sb.append("<button type=button class=\"btn btn-sm\" onclick=\"openLovWindow('"+curr_value+"','"+clearHtml(lov_window_title)+"','"+request_id+"','"+flex_field_id+"','"+id+"','"+width+"');\">");
		sb.append(" <span class=\"glyphicon glyphicon-list-alt\"></span> ");
		sb.append("</button>");
		sb.append("</td>");
		sb.append("<td width=\"100%\">");
		
		
		
		if (lov_label.length()==0)
			sb.append("<font color=red>Label not found for value {"+curr_value+"}</font>");
		else 
			sb.append(lov_label);
		sb.append("</td>");
		sb.append("</tr>");
		sb.append("</table>");
		
	}

	else if (field_mode.equals("READONLY")) {
		sb.append("<input type=hidden id="+id+" value=\""+curr_value+"\">");
		sb.append(lov_label);
	}
	else {
		
		if (sql.contains("${")) {
			sb.append(makeText("search_of_"+id, "", "", width));
		}
		else {
			ArrayList<String[]> targetArr=new ArrayList<String[]>();
			String[] arrx=curr_value.split("\\|::\\|");
			for (int i=0;i<arrx.length;i++)
				if (arrx[i].trim().length()>0) targetArr.add(new String[]{arrx[i]});
			
			sb.append(makePickList("0","search_of_"+id, lovArr, targetArr, "", "", "EDITABLE"));
		}
		
	}
		
	
	return sb.toString();

}

//********************************************************************
String makeCheckbox(String table_id, String id, String curr_value, String additional) {
	return makeCheckbox(table_id, id, curr_value, additional, "EDITABLE");
}


//********************************************************************
String makeCheckbox(String table_id, String id, String curr_value, String additional, String field_mode) {
	StringBuilder sb=new StringBuilder();
		
	if (field_mode.equals("SEARCH")) {
		ArrayList<String[]> arr=new ArrayList<String[]>();
		arr.add(new String[]{"ALL","Any"});
		arr.add(new String[]{"YES","Yes"});
		arr.add(new String[]{"NO","No"});
		
		sb.append(makeComboArr(arr, "", "size=1 id=value_of_"+id + " ", nvl(curr_value,"ALL"), 120));
	}
	else {
		
		String disabled="";
		if (!field_mode.equals("EDITABLE")) disabled="disabled";

		String checked="";
		if (curr_value.equals("YES")) checked="checked";
		
		sb.append("<input type=\"checkbox\" "+disabled+" id=\""+id+"\" "+checked+"  onclick=\"setCheckboxVal('"+table_id+"','"+id+"');\" value=\""+curr_value+"\"  "+additional+" > ");
	}
	
	  
	
	return sb.toString();

}

//********************************************************************
public static String humanReadableByteCount(long bytes) {
    boolean si=true;
	int unit = si ? 1000 : 1024;
    if (bytes < unit) return bytes + " B";
    int exp = (int) (Math.log(bytes) / Math.log(unit));
    String pre = (si ? "kMGTPE" : "KMGTPE").charAt(exp-1) + (si ? "" : "i");
    return String.format("%.1f %sB", bytes / Math.pow(unit, exp), pre);
}

//********************************************************************
String clearHtml(String instr) {
	
	StringBuilder sb=new StringBuilder();
	sb.append(instr);
	
	ArrayList<String[]> replArr=new ArrayList<String[]>();
	
	replArr.add(new String[]{"<","&#60;"});
	replArr.add(new String[]{">","&#62;"});
	replArr.add(new String[]{"&#32;"," "}); //space
	
	for (int i=0;i<replArr.size();i++) {
		String what=replArr.get(i)[0];
		String with=replArr.get(i)[1];
		
		while(true) {
			int pos=sb.indexOf(what);
			if (pos==-1) break;
			sb.delete(pos, pos+what.length());
			sb.insert(pos, with);
		}
	} //for

	return sb.toString();
	
}

//********************************************************************
String makeAttachment(Connection conn, HttpSession session,  String field_object_id, String flex_field_id, String request_id, String field_mode) {
	StringBuilder sb=new StringBuilder();
	
	sb.append("<input type=hidden id=\""+field_object_id+"\" value=\"x\">");
	
	sb.append("<div id=attachmentFieldDiv_"+request_id+"_"+flex_field_id+">");
	
	sb.append(makeAttachmentFieldContent( conn, session, request_id, flex_field_id ));
	
	sb.append("</div>");
	
	return sb.toString();

}

//********************************************************************
String makeAttachmentFieldContent(Connection conn, HttpSession session, String request_id,  String flex_field_id) {
	
	StringBuilder sb=new StringBuilder();
	
	
	String sql="";
	String file_name="";
	String file_size="0";
	String attached_by="";
	String attached_at="";
	
	sql="select flex_field_id, file_name, file_size, "+
			"(select concat(fname, ' ',lname) from tdm_user where id=entuser) entuser, " + 
			" entdate " + 
			" from mad_request_attachment "+
			" where flex_field_id=? and request_id=?";
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",flex_field_id});
	bindlist.add(new String[]{"INTEGER",request_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==1) {
		flex_field_id=arr.get(0)[0];
		file_name=clearHtml(arr.get(0)[1]);
		try{file_size=humanReadableByteCount(Long.parseLong(arr.get(0)[2]));} catch(Exception e) {file_size="-1";}
		attached_by=clearHtml(arr.get(0)[3]);
		attached_at=arr.get(0)[4];
	}
	
	sb.append("<div class=row>");
	
	

	
	String field_mode="EDITABLE";
	if (!isMadRequestFormEditable(conn, session, request_id))
		field_mode="READONLY";
	
	
	if (field_mode.equals("EDITABLE")) {

		String title="Attach File";
		if (file_name.length()>0) title="Update File";
		
		sb.append("<div class=\"col-md-2\" align=center>");
		sb.append("<button type=\"button\"  class=\"btn btn-sm btn-default\" onclick=\"attachMadFileToRequest('"+request_id+"','"+flex_field_id+"')\">");
		sb.append("<span class=\"glyphicon glyphicon-paperclip\"> "+title+" </span>");
		sb.append("</button>");
		sb.append("</div>");
		
		if (file_name.length()>0) {
			sb.append("<div class=\"col-md-1\" align=right>");
			sb.append(" <button type=\"button\"  class=\"btn btn-sm btn-danger\" onclick=\"deleteMadFileFromRequest('"+request_id+"','"+flex_field_id+"')\">");
			sb.append("<span class=\"glyphicon glyphicon-remove\"></span>");
			sb.append("</button>");
			sb.append("</div>");
		}
	}
	
	
	if (file_name.length()>0) {
		sb.append("<div class=\"col-md-8\">");
		sb.append(" <a href=\"javascript:showMadAttchmentInfo('"+request_id+"','"+encode(flex_field_id)+"','"+file_name+"','"+file_size+"','"+attached_by+"','"+attached_at+"')\">"+file_name+"</a>");
		sb.append("</div>");	
	}
	
	
	

	sb.append("</div>");
	
	
	return sb.toString();
}



//********************************************************************
String getListTitleById(String listval,String list_items) {
	String ret1=listval;
	String[] lines=list_items.split("\n|\r");
	StringBuilder a_val=new StringBuilder();
	StringBuilder a_title=new StringBuilder();
	StringBuilder a_line=new StringBuilder();
	
	
	for (int i=0;i<lines.length;i++) {
		
		a_line.setLength(0);
		a_line.append(lines[i]);
		a_val.setLength(0);
		a_title.setLength(0);
		
		try{a_val.append(a_line.toString().split(":")[0]);} catch(Exception e) {};
		try{a_title.append(a_line.toString().split(":")[1]);} catch(Exception e) {a_title.append(a_val);};
				
		if (a_val.toString().equals(listval)) return a_title.toString();
	}
	
	return ret1;
}

//********************************************************************
String makeTableFieldContent(Connection conn,  HttpSession session, String request_id, String tab_request_type_id, String field_mode) {
	StringBuilder sb=new StringBuilder();
	
	String sql=""; 
	
	sql="select flex_field_id, title , entry_type, validation_sql list_items, " + 
		" 	num_fixed_length, num_decimal_length, num_grouping_char, num_decimal_char, num_currency_symbol " + 
		"   from mad_request_type_field rtf, mad_flex_field ff " + 
		"	where request_type_id=? and rtf.flex_field_id=ff.id " + 
		"	and is_visible='YES' order by field_order"; 
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",tab_request_type_id});
	ArrayList<String[]> tabFieldsArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	sql="select linked_request_id, description, request_group, r.status, rt.flow_id "+
		"	from mad_request_link rl, mad_request r, mad_request_type rt"+
		"   where request_id=? and linked_request_id=r.id and r.request_type_id=rt.id " + 
		"   order by rl.id"; 
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	ArrayList<String[]> requestsArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	boolean is_delete_allowed=true;
	sql="select 1 from "+
		"	mad_request r , mad_request_type_field f, mad_flex_field ff "+
		"	where r.id=? "+
		"	and r.request_type_id=f.request_type_id "+
		"	and f.flex_field_id=ff.id  "+
		"	and ff.entry_type='TABLE'  "+
		"	and tab_request_type_id=? "+
		"	and tab_delete_allowed='NO'";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	bindlist.add(new String[]{"INTEGER",tab_request_type_id});
	ArrayList<String[]> deleteAllowedArr=getDbArrayConf(conn, sql, 1, bindlist);
	if (deleteAllowedArr.size()==1) is_delete_allowed=false;
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" style=\"min-height: 0px; max-height: 300px; overflow-x: scroll; overflow-y: scroll;\" >");
	
	sb.append("<table class=\"table table-condensed table-striped\">");
	
	//put the titles
	sb.append("<tr class=active>");
	sb.append("<td></td>");
	sb.append("<td align=right><b>#</b></td>");
	sb.append("<td><b>Status</b></td>");
	sb.append("<td><b>Description</b></td>");

	for (int i=0;i<tabFieldsArr.size();i++) {
		String tab_title=tabFieldsArr.get(i)[1];
		sb.append("<td><b>"+tab_title+"</b></td>");
	}
	sb.append("</tr>");
	
	ArrayList<String[]> requestVals=new ArrayList<String[]>();
			
	//put data
	for (int i=0;i<requestsArr.size();i++) {
		String tab_request_id=requestsArr.get(i)[0];
		String tab_request_description=requestsArr.get(i)[1];
		String tab_request_group=requestsArr.get(i)[2];
		String tab_request_status=requestsArr.get(i)[3];
		String tab_request_flow_id=requestsArr.get(i)[4];
		
		sql="select flex_field_id, field_value, "+
			" date_format(field_value_ts,'%d.%m.%Y') field_value_ts_as_date,  "+
			" date_format(field_value_ts,'%d.%m.%Y %H:%i:%s') field_value_ts_as_datetime, "+
			" round(field_value_num,8) field_value_num " + 
			" from mad_request_fields where request_id=?"; 
		
		
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",tab_request_id});
		requestVals=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		
		sb.append("<tr>");
		
		sb.append("<td>");
		
		if (field_mode.equals("EDITABLE") && is_delete_allowed) {
			
			sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"removeMadSubRequest('"+request_id+"','"+tab_request_id+"','"+tab_request_type_id+"');\">");
			sb.append("<span class=\"glyphicon glyphicon-minus\"></span>");
			sb.append("</button>");
		}
		
		
		sb.append("</td>");

		sb.append("<td align=right><b>"+tab_request_id+"</b></td>");
		
		String shortage_desc=tab_request_description;
		if (tab_request_description.length()>80) shortage_desc=tab_request_description.substring(0,79)+"...";		
		
		if (tab_request_flow_id.length()>0) 
			tab_request_status=getStateProperty(conn, session, i, tab_request_flow_id, tab_request_status,"TITLE");
		sb.append("<td nowrap><span class=badge>"+tab_request_status+"</span></td>");

		sb.append("<td nowrap><span data-toggle=\"tooltip\" data-placement=\"top\" title=\""+codehtml(tab_request_description)+"\" data-original-title=\"Tooltip on top\"><font size=2>");
		sb.append("<a href=\"javascript:openRequest('"+tab_request_id+"','"+tab_request_group+"')\">"+codehtml(clearHtml(shortage_desc))+"</a>");
		sb.append("</font></span></td>");
		
		
		for (int j=0;j<tabFieldsArr.size();j++) {
			String tab_flex_field_id=tabFieldsArr.get(j)[0];
			String tab_title=tabFieldsArr.get(j)[1];
			String tab_entry_type=tabFieldsArr.get(j)[2];
			String list_items=tabFieldsArr.get(j)[3];
			String num_fixed_length=tabFieldsArr.get(j)[4];
			String num_decimal_length=tabFieldsArr.get(j)[5];
			String num_grouping_char=tabFieldsArr.get(j)[6];
			String num_decimal_char=tabFieldsArr.get(j)[7];
			String num_currency_symbol=tabFieldsArr.get(j)[8];
					
			
			String field_val="";
			for (int f=0;f<requestVals.size();f++) {
				if (requestVals.get(f)[0].equals(tab_flex_field_id)) {
					if (tab_entry_type.equals("DATE")) {
						field_val="["+requestVals.get(f)[2]+"]";
					}
					else if (tab_entry_type.equals("DATETIME")) {
						field_val="["+requestVals.get(f)[3]+"]";
					}
					else if (tab_entry_type.equals("NUMBER")) {
						field_val=requestVals.get(f)[4];
						
					}
					else if (tab_entry_type.equals("LIST"))
						field_val=getListTitleById(requestVals.get(f)[1], list_items);
					else if (tab_entry_type.equals("CHECKBOX"))
						field_val=nvl(requestVals.get(f)[1],"NO");
					else if (tab_entry_type.equals("PASSWORD")) 
						field_val="*******";
					else if (tab_entry_type.equals("TEXT") || tab_entry_type.equals("MEMO")  )
						field_val=requestVals.get(f)[1];
					else field_val="[N/A]";
				}
			}
			
			int maxlen=80;
			String field_val_short="";
			if (field_val.length()>maxlen) field_val_short=codehtml(clearHtml(field_val.substring(0,maxlen-1)))+"...";
			else field_val_short=codehtml(clearHtml(field_val));
			
			
			
			if (tab_entry_type.equals("CHECKBOX")) {
				String is_checked="";
				if (field_val.equals("YES")) is_checked="checked";
				sb.append("<td align=center>");
				sb.append("<input type=checkbox disabled "+is_checked+">");
				sb.append("</td>");
			}
			else if (tab_entry_type.equals("NUMBER")) {
				
				
				
				String formatted_number=formatNumber(field_val,num_fixed_length, num_decimal_length, num_grouping_char, num_decimal_char, num_currency_symbol);
				
				sb.append("<td nowrap align=right style=\"font-family: monospace;\">");
				sb.append(formatted_number);
				sb.append("</td>");
				
				
			}
			else {
				sb.append("<td nowrap>");
				sb.append("<span>"+field_val_short+"</span>");
				sb.append("</td>");
			}
				
			
			
			
		} //for (int j=0;j<ta
		sb.append("</tr>");
				
	} //for (int i=0
	
	
	sb.append("</table>");
			
	sb.append("</div>");
	sb.append("</div>");
	
	return sb.toString();

}

//********************************************************************
String formatNumber(
		String unformattedval,
		String num_fixed_length, 
		String num_decimal_length, 
		String num_grouping_char, 
		String num_decimal_char, 
		String num_currency_symbol) {
	
	String ret1="";
	
	String fixed_part="0";
	String decimal_part="0";
	
	try {fixed_part=unformattedval.split("\\.")[0];} catch(Exception e) {}
	try {decimal_part=unformattedval.split("\\.")[1];} catch(Exception e) {}
	
	fixed_part=groupNumber(fixed_part, num_grouping_char);
	
	ret1=fixed_part;
	if (num_decimal_char.length()>0) {
		String uncut_decimal_part=decimal_part+"000000";
		try {
			uncut_decimal_part=uncut_decimal_part.substring(0,Integer.parseInt(num_decimal_length));
		} catch(Exception e) {
			uncut_decimal_part=decimal_part;
			
		}
		
		ret1=ret1+num_decimal_char+uncut_decimal_part;
	}
		
	
	if (num_currency_symbol.length()>0) 
		ret1=ret1+"  <font color=blue>"+num_currency_symbol+"</font>";


	
	return ret1;
}

//********************************************************************
String makeTableField(Connection conn,  HttpSession session, String flex_field_id, String request_id, String tab_request_type_id, String field_mode) {
	StringBuilder sb=new StringBuilder();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	String sql="select request_type from mad_request_type where id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",tab_request_type_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	String tab_request_type_name=arr.get(0)[0];
	
	if (field_mode.equals("EDITABLE")) {
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-12\">");
		
		sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"addNewMadSubRequest('"+request_id+"','"+tab_request_type_id+"')\">");
		sb.append("<span class=\"glyphicon glyphicon-plus\"> [<b>"+tab_request_type_name+"</b>] </span>");
		sb.append("</button>");
		
		
		sb.append("</div>");
		sb.append("</div>");
	}
	
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=\"table_content_of_"+request_id+"_"+tab_request_type_id+"\">");
	sb.append(makeTableFieldContent(conn, session, request_id, tab_request_type_id, field_mode));
	sb.append("</div>");
	sb.append("</div>");
	
	return sb.toString();

}

//***********************************************
String makePickList(
		String table_id,
		String id, 
		ArrayList<String[]> source_arr, 
		ArrayList<String[]> picked_arr, 
		String picklist_header, 
		String event_listener) {
	return makePickList(table_id, id, source_arr, picked_arr, picklist_header, event_listener, "EDITABLE");
}

//***********************************************
String makePickList(
		String table_id,
		String id, 
		ArrayList<String[]> source_arr, 
		ArrayList<String[]> picked_arr, 
		String picklist_header, 
		String event_listener,
		String field_mode) {
	StringBuilder sb=new StringBuilder();
	
	ArrayList<String[]> source_arr_edited=source_arr;

	
	for (int i=source_arr.size()-1;i>=0;i--) {
		for (int j=0;j<picked_arr.size();j++) {
			if (source_arr.get(i)[0].equals(picked_arr.get(j)[0])) {
				picked_arr.set(j, source_arr_edited.get(i));
				source_arr_edited.remove(i);
				break;
			}
				
		}
			
	}
	
	String curr_val="";
	for (int i=0;i<picked_arr.size();i++) {
		String a_val=picked_arr.get(i)[0];
		if (i>0) curr_val=curr_val+"|::|";
		curr_val=curr_val+a_val;
	}
	
	if (picklist_header.length()>0) {
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-12 active\">");
		sb.append("<b><span class=\"label label-info\">"+picklist_header+"</label></b>"); 
		sb.append("</div>");
		sb.append("</div>");
	}
	sb.append("<input type=hidden id=\""+id+"\" value=\""+codehtml(curr_val)+"\">");
	sb.append("<input type=hidden id=\"event_listener_for_"+id+"\" value=\""+codehtml(event_listener)+"\">");
	
	
	String disabled="";
	if (!field_mode.equals("EDITABLE") && !field_mode.equals("SEARCH")) disabled="disabled";
	
	sb.append("<div class=row>");
	
	sb.append("<div class=\"col-md-6\" align=right>");

	sb.append(makeComboArr(source_arr_edited, "", disabled+" size=5 id=\"source_list_"+id+"\" onclick=\"setPicklistButtons('SOURCE','"+id+"');\"  onDblClick=\"pickListAction('"+table_id+"','"+id+"','ADD_ONE');\" ", "", -100));
	sb.append("</div>"); //col-md-5
	
	sb.append("<div class=\"col-md-1\" align=center>");
	
	String add_all_disabled="";
	String remove_all_disabled="";
	
	if (source_arr_edited.size()==0) add_all_disabled="disabled";
	if (picked_arr.size()==0) remove_all_disabled="disabled";
	
	if (!field_mode.equals("EDITABLE")) {
		add_all_disabled="disabled";
		remove_all_disabled="disabled";
	}
	
	sb.append("<button disabled class=\"btn btn-sm btn-default\" id=\"bt_add_one_"+id+"\" onclick=\"pickListAction('"+table_id+"','"+id+"','ADD_ONE');\"><span class=\"glyphicon glyphicon-step-forward\"></span></button>");
	sb.append("<br>");
	sb.append("<button "+add_all_disabled+" class=\"btn btn-sm btn-default\" id=\"bt_add_all_"+id+"\" onclick=\"pickListAction('"+table_id+"','"+id+"','ADD_ALL');\"><span class=\"glyphicon glyphicon-fast-forward\"></span></button>");
	
	sb.append("<br>");
	
	sb.append("<button disabled class=\"btn btn-sm btn-default\" id=\"bt_remove_one_"+id+"\" onclick=\"pickListAction('"+table_id+"','"+id+"','REMOVE_ONE');\"><span class=\"glyphicon glyphicon-step-backward\"></span></button>");
	sb.append("<br>");
	sb.append("<button "+remove_all_disabled+" class=\"btn btn-sm btn-default\" id=\"bt_remove_all_"+id+"\" onclick=\"pickListAction('"+table_id+"','"+id+"','REMOVE_ALL');\"><span class=\"glyphicon glyphicon-fast-backward\"></span></button>");
	
	sb.append("</div>"); //col-md-1
	
	sb.append("<div class=\"col-md-5\"  align=left>");
	sb.append(makeComboArr(picked_arr, "", disabled+" size=5 id=\"target_list_"+id+"\" onclick=\"setPicklistButtons('TARGET','"+id+"');\" onDblClick=\"pickListAction('"+table_id+"','"+id+"','REMOVE_ONE');\" ", "", -100));
	sb.append("</div>"); //col-md-5
	
	sb.append("</div>"); //row
	
	return sb.toString();
}

//*********************************************************************************************
ArrayList<String[]> getPermissionOfGroup(Connection conn, HttpSession session, String group_id) {
	ArrayList<String[]> ret1=new ArrayList<String[]>();
	String group_id_list=(String) session.getAttribute("permission_group_id_list");
	//to prevent infinit loops
	if (group_id_list.contains("("+ group_id +")")) return ret1;
	
	String sql="select permission_id , permission_name  from mad_group_permission m, mad_permission p  	" +
				"	where  group_id=? 	" + 
				"	and permission_id=p.id   ";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",group_id});
	
	ArrayList<String[]> permArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	for (int i=0;i<permArr.size();i++) {
		String permission_id=permArr.get(i)[0];
		String permission_name=permArr.get(i)[1];
		ret1.add(new String[]{permission_id,permission_name});
	}
	
	group_id_list=group_id_list+"("+group_id+")";
	session.setAttribute("permission_group_id_list",group_id_list);
	
	return ret1;
}

//*********************************************************************************************
ArrayList<String[]> getUserPermissions(Connection conn, HttpSession session, String user_id) {
	
	String sql="select group_id from mad_group_members where member_type='USER' and member_id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",user_id});
	ArrayList<String[]> grpArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	ArrayList<String[]> permList=new ArrayList<String[]>();
	session.setAttribute("permission_group_id_list","");
	for (int i=0;i<grpArr.size();i++) {
		String group_id=grpArr.get(i)[0];
		ArrayList<String[]> permGrp=getPermissionOfGroup(conn,session,group_id);
		
		for (int p=0;p<permGrp.size();p++) {
			String permission_id=permGrp.get(p)[0];
			String permission_name=permGrp.get(p)[1];
			if (permList.contains(permission_name)) continue;
			permList.add(new String[]{permission_id,permission_name});
		}
		
	}
	
	
	
	return permList;
}


//***********************************************
String getMADWarning(Connection conn, HttpSession session) {
	StringBuilder sb=new StringBuilder();
	
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String curruser=""+((Integer) session.getAttribute("userid"));
	

	
	sql="select \n"+
		"	request_id  \n"+
		"	from  \n"+
		"	mad_request_flow_logs rfl, mad_request r, mad_flow_state fs , mad_flow_state_action fsa,  \n"+
		"	mad_flow_state_action_permissions fsap \n"+
		"	where  \n"+
		"	rfl.status='OPEN' \n"+
		"	and rfl.request_id=r.id \n"+
		"	and rfl.flow_state_id=fs.id \n"+
		"	and rfl.flow_state_id=fsa.flow_state_id and fsa.action_type='HUMAN' \n"+
		"	and fsa.id=fsap.flow_state_action_id and fsap.permission_id not in (-1, -2, -5) \n"+ //opener, manager, group member, 
		"	and fsap.permission_id in (${curruserpermission}) \n"+
		"	UNION ALL \n"+ 
		"	select r.id request_id \n"+
		"	from mad_request r, \n"+
		"		( \n"+
		"			select id perm_user, -1 perm_id, id rel_user_id from tdm_user c  \n"+
		"			union all \n"+
		"			select member_id perm_user, -2 perm_id, manager_user_id rel_user_id   \n"+
		"			from mad_group g, mad_group_members gm \n"+
		"				where group_type='USER' and gm.group_id=g.id and member_type='USER'  \n"+
//		"			union all \n"+
//		"			select 0 perm_user, -3 perm_id, user_id rel_user_id from tdm_user_role c where role_id=1  \n"+
//		"			union all \n"+
//		"			select 0 perm_user, -4 perm_id, user_id rel_user_id from tdm_user_role c where role_id=5 \n"+
		"			union all \n"+
		"			select gm.member_id perm_user, -5 perm_id, gmall.member_id rel_user_id   \n"+
		"				from mad_group g, mad_group_members gm , mad_group_members gmall \n"+
		"				where g.group_type='USER' and gm.group_id=g.id  \n"+
		"				and gm.member_type='USER'  \n"+
		"				and g.id=gmall.group_id and  gmall.member_type='USER' \n "+
		"		) perms \n"+
		"	where  exists (select 1 from mad_request_flow_logs where request_id=r.id and status='OPEN')  \n"+
		"	and (r.entuser=perms.perm_user or perms.perm_user=0) and rel_user_id=? \n"+
		"	and request_type_id>0";
		
	ArrayList<String[]> permList=getUserPermissions(conn, session, curruser);
	
	String perm_list_stmt="-9999";
	
	for (int i=0;i<permList.size();i++) {
		String permission_id=permList.get(i)[0];
		
		perm_list_stmt=perm_list_stmt+", ?";
		bindlist.add(new String[]{"INTEGER",permission_id});

	}
	
	if (checkrole(session, "ADMIN")) {
		perm_list_stmt=perm_list_stmt+", ?";
		bindlist.add(new String[]{"INTEGER","-3"});
	}
	
	if (checkrole(session, "MADRM")) {
		perm_list_stmt=perm_list_stmt+", ?";
		bindlist.add(new String[]{"INTEGER","-4"});
	}
	
	
	sql=sql.replace("${curruserpermission}", perm_list_stmt);
	sql="select distinct request_id from (\n"+sql+"\n) t1";
	
	bindlist.add(new String[]{"INTEGER",curruser});
	
	
	ArrayList<String[]> actionList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	if (actionList.size()==0) {
		sb.append("<button id=btwaitingaction class=\"btn btn-sm btn-success\" style=\"width:100%;\" type=\"button\" onclick=\"getMADWarning();\">");
		sb.append(" "+decodeStringTitle(conn, session, "No waiting request", "SYS_WARN_WAITING_NO_REQUEST", false)+" <big> <span class=\"glyphicon glyphicon-refresh\"></span></big> ");
		sb.append("</button>");
	}
	else {
		sb.append("<button  id=btwaitingaction class=\"btn btn-sm btn-warning\" type=\"button\" onclick=\"setMadWaitingActionQuery();\">");
		sb.append("<span class=\"badge\">"+actionList.size()+"</span> "+decodeStringTitle(conn, session, "request(s) waiting your action", "SYS_WARN_WAITING_REQUEST_FOUND", false));
		sb.append("</button>");
	}
	
	session.setAttribute("WAITING_ACTION_LIST", actionList);


	
	
	
	
	return sb.toString();

}


//***********************************************
String loadDeploymentHeader(Connection conn, HttpSession session) {
	StringBuilder sb=new StringBuilder();
	
	sb.append("<table width=\"100%\" cellspacing=0 cellpadding=0 border=0>");
	
	sb.append("<tr class=active>");
	
	sb.append("<td nowrap align=left>");
	sb.append("</td>");
	
	sb.append("<td nowrap align=right>");
	if (checkpermissionByName(session, "CREATE_REQUEST")) {
		sb.append(" <button class=\"btn btn-sm btn-default\" onclick=\"addNewMadRequest('REQUEST')\"><img src=\"img/mad/REQUEST.png\" width=20 height=16> ");
		sb.append(decodeStringTitle(conn, session, "Request", "SYS_CREATE_REQ_BTN_REQUEST", false));
		sb.append(" <span class=\"glyphicon glyphicon-plus\"></span></button>");
	}
	
	if (checkpermissionByName(session, "CREATE_PACKAGE")) {
		sb.append(" <button class=\"btn btn-sm btn-default\" onclick=\"addNewMadRequest('PACKAGE')\"><img src=\"img/mad/PACKAGE.png\" width=20 height=16> ");
		sb.append(decodeStringTitle(conn, session, "Package", "SYS_CREATE_REQ_BTN_PACKAGE", false));
		sb.append(" <span class=\"glyphicon glyphicon-plus\"></span></button>");
	}
	
	
	if (checkpermissionByName(session, "CREATE_DEPLOYMENT_REQUEST")) {
		sb.append(" <button class=\"btn btn-sm btn-default\" onclick=\"addNewMadRequest('DEPLOYMENT')\"><img src=\"img/mad/DEPLOYMENT.png\" width=20 height=16> ");
		sb.append(decodeStringTitle(conn, session, "Deployment", "SYS_CREATE_REQ_BTN_DEPLOYMENT", false));
		sb.append(" <span class=\"glyphicon glyphicon-plus\"></span></button>");
	}
	
	sb.append("</td>");
	
	sb.append("</tr>");

	sb.append("</table>");
	
	
	return sb.toString();

}


//***********************************************
String makeSearchButtons(Connection conn, HttpSession session) {
	StringBuilder sb=new StringBuilder();
	String keyword_text=(String) session.getAttribute("FILTER_"+"FILTER_KEYWORD");
	if (keyword_text==null) keyword_text="";
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	sb.append("<div class=\"input-group\"  style=\"width:100%;\">");
	sb.append("<input type=\"text\" value=\""+keyword_text+"\" onkeypress=onFreeTextSearchEnterFILTER(event)  id=free_text_search_box class=\"form-control\" placeholder=\"Search for...\" >");
	sb.append("</div>");
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	sb.append("<div class=\"input-group\">");
	sb.append("<span class=\"input-group-btn\" >");
	sb.append("<button class=\"btn btn-primary\" type=\"button\" onclick=\"showMadSearchBox('FILTER', '');\"  style=\"width:100%;\"> <span class=\"glyphicon glyphicon-filter\"> "+
	decodeStringTitle(conn, session, "Detailed Search", "SYS_BUTTON_DETAILED_SEARCH", false)+
	" </span></button>");
	sb.append("</span>");
	sb.append("</div>");
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	sb.append("<div class=\"input-group\">");
	sb.append("<span class=\"input-group-btn\" >");
	sb.append("<button class=\"btn btn-danger\" type=\"button\" onclick=\"clearAllMadFilters();\"  style=\"width:100%;\"> <span class=\"glyphicon glyphicon-remove\"> "+
			decodeStringTitle(conn, session, "Clear Filter", "SYS_BUTTON_CLEAR_FILTER", false)+
			" </span></button>");
	sb.append("</span>");
	sb.append("</div>");
	sb.append("</div>");
	sb.append("</div>");	
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" align=center>");
	sb.append("<div id=NOFADE_MADalertDiv></div>");
	sb.append("</div>");
	sb.append("</div>");
	
			
	return sb.toString();
	
}
//***********************************************
String loadMadQueries(Connection conn, HttpSession session) {
	StringBuilder sb=new StringBuilder();
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();

	sb.append(makeSearchButtons(conn, session));

	
	sql="select id, query_name, query_user " +
		"	from mad_query where query_user=0 or query_user=? "+
		" order by query_user, query_name";
	
	
	String curruser=""+((Integer) session.getAttribute("userid"));
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",curruser});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	
	for (int i=0;i<arr.size(); i++) {
		String query_id=arr.get(i)[0];
		String query_name=arr.get(i)[1];
		String query_user=arr.get(i)[2];
		
		String state=nvl((String) session.getAttribute("MAD_QUERY_"+query_id),"UNSET");
		String checked="";
		if (state.equals("SET")) checked="checked";
		String query_type="SYSTEM";
		if (query_user.equals(curruser)) query_type="USER";
		
		sb.append("<div clas=row>");
		sb.append("<div class=\"col-md-12\" align=left style=\"white-space:nowrap;  \">");
		sb.append("<input type=hidden id=\"query_id_of_"+i+"\" value=\""+query_id+"\">");
		
		sb.append("<input type=checkbox "+checked+" id=\"query_ch_"+query_id+"\" value=\""+query_type+"\" onclick=\"setMadQuery(this,'"+query_id+"');\" >");
		if (query_type.equals("USER"))
			sb.append(" <a href=\"javascript:configMadQuery('"+query_id+"')\"><small><b>"+codehtml(clearHtml(query_name))+"</b></small></a>");
		else 
			sb.append(" <font color=\"#010101\"><small><b>"+codehtml(clearHtml(query_name))+"</b></small></font>");
		sb.append("</div>");
		sb.append("</div>");
		
	}
	
	
	
	
	return sb.toString();

}




//************************************************
void setMadQuery(HttpSession session, String query_id, String state) {
	if (state.equals("UNSET")) {
		clearFlexFieldFilters(session, "FILTER");
		clearMadSearchAllFilters(session, "FILTER");
		session.setAttribute("sort_statement","");
		session.setAttribute("fields_to_show","");
	}
	
	session.setAttribute("MAD_QUERY_"+query_id, state);
	
	
}

//************************************************
void unsetAllMadQueries(Connection conn, HttpSession session) {
	String query_id="";
	String sql="select id from mad_query where query_user in(0,?)";
	String curruser=""+((Integer) session.getAttribute("userid"));
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",curruser});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	for (int i=0;i<arr.size();i++)
		setMadQuery(session,arr.get(i)[0],"UNSET"); 
	
	
}


//************************************************
void unsetAllMadUserQueries(Connection conn, HttpSession session) {
	String query_id="";
	String sql="select id from mad_query where query_user=?";
	String curruser=""+((Integer) session.getAttribute("userid"));
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",curruser});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	for (int i=0;i<arr.size();i++)
		setMadQuery(session,arr.get(i)[0],"UNSET"); 
	
	
}


//************************************************
String getAppNameByReqId(Connection conn,String request_id) {
	StringBuilder sb=new StringBuilder();
	String sql="select application_name  from mad_application a, mad_request_application b " + 
				" where b.application_id=a.id and b.request_id=? order by 1";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",request_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	for (int i=0;i<arr.size();i++) {
		
		sb.append("<span class=\"badge label-default\">"+arr.get(i)[0]+"</span>");
		//if (i>0) sb.append(" ");
		//sb.append("<font size=2>"+arr.get(i)[0]+"</font>");
		
		if (i>1 && i % 3 ==2 && i<arr.size()-1)
		 	sb.append("<br>");
		else 
			sb.append(" ");
		
	}
	return sb.toString();
	
}


//***********************************************
ArrayList<String[]> getListByPermission( 
		Connection conn, 
		HttpSession session, 
		String table_name, 
		String title_field, 
		String filter,
		ArrayList<String[]> bindlist
		) {
	ArrayList<String[]> ret1=new ArrayList<String[]>();
	
	String sql="";
	

	sql="select id, "+title_field+" , permission from "+table_name + " m ";
	
	if (filter.length()>0) sql=sql + " where " + filter;
	
	sql=sql + " order by 2";
	
	
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	for (int i=0;i<arr.size();i++) {
		String id=arr.get(i)[0];
		String title=arr.get(i)[1];
		String permission_id=arr.get(i)[2];
		
		boolean has_ability=false; 
		
		
		
		if (permission_id.trim().length()==0 || permission_id.equals("null") || permission_id.equals("0")) 
			has_ability=true;
		else 
			has_ability=checkpermissionById(session, permission_id);
		
		if (!has_ability)  continue;
		
		
		ret1.add(new String[]{id,title});
	}
	
	return ret1;
}

//***********************************************
ArrayList<String[]> getPackageTypeList(Connection conn, HttpSession session, String request_group, boolean include_invisibles) {
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	String filter="request_group='"+request_group+"' ";
	
	if (!include_invisibles) filter=filter+" and is_visible='YES'";
	
	if (nvl(request_group,"ALL").equals("ALL"))
		 filter="is_visible='YES' ";
	
	
	return getListByPermission(conn, session, "mad_request_type", "request_type",filter,bindlist);
}

//***********************************************
ArrayList<String[]> getApplicationList(Connection conn, HttpSession session, boolean in_deployment, String request_id) {
	String filter ="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();

	if (in_deployment) {
		filter=" exists (select 1 from mad_request_application where request_id=? and application_id=m.id) ";	
		bindlist.add(new String[]{"INTEGER",request_id});
		
	}
	ArrayList<String[]> ret1=getListByPermission(conn, session, "mad_application", "application_name", filter, bindlist);
		
	
	String sql="select application_id " + 
			"	from mad_request_type_application " + 
			"	where request_type_id=(select request_type_id from mad_request r where r.id=?)";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	

	for (int i=ret1.size()-1;i>=0;i--) {
		boolean available=false;
		
		for (int k=0;k<arr.size();k++) 
			if (arr.get(k)[0].equals(ret1.get(i)[0])) {
				available=true;
				break;
			}
			
		if (!available)  {
			ret1.remove(i);
		}
	}



	return ret1;
}




//***********************************************
ArrayList<String[]> getEnvironmentList(Connection conn, HttpSession session, String request_id) {
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	ArrayList<String[]> ret1=getListByPermission(conn, session, "mad_environment", "environment_name","", bindlist);
	
	String sql="select environment_id " + 
				"	from mad_request_type_environment " + 
				"	where request_type_id=(select request_type_id from mad_request r where r.id=?)";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);

	
	for (int i=ret1.size()-1;i>=0;i--) {
		boolean available=false;
		
		for (int k=0;k<arr.size();k++) 
			if (arr.get(k)[0].equals(ret1.get(i)[0])) {
				available=true;
				break;
			}
			
		if (!available)  ret1.remove(i);
	}
	
	return ret1;
}




//***********************************************
String makeApplicationRepoConfig(Connection conn, HttpSession session, String deployment_package_id, boolean is_form_editable) {
	StringBuilder sb=new StringBuilder();
	String sql="select application_id, application_name, "+
				" repository_name, par_hostname, par_port, app_repo_root, app_repo_filter "+
				" from mad_application a, mad_request_application b, mad_repository r "+
				" where a.id=b.application_id and b.request_id=? and a.repository_id=r.id " +
				" order by 2";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",deployment_package_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	//sb.append("<h4><span class=\"label label-info\">Items in Application(s)</label></h4>"); 
	sb.append("<div role=\"tabpanel\">");
	//Nav Tabs
	sb.append("<ul class=\"nav nav-tabs\" role=\"tablist\">");
	
	for (int i=0;i<arr.size();i++) {
		String application_id=arr.get(i)[0];
		String application_name=arr.get(i)[1];
		
		
		
		String active_class="";
		if (i==0) active_class="class=\"active\"";
		sb.append("<li role=\"presentation\" "+active_class+">"+
			"<a href=\"#app_tab_"+application_id+"\" aria-controls=\"app_tab_"+application_id+"\" "+
			" role=\"tab\" data-toggle=\"tab\" >"+application_name+"</a></li>");
		
	}
	sb.append("</ul>");
	
	//Tab panes
	
	sb.append("<div class=\"tab-content\" style=\"min-height: 600px; max-height: 600px; overflow-x: scroll; overflow-y: scroll;\">");
	for (int i=0;i<arr.size();i++) {
		String application_id=arr.get(i)[0];
		String application_name=arr.get(i)[1];
		String repository_name=arr.get(i)[2];
		String par_hostname=arr.get(i)[3];
		String par_port=arr.get(i)[4];
		String app_repo_root=arr.get(i)[5];
		String app_repo_filter=arr.get(i)[6];
		if (app_repo_filter.length()==0) 
			app_repo_filter="All";
		
		String active_class="class=\"tab-pane\"";
		if (i==0) active_class="class=\"tab-pane active\"";
		sb.append("<div role=\"tabpanel\" "+active_class+" id=\"app_tab_"+application_id+"\"\">");
		
		
	

			
		//----------------------------------
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-12\" id=\"NOFADE_added_app_items_"+deployment_package_id+"_"+application_id+"\" >");
		sb.append(getItemsInApplication(conn, session,deployment_package_id, application_id, is_form_editable));
		sb.append("</div>");  // col-md-12
		sb.append("</div>"); //row
		
		
		
		sb.append("</div>"); //tabpanel
	}
	sb.append("</div>");
	
	
	
	
	sb.append("</div>");
	
	return sb.toString();
}
	
	
//***********************************************
int removeSubRequest(Connection conn, HttpSession session, String request_id) {
	int ret1=0;
	String sql="";
	 
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",request_id});
	
	sql="delete from mad_keywords where object_type='mad_request' and object_id=?";
	execDBConf(conn, sql, bindlist);
	

	sql="delete from mad_request_fields where request_id=?";
	execDBConf(conn, sql, bindlist);
	
	sql="delete from mad_request_link where linked_request_id=?";
	execDBConf(conn, sql, bindlist);
	
	
	sql="delete from mad_request where id=?";
	execDBConf(conn, sql, bindlist);
	
	
	return ret1;
}

//***********************************************
int removeMadRequest(Connection conn, HttpSession session, String request_id) {
	int ret1=0;
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",request_id});
	
	sql="delete from mad_keywords where object_type='mad_request' and object_id=?";
	execDBConf(conn, sql, bindlist);
	
	
	sql="delete from mad_request_app_env where request_id=?";
	execDBConf(conn, sql, bindlist);
	
	sql="delete from mad_request_fields where request_id=?";
	execDBConf(conn, sql, bindlist);
	
	sql="delete from mad_request_application where request_id=?";
	execDBConf(conn, sql, bindlist);
	
	sql="delete from mad_request_application_member where request_id=?";
	execDBConf(conn, sql, bindlist);
	
	sql="delete from mad_request_work_plan where request_id=?";
	execDBConf(conn, sql, bindlist);
	
	sql="delete from mad_request_work_package where request_id=?";
	execDBConf(conn, sql, bindlist);
	
	sql="delete from mad_request where id=?";
	execDBConf(conn, sql, bindlist);
	
	
	return ret1;
}

//****************************************************************************************************
String makeFlexField(
		Connection conn, 
		HttpSession session, 
		String prefix, 
		int field_index, 
		String parent_table_id, //request_id, platform_id, application_id etc...
		String flex_field_id, 
		String parameter_name,
		ArrayList<String[]> fexValsArr, 
		String is_mandatory,
		String is_editable,
		String is_visible,
		String default_value,
		String fire_event
		) {
	StringBuilder sb=new StringBuilder();
	
	String sql="select id, f.entry_type, f.title, f.entry_validation_regex, "+
				" f.is_validated, f.validation_sql, f.validation_env_id, f.field_size,  "+
				" tab_request_type_id, "+
				" num_fixed_length, num_decimal_length, num_grouping_char, num_decimal_char, num_currency_symbol, num_min_val, num_max_val,  "  + 
				" string_name " + 
				" from  mad_flex_field f " + 
				" where id=?";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",flex_field_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	
	
	if (arr==null || arr.size()==0) return "no flexible field with id : " + flex_field_id;
	

	
	String field_id=arr.get(0)[0];
	String entry_type=arr.get(0)[1];
	String entry_title=arr.get(0)[2];
	String entry_validation_regex=arr.get(0)[3];
	String is_validated=arr.get(0)[4];
	String validation_sql=arr.get(0)[5];
	String validation_env_id=arr.get(0)[6];
	String field_size=arr.get(0)[7];
	String tab_request_type_id=arr.get(0)[8];
	
	String num_fixed_length=nvl(arr.get(0)[9],"12");
	String num_decimal_length=nvl(arr.get(0)[10],"0");
	String num_grouping_char=arr.get(0)[11];
	String num_decimal_char=arr.get(0)[12];
	String num_currency_symbol=arr.get(0)[13];
	String num_min_val=arr.get(0)[14];
	String num_max_val=arr.get(0)[15];
	
	String string_name=arr.get(0)[16];
	
	
	
	
	
	
	if (string_name.trim().length()>0) 		
		entry_title=decodeStringTitle(conn, session, entry_title, string_name, true);
	
	ArrayList<String[]> dependencyArr=new ArrayList<String[]>();
	
	if (flex_field_id.equals("567")) {
		dependencyArr.add(new String[]{"562"}); //cari kodu
		dependencyArr.add(new String[]{"564"}); //hedef yili
	}
	if (flex_field_id.equals("569")) {
		dependencyArr.add(new String[]{"567"}); //cari kodu
	}
	
	
	String dependecy_list="";
	
	for (int i=0;i<dependencyArr.size();i++) {
		if (i>0) dependecy_list=dependecy_list+",";
		dependecy_list=dependecy_list+dependencyArr.get(i)[0];
	}
		
	
	String old_value="";
	String curr_val=default_value;
	boolean is_found=false;
	for (int c=0;c<fexValsArr.size();c++) {
		if (fexValsArr.get(c)[0].equals(field_id)) {
			curr_val=fexValsArr.get(c)[1];
			old_value=curr_val;
			is_found=true;
			break;
		}
	}
	
	if (!is_found) curr_val=default_value;
	
	
	int field_size_int=0;
	try{field_size_int=Integer.parseInt(field_size);} catch(Exception e) {}
	
	if (entry_type.equals("MEMO")) {
		if (field_size_int<2) field_size_int=2;
		if (field_size_int>10) field_size_int=10;
	}
	else if (entry_type.equals("TEXT") || entry_type.equals("PASSWORD")) {
		if (field_size_int<-100) field_size_int=-100;
		if (field_size_int>400) field_size_int=400;
	}
	else {
		if (field_size_int<-100) field_size_int=-100;
		if (field_size_int>400) field_size_int=400;
	}
	
	
	
	//Request platform parametrelerinde sifre varsa bunu gizle
	if (prefix.contains("param_platform_") || prefix.contains("param_application_")) {
		
		if (entry_type.equals("PASSWORD") || entry_title.toLowerCase().contains("password") || entry_title.toLowerCase().contains("passcode")) 
			curr_val="*******";
		
	}
	
	if (entry_type.equals("CALCULATED"))
		entry_title="<font color=green>"+entry_title+"</font>";
	else if (is_mandatory.equals("YES") && is_editable.equals("YES"))
		entry_title="<font color=red>"+entry_title+"</font>";
	else 
		entry_title="<font color=black>"+entry_title+"</font>";
		
	String field_object_id=prefix+"_TAB"+parent_table_id+"_flex_field_id_"+field_index;
	
	
	sb.append("<input type=hidden id=\"id_of_"+field_object_id+"\" value=\""+flex_field_id+"\">");
	sb.append("<input type=hidden id=\"entry_type_of_"+field_object_id+"\" value=\""+entry_type+"\">");
	sb.append("<input type=hidden id=\"regex_of_"+field_object_id+"\" value=\""+codehtml(entry_validation_regex)+"\">");
	sb.append("<input type=hidden id=\"is_validated_of_"+field_object_id+"\" value=\""+is_validated+"\">");
	sb.append("<input type=hidden id=\"is_mandatory_of_"+field_object_id+"\" value=\""+is_mandatory+"\">");
	sb.append("<input type=hidden id=\"parameter_name_of_"+field_object_id+"\" value=\""+parameter_name+"\">");
	sb.append("<input type=hidden id=\"old_value_of_"+field_object_id+"\" value=\""+clearHtml(old_value)+"\">");
	sb.append("<input type=hidden id=\"dependency_of_"+field_object_id+"\" value=\""+dependecy_list+"\">");
	
	
	if (entry_type.equals("ACCORDION")) {
		sb.append(makeAccordion(conn, session, parent_table_id, flex_field_id,field_object_id,entry_title,string_name,"BEGIN",default_value));
		sb.append("<span id=warning_box_"+field_object_id+"></span>");
		return sb.toString();
		
		
	}
		
	if (!is_visible.equals("YES")) {
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-12\" align=right style=\"white-space: nowrap;\">");
		sb.append("<input type=\"hidden\" id=\""+field_object_id+"\" class=\"form-control\" value=\""+codehtml(curr_val)+"\">");		
		sb.append("<span id=warning_box_"+field_object_id+"></span>");
		sb.append("</div>"); //row
		sb.append("</div>"); //col-md-12
		
		return sb.toString();
	}
	
	
	
	
	
	sb.append("<div class=row>");
	
	
	sb.append("<div class=\"col-md-3\" align=right style=\"white-space: nowrap;\">");
	sb.append("<b><small>"+entry_title+" : </small></b>");
	sb.append("</div>"); //col-md-4
	
	
	sb.append("<div class=\"col-md-9\">");
	
	String validation_script="\"validateEntry('"+parent_table_id+"','"+field_object_id+"','"+entry_type+"','"+codehtml(entry_validation_regex)+"','"+is_validated+"','"+is_mandatory+"','"+fire_event+"');\" ";
	if (parent_table_id.equals("NONE") || parent_table_id.length()==0) validation_script="";

	
	String field_mode="EDITABLE";
	if (is_editable.equals("NO")) field_mode="READONLY";
	if (prefix.indexOf("search")==0) field_mode="SEARCH";
	
	
	
	if (entry_type.equals("LIST")) 
		sb.append(makeList(conn, session, field_object_id,validation_sql,curr_val," onchange="+validation_script+" ",field_size_int, validation_env_id, field_mode, true));
	else if (entry_type.equals("LOV")) {
		sb.append("<div id=\"LOV_DIV_"+field_object_id+"\">");		
		sb.append(makeLovFlexField(conn, session, field_object_id, validation_sql, curr_val, field_size_int, validation_env_id, field_mode, flex_field_id, entry_title, parent_table_id));
		sb.append("</div>");
	}
	else if (entry_type.equals("CALCULATED")) {
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-12\" align=left style=\"white-space: nowrap;\">");
				
		
		
		
		sb.append("<div id=\"CALCDIV_for_"+field_object_id+"\" 	>");


		sb.append(
					makeCalculatedFlexField(
					conn,
					session,
					parent_table_id,
					flex_field_id,
					field_index,
					curr_val
					)
				);
				

		sb.append("<span id=warning_box_"+field_object_id+"></span>");
		
		sb.append("</div>"); //CALCDIV_
		
		sb.append("</div>"); //row
		sb.append("</div>"); //col-md-12
		
	}
	else if(entry_type.equals("MEMO")) {
		String disabled=""; 
		if (!field_mode.equals("EDITABLE")) disabled="disabled"; 
		sb.append("<textarea "+disabled+" id="+field_object_id+" rows="+field_size_int+" style=\"width:100%;  \" onchange="+validation_script+">"+codehtml(curr_val)+"</textarea>");
	}
		
		
	else if(entry_type.equals("DATE"))
		sb.append(makeDate(parent_table_id, field_object_id,curr_val,"onchange="+validation_script, field_mode));
	else if(entry_type.equals("DATETIME"))
		{
			if (curr_val.length()==0 && field_mode.equals("EDITABLE"))  curr_val="dd.mm.yyyy hh:mi:ss";
			sb.append(makeDate(parent_table_id, field_object_id,curr_val,"onchange="+validation_script, field_mode));
		}
	else if(entry_type.equals("PICKLIST"))
	{
		if (field_mode.equals("SEARCH")) {
			sb.append(makeText(field_object_id, codehtml(curr_val), " onchange="+validation_script, field_size_int, field_mode));
		} else {
			sql=validation_sql;
			bindlist.clear();
			ArrayList<String[]> source_arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
			
			ArrayList<String[]> picked_arr=new ArrayList<String[]>();
			String[] arritems=curr_val.split("\\|::\\|");
			for (int a=0;a<arritems.length;a++) {
				if (arritems[a].trim().length()==0) continue;
				picked_arr.add(new String[]{arritems[a]});
			}
			
			sb.append(makePickList(parent_table_id, field_object_id, source_arr, picked_arr, "","", field_mode));
		}
		

	}
	else if(entry_type.equals("PASSWORD"))
		sb.append(makePassword(field_object_id, codehtml(curr_val), " onchange="+validation_script, field_size_int, field_mode));
	else if(entry_type.equals("CHECKBOX")) {
		String ch_def_val="NO";
		if (field_mode.equals("SEARCH")) ch_def_val="ALL";
		sb.append(makeCheckbox(parent_table_id, field_object_id, codehtml(nvl(curr_val,ch_def_val)), " onchange="+validation_script, field_mode));
	}
		
	else if(entry_type.equals("ATTACHMENT"))
		sb.append(makeAttachment(conn, session, field_object_id, flex_field_id, parent_table_id, /*request_id*/ field_mode));
	else if(entry_type.equals("NUMBER"))
		sb.append(makeNumber(parent_table_id, field_object_id, curr_val ,validation_script, field_mode, 
				num_fixed_length, 
				num_decimal_length,
				num_grouping_char,
				num_decimal_char,
				num_currency_symbol,
				num_min_val,
				num_max_val));
	else if(entry_type.equals("TABLE"))
		sb.append(makeTableField(conn, session, flex_field_id, parent_table_id, tab_request_type_id,  field_mode));
	else 
		sb.append(makeText(field_object_id, codehtml(curr_val), " onchange="+validation_script, field_size_int, field_mode));
	
	sb.append("<span id=warning_box_"+field_object_id+"></span>");
	
	sb.append("</div>"); //col-md-4
	
	sb.append("</div>"); // row
	
	return sb.toString();
}

//***********************************************
ArrayList<String[]> decodeFormFlexFieldValues(Connection conn, HttpSession session, String str) {
	ArrayList<String[]> ret1=new  ArrayList<String[]>();
	
	String[] fields=str.split(",");
	
	for (int i=0;i<fields.length;i++) {
		String a_field=fields[i];
		int pos=a_field.indexOf("=");
		if (pos==-1) continue;
		String param_name=a_field.substring(0,pos);
		String param_val="";
		try {param_val=a_field.substring(pos+1);} catch(Exception e) {}
		 
		if (param_val.length()>0) param_val=userpassdecrypt(param_val);
		
		ret1.add(new String[]{param_name,param_val});
	}
	
	return ret1;
}
//***********************************************
String calculateFieldValue(Connection conn, HttpSession session, String flex_field_id, String values_as_str ) {
	ArrayList<String[]> values=decodeFormFlexFieldValues(conn,session,values_as_str);
	
	String sql="select calc_statement from mad_flex_field where id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",flex_field_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	StringBuilder js_code=new StringBuilder();
	
	if (arr.size()==1) js_code.append(arr.get(0)[0]);
	
	for (int p=0;p<values.size();p++) {
		String param_name=values.get(p)[0];
		String param_value=values.get(p)[1];
		int cursor=0;
		String search_param="${"+param_name.toUpperCase()+"}";
		
		while(true) {
			int pos=js_code.toString().toUpperCase().indexOf(search_param,cursor);
			if (pos==-1) break;
			js_code.delete(pos, pos+search_param.length());
			js_code.insert(pos, param_value);
			cursor+=pos+param_value.length();
		}
	}
	
	
	ScriptEngineManager factory=null;
	ScriptEngine engine=null;
	
	String ret1="";
	System.out.println("executing : \n"+js_code.toString());
	
	try {
		factory = new ScriptEngineManager();
		engine = factory.getEngineByName("JavaScript");
		ret1=""+ engine.eval(js_code.toString());
	} catch (Exception e) {
		e.printStackTrace();
		System.out.println("calculateFieldValue Exception : "+js_code.toString());
		ret1="Error!";
	}
	
	return ret1;
}
//***********************************************
String makeCalculatedFlexField(
		Connection conn, 
		HttpSession session,
		String request_id,
		String flex_field_id,
		int field_index,
		String curr_val
		) {

	String sql="select calc_data_type, calc_display_type, calc_display_format  from  mad_flex_field where id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",flex_field_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==0) return "makeCalculatedFlexField:flex field not found. Id:"+flex_field_id;
	
	String calc_data_type=arr.get(0)[0];
	String calc_display_type=arr.get(0)[1];
	String calc_display_format=arr.get(0)[2];
	
	StringBuilder sb=new StringBuilder();
	
	String field_object_id="entry_TAB"+request_id+"_flex_field_id_"+field_index;
	
	sb.append("<input type=\"hidden\" id=\""+field_object_id+"\" class=\"form-control\" value=\""+curr_val+"\">");
	
	if (calc_data_type.equals("DATETIME")) 
		sb.append(codehtml(curr_val)); 
	else if (calc_data_type.equals("NUMBER"))
		sb.append(codehtml(curr_val));
	else if (calc_data_type.equals("YESNO")) {


		
		if (calc_display_type.equals("CHECKBOX")) 
			sb.append(makeCheckbox("0", "", curr_val, "disabled"));
		else if (calc_display_type.equals("COMBOBOX")) {

			
			ArrayList<String[]> yesnoArr=new ArrayList<String[]>();
			yesnoArr.add(new String[]{"YES","Yes"});
			yesnoArr.add(new String[]{"NO","No"});
		
			sb.append(makeComboArr(yesnoArr, "x", "disabled", curr_val, 100));
		}
		else if (calc_display_type.equals("TEXT")) 
			sb.append(makeText("", codehtml(curr_val), "readonly", 0));
		else if (calc_display_type.equals("LABEL")) 
			//sb.append("<span class=\"badge\" style=\"width:100%;\">"+codehtml(curr_val)+"</span>");
			sb.append(makeText("", codehtml(curr_val), "readonly", 0));
		else 
			sb.append(codehtml(curr_val));
	}
	else {
		if (calc_display_type.equals("TEXT")) 
			sb.append(makeText("", codehtml(curr_val), "readonly", 0));
		else if (calc_display_type.equals("MEMO")) 
			sb.append("<textarea readonly rows=3 style=\"width:100%\">"+codehtml(curr_val)+"</textarea>");
		else if (calc_display_type.equals("LABEL")) 
			sb.append("<span class=\"label\" style=\"width:100%\">"+codehtml(curr_val)+"</span>");
		else 
			sb.append(codehtml(curr_val));
	}
	
	return sb.toString();
		
}
//***********************************************
String makeRequestFooter(Connection conn, HttpSession session, String request_type_id, String request_id) {
	
	StringBuilder sb=new StringBuilder();
	

	
	String sql="select request_group, flow_id, permission from mad_request_type where id=?";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",request_type_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==0) return "no such request type found";
	
	String request_group=arr.get(0)[0];
	String flow_id=nvl(arr.get(0)[1],"0");
	String required_permission=arr.get(0)[2];
	
	boolean is_form_editable=isMadRequestFormEditable(conn, session, request_id);
	
	int locking_user_id=checkRequestLock(conn,session,request_id);
	
	if (is_form_editable && locking_user_id>0) is_form_editable=false;
	
	
	
	if (locking_user_id>0) {
		sql="select concat(lname,', ',fname) from tdm_user where id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",""+locking_user_id});
		ArrayList<String[]> arrLockUser=getDbArrayConf(conn, sql, 1, bindlist);
		String locking_user_info="(Unknown)";
		
		try{locking_user_info=arrLockUser.get(0)[0];} catch(Exception e) {}
		
		sb.append("<h4>!  <span class=\"label label-warning\"> "+
		decodeStringTitle(conn, session, "Locking User ", "SYS_REQ_LOCKING_USER", true)+
		" :  <span class=badge>"+locking_user_info+"</span><span></h4><br>");

	} else {

		if (nvl(required_permission,"0").equals("0") || checkpermissionById(session, required_permission)) {
			String disabled="";
			if (!is_form_editable) disabled="disabled ";
			sb.append("<button type=\"button\" "+disabled+" class=\"btn btn-sm btn-success\" data-toggle=\"popover\" data-placement=\"bottom\" data-trigger=\"focus\"  data-content=\"OK\"  "+
				" id=btPlaceRequestBtn_"+request_id+" onclick=\"placeRequest('"+request_id+"');\"><span class=\"glyphicon glyphicon-floppy-disk\"></span> "+
				decodeStringTitle(conn, session, "Save", "SYS_REQ_FOOTER_BTN_SAVE", false)+
				" </button>");
		}

		if (!flow_id.equals("0")) {
			sb.append("<button type=\"button\" class=\"btn btn-sm btn-warning\" id=btRouteRequest_"+request_id+" onclick=\"routeRequest('"+request_id+"');\"><span class=\"glyphicon glyphicon-send\"></span> "+
					decodeStringTitle(conn, session, "Route", "SYS_REQ_FOOTER_BTN_ROUTE", false)+
					" </button>");
			
			sb.append("<button type=\"button\" class=\"btn btn-sm btn-info\" id=btRouteLogs_"+request_id+" onclick=\"showRoutingLogs('"+request_id+"');\"><span class=\"glyphicon glyphicon-film\"></span> "+
					decodeStringTitle(conn, session, "Routing History", "SYS_REQ_FOOTER_BTN_ROUTING_HISTORY", false)+
					" </button>");	
		}
		
		sb.append("<button type=\"button\" class=\"btn btn-sm btn-info\" id=btChangeLogs_"+request_id+" onclick=\"showChangeLogs('"+request_id+"');\"><span class=\"glyphicon glyphicon-film\"></span> "+
				decodeStringTitle(conn, session, "Change History", "SYS_REQ_FOOTER_BTN_CHANGE_HISTORY", false)+
				" </button>");	
		
	}
	
	
	if (request_group.equals("DEPLOYMENT")) {
		sb.append("<button type=button class=\"btn btn-sm btn-primary\" onclick=\"showMadDeployProgress('"+request_id+"')\">");
		sb.append("<span class=\"glyphicon glyphicon-share-alt\"></span>" +	decodeStringTitle(conn, session, "Show Deployment Info", "SYS_REQ_FOOTER_BTN_DEPLOYMENT_INFO", false));
		sb.append("</button>");
		
	}
	
	/*
	sb.append("<button type=\"button\" class=\"btn btn-sm btn-default\" onclick=closeRequestModal('"+request_id+"') >"+
			decodeStringTitle(conn, session, "Close", "SYS_BTN_CLOSE", false)+
			"</button>");
	*/
	
	return sb.toString();
}
//***********************************************
String makeEntryList(Connection conn, HttpSession session, String request_type_id, String request_id) {
	
	StringBuilder sb=new StringBuilder();
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select entuser, status from mad_request where id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	String request_user_id=arr.get(0)[0];
	String request_status=arr.get(0)[1];
	
	
	
	
	
	ArrayList<String[]> fexValsArr=new ArrayList<String[]>();
	
	if (!request_id.equals("0")) {
		sql="select  entry_type, flex_field_id, field_value, " + 
			"	date_format(field_value_ts,'%d.%m.%Y %H:%i:%s') field_value_ts, "+
			"	round(field_value_num,8) field_value_num " + 
			"	from mad_request_fields rf, mad_flex_field ff  where request_id=? and flex_field_id=ff.id ";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		ArrayList<String[]> farr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		for (int f=0;f<farr.size();f++) {
			String entry_type=farr.get(f)[0];
			String flex_field_id=farr.get(f)[1];
			String field_value=farr.get(f)[2];
			String field_value_ts=farr.get(f)[3];
			String field_value_num=farr.get(f)[4];
			
			
			if (entry_type.equals("DATETIME")) field_value=field_value_ts;
			else if (entry_type.equals("NUMBER")) field_value=field_value_num;
			else if (entry_type.equals("DATE")) try{field_value=field_value_ts.split(" ")[0];} catch(Exception e) {field_value=""; e.printStackTrace();}
			
			fexValsArr.add(new String[]{flex_field_id,field_value});
		}
		
	}
	
	boolean is_form_editable=isMadRequestFormEditable(conn, session, request_id);
	
	int locking_user_id=checkRequestLock(conn,session,request_id);
	
	if (is_form_editable && locking_user_id>0) is_form_editable=false;
	
	sql="select flow_state_id from mad_request_flow_logs where request_id=? and status='OPEN' ";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String flow_state_id="0";
	if (arr.size()==1) flow_state_id=arr.get(0)[0];
	
	
	sql="select flex_field_id,permission_id, overriding_key  "+
		" from mad_request_type_state_field_override "+
		" where request_type_id=? and flow_state_id=?  ";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_type_id});
	bindlist.add(new String[]{"INTEGER",flow_state_id});
	ArrayList<String[]> arrOverride=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
	
	sql="select flex_field_id, is_visible, is_editable, is_mandatory, default_value, field_parameter_name, "+
			" entry_type  "+
			" from mad_request_type_field , mad_flex_field ff"+
			" where request_type_id=? and flex_field_id=ff.id" + 
			" order by field_order";
		

	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_type_id});
	arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	boolean in_accordion=false;
	
	
	for (int i=0;i<arr.size();i++) {
		
		String flex_field_id=arr.get(i)[0];
		String is_visible=arr.get(i)[1];
		String is_editable=arr.get(i)[2];
		String is_mandatory=arr.get(i)[3];
		String default_value=arr.get(i)[4];
		String field_parameter_name=arr.get(i)[5];
		String flex_field_type=arr.get(i)[6];
		
		if (flex_field_type.equals("ACCORDION")) {
			if (in_accordion) sb.append(makeAccordion(conn, session, request_id, "","","","","END",""));
			in_accordion=true;
		}
						
		
		
		if (!is_form_editable) {
			is_editable="NO";
			is_mandatory="NO";
		} else {
			
			boolean overrided_is_visible=isKeyOverrided(conn,session,arrOverride,flex_field_id,request_user_id,"VISIBLE");
			boolean overrided_is_editable=isKeyOverrided(conn,session,arrOverride,flex_field_id,request_user_id,"EDITABLE");
			boolean overrided_is_mandatory=isKeyOverrided(conn,session,arrOverride,flex_field_id,request_user_id,"MANDATORY");
			
			if (overrided_is_visible) 
				if (is_visible.equals("YES")) is_visible="NO"; else is_visible="YES";
			
			if (overrided_is_editable) 
				if (is_editable.equals("YES")) is_editable="NO"; else is_editable="YES";
			
			if (overrided_is_mandatory) 
				if (is_mandatory.equals("YES")) is_mandatory="NO"; else is_mandatory="YES";
			
		}
		
		
		
		
		
		
		
		
		sb.append(makeFlexField(conn, session, "entry", i, request_id, flex_field_id, field_parameter_name, fexValsArr, is_mandatory,is_editable,is_visible, default_value,""));
		
		
		
	}
	
	if (in_accordion) sb.append(makeAccordion(conn, session, request_id, "","","","","END",""));
	
	
	return sb.toString();
}

//*******************************************************
String makeAccordion(
		Connection conn, 
		HttpSession session, 
		String request_id, 
		String flex_field_id, 
		String field_object_id, 
		String entry_title, 
		String string_name, 
		String part,
		String default_value
		) {
	StringBuilder sb=new StringBuilder();
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String title=decodeStringTitle(conn, session, entry_title, string_name, false);
	String collapseid=field_object_id;
	
	if (part.equals("BEGIN")) {
		sb.append("<a  data-toggle=\"collapse\" href=\"#"+collapseid+"\" data-target=\"#"+collapseid+"\" aria-expanded=\"true\" aria-controls=\""+collapseid+"\"><b>"+title+"	  >>> </b></a>");
		
		if (default_value.equals("EXPANDED"))
			sb.append("<div id=\""+collapseid+"\" class=\"collapse in\">");
		else 
			sb.append("<div id=\""+collapseid+"\" class=\"collapse\">");
		
		sb.append("<div class=\"panel panel-default\">");
		sb.append("<div class=\"panel-heading\">");
	} else {
		
		sb.append("</div>"); //panel-heading
		sb.append("</div>"); //panel 
		sb.append("</div>"); //collapse
		sb.append("<br>");
	}
	
	return sb.toString();
}


//***********************************************
boolean isKeyOverrided(
		Connection conn,
		HttpSession session,
		ArrayList<String[]> arrOverride,
		String flex_field_id,
		String request_user_id,
		String overriding_key
		) {
	int curruser=(Integer) session.getAttribute("userid");
	

	for (int i=0;i<arrOverride.size();i++) {
		String arr_flex_field_id=arrOverride.get(i)[0];
		String arr_permission_id=arrOverride.get(i)[1];
		String arr_overriding_key=arrOverride.get(i)[2];
		
		if (overriding_key.equals(arr_overriding_key) && flex_field_id.equals(arr_flex_field_id)) {
			boolean is_overrided=false;
			if (Integer.parseInt(arr_permission_id)<0) 
				is_overrided=checkPreDefinedPermissions(conn, session, arr_permission_id, request_user_id);
			else 
				is_overrided=checkpermissionById(session, arr_permission_id);
			
			if (is_overrided) return true;
			
		}
	}
	
	
	
	return false;
}



//***********************************************
boolean isMadRequestFormEditable(
		Connection conn,
		HttpSession session,
		String request_id) {
	int curruser=(Integer) session.getAttribute("userid");
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	ArrayList<String[]> arr=new ArrayList<String[]>();
	String sql="";
	
	sql="select flow_id from mad_request_type t, mad_request r where r.request_type_id=t.id and r.id=? and flow_id>0 ";
	bindlist.add(new String[]{"INTEGER",""+request_id});
	arr=getDbArrayConf(conn, sql, 1, bindlist);
	String flow_id="";
	if (arr.size()==1) flow_id=arr.get(0)[0];
	
	
	//No flows is defined. return true for the opener user
	if (flow_id.length()==0)  {
		sql="select entuser from mad_request where id=? and entuser=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",""+request_id});
		bindlist.add(new String[]{"INTEGER",""+curruser});
		arr=getDbArrayConf(conn, sql, 1, bindlist);
		if (arr.size()==0) return false;
		return true;
	}
	
	sql="select entuser from mad_request where id=? ";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",""+request_id});
	arr=getDbArrayConf(conn, sql, 1, bindlist);
	String request_user_id=arr.get(0)[0];
	
	String flow_state_id="0";
	
	sql="select flow_state_id from mad_request_flow_logs where request_id=? and flow_id=? and status='OPEN'";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",""+request_id});
	bindlist.add(new String[]{"INTEGER",""+flow_id});
	arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==1) flow_state_id=arr.get(0)[0];
	//brand new request, find state from status
	else {
		sql="select flow_state_id from mad_request_flow_logs where request_id=? and flow_id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",""+request_id});
		bindlist.add(new String[]{"INTEGER",""+flow_id});
		arr=getDbArrayConf(conn, sql, 1, bindlist);
		if (arr.size()>0) return false;
		
		//first save 
		
		sql="select id from mad_flow_state where flow_id=? and state_name='NEW'";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",""+flow_id});
		arr=getDbArrayConf(conn, sql, 1, bindlist);
		if (arr.size()==0)  {
			System.out.println("No flow state found for this request");
			return false;
		}
		
		flow_state_id=arr.get(0)[0];
		
		
	}
	
	
	
	sql="select permission_id from mad_flow_state_edit_permissions where flow_state_id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",""+flow_state_id});
	arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	


	for (int i=0;i<arr.size();i++) {
		String permission_id=arr.get(i)[0];
		if (Integer.parseInt(permission_id)<0)
			if (checkPreDefinedPermissions(conn, session, permission_id, request_user_id)) return true;
		else 
			if (checkpermissionById(session, permission_id)) return true;
	}
	
	return false;
}


//*************************************************
boolean isDeploymentTimeButtonEditable(HttpSession session, boolean is_form_editable) {
	boolean is_deployment_time_editable=false;
	
	if (is_form_editable) return true;
		
	if (checkpermissionByName(session, "DEPLOYMENT_TIME_CHANGE") || checkrole(session, "ADMIN") || checkrole(session, "MADRM"))
		return true;
		
	return false;
	
}

//***********************************************
int createUpdateRequest(Connection conn, HttpSession session, String request_id, String request_type_id, String request_description) {
	int ret1=Integer.parseInt(request_id);
	
	boolean is_editing=true;
	
	if (request_id.equals("0")) is_editing=false;
	
	String sql="";
	
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	int curruser=(Integer) session.getAttribute("userid");
	
	boolean is_editable=isMadRequestFormEditable(conn,session,request_id);
	
	session.setAttribute("is_editable_"+request_id, is_editable);
	
	if (!is_editable) return -2;
	
	if (is_editing) {
		sql="update mad_request set request_type_id=?, description=?, is_saved='YES' where id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_type_id});
		bindlist.add(new String[]{"STRING",request_description});
		bindlist.add(new String[]{"INTEGER",""+ret1});
		
		
		
		boolean is_success=execDBConf(conn, sql, bindlist);
		if (!is_success) return -1;
		
		createHistory(conn, session, "UPDATE", "mad_request", request_id);
	}
	else {
		
		sql="SELECT AUTO_INCREMENT  FROM information_schema.tables WHERE table_name = 'mad_request' AND table_schema = DATABASE( )";
		try {ret1=Integer.parseInt(getDBSingleVal(conn, sql));} catch(Exception e) {return -1;}
		
		sql="insert into mad_request (id, request_type_id, is_saved, status, description, entuser, entdate ) values (?,?,'NO','NEW',?,?,now())";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",""+ret1});
		bindlist.add(new String[]{"INTEGER",request_type_id});
		bindlist.add(new String[]{"STRING",request_description});
		bindlist.add(new String[]{"STRING",""+curruser});
		
		boolean is_success=execDBConf(conn, sql, bindlist);
		if (!is_success) return -1;
	}
	
	
	checkAndCreateRequestFlowLog(conn, session, request_type_id, ""+ret1, curruser);


	return ret1;
}

//**********************************************************
void checkAndCreateRequestFlowLog(Connection conn, HttpSession session, String request_type_id, String request_id, int curruser) {
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select flow_id from mad_request_type where id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",""+request_type_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==0) {
		System.out.println("no flow assigned to this request type "+ request_type_id);
		return;
	}
	
	String flow_id=arr.get(0)[0];
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",""+request_id});
	bindlist.add(new String[]{"INTEGER",""+flow_id});
	//check if flow step already created
	sql="select 1 from mad_request_flow_logs where request_id=? and flow_id=?";
	arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return;
	
	
	sql="select id from mad_flow_state where flow_id=? and state_name='NEW'";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",""+flow_id});
	arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==0) {
		System.out.println("no initial state (NEW) assigned to this flow "+ flow_id);
		
	} else {
		String flow_state_id=arr.get(0)[0];
		
		
		sql="insert into mad_request_flow_logs (request_id, flow_id, flow_state_id, curr_state_user, curr_state_date, status ) " + 
			" values (?, ?, ?, ?, now(),'OPEN')";
		
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",""+request_id});
		bindlist.add(new String[]{"INTEGER",""+flow_id});
		bindlist.add(new String[]{"INTEGER",""+flow_state_id});
		bindlist.add(new String[]{"INTEGER",""+""+curruser});
		
		execDBConf(conn, sql, bindlist);
	} // else if (arr.size()==0)
	
	
	
	
}

//**********************************************************
void setFlexField(Connection conn, HttpSession session, String request_id, String flex_field_id, String flex_field_value) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	boolean is_editable=true;
	try {is_editable=(Boolean) session.getAttribute("is_editable_"+request_id);} catch(Exception e) {e.printStackTrace();}
	
	if (!is_editable) return;
	
	
	sql="select rf.id, entry_type from mad_request_fields rf, mad_flex_field ff where request_id=? and flex_field_id=? and flex_field_id=ff.id";
	bindlist.add(new String[]{"INTEGER",request_id});
	bindlist.add(new String[]{"INTEGER",flex_field_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	boolean is_editing=false;
	
	
	if (arr==null) return;
	if (arr.size()==1) is_editing=true;
	
	
	if (is_editing) {
		String id=arr.get(0)[0];
		String entry_type=arr.get(0)[1];

		if (entry_type.equals("DATE") || entry_type.equals("DATETIME")) {
			sql="update mad_request_fields set field_value_ts=STR_TO_DATE(?, '%d.%m.%Y %H:%i:%s') where  id=?";
			
			bindlist.clear();
			bindlist.add(new String[]{"STRING",flex_field_value});
			bindlist.add(new String[]{"INTEGER",id});
			execDBConf(conn, sql, bindlist);
			
			createHistory(conn, session, "UPDATE", "mad_request_fields", id);
			
		} 
		else if (entry_type.equals("NUMBER")) {
			sql="update mad_request_fields set field_value_num=? where  id=?";
			
			bindlist.clear();
			bindlist.add(new String[]{"DOUBLE",flex_field_value});
			bindlist.add(new String[]{"INTEGER",id});
			execDBConf(conn, sql, bindlist);
			
			createHistory(conn, session, "UPDATE", "mad_request_fields", id);
		}
		else {
			sql="update mad_request_fields set field_value=? where  id=? ";
			
			bindlist.clear();
			bindlist.add(new String[]{"STRING",flex_field_value});
			bindlist.add(new String[]{"INTEGER",id});
			execDBConf(conn, sql, bindlist);
			
			createHistory(conn, session, "UPDATE", "mad_request_fields", id);
		}

	} else {
		
		sql="select entry_type from mad_flex_field where id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",flex_field_id});
		arr=getDbArrayConf(conn, sql, 1, bindlist);
		
		String entry_type=arr.get(0)[0];
		
		String next_val_sql="SELECT AUTO_INCREMENT FROM information_schema.tables WHERE table_name = 'mad_request_fields' AND table_schema = DATABASE()";
		String next_id=getDBSingleVal(conn, next_val_sql);
		
		if (entry_type.equals("DATE") || entry_type.equals("DATETIME")) {
			sql="insert into mad_request_fields (id, request_id, flex_field_id, field_value_ts, entuser, entdate) " + 	
					" values (?, ?, ?, STR_TO_DATE(?, '%d.%m.%Y %H:%i:%s'), ?, now())";
			bindlist.clear();
			bindlist.add(new String[]{"INTEGER",next_id});
			bindlist.add(new String[]{"INTEGER",request_id});
			bindlist.add(new String[]{"INTEGER",flex_field_id});

			bindlist.add(new String[]{"STRING",flex_field_value});
			int curruser=(Integer) session.getAttribute("userid");
			bindlist.add(new String[]{"INTEGER",""+curruser});
			execDBConf(conn, sql, bindlist);
		} else {
			sql="insert into mad_request_fields (id, request_id, flex_field_id, field_value, field_value_ts, entuser, entdate) " + 	
					" values (?, ?, ?, ?, null, ?, now())";
			bindlist.clear();
			bindlist.add(new String[]{"INTEGER",next_id});
			bindlist.add(new String[]{"INTEGER",request_id});
			bindlist.add(new String[]{"INTEGER",flex_field_id});

			bindlist.add(new String[]{"STRING",flex_field_value});
			int curruser=(Integer) session.getAttribute("userid");
			bindlist.add(new String[]{"INTEGER",""+curruser});
			execDBConf(conn, sql, bindlist);
		}
		
		createHistory(conn, session, "INSERT", "mad_request_fields", next_id);
		
	}
	
	
	
}
//********************************************************************************
void addRemoveRequestApplication(
		Connection conn,
		HttpSession session,
		String request_id,
		String addremove,
		String application_id) {
	
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	if (addremove.equals("REMOVE")) {
		sql="delete from mad_request_application where request_id=? and application_id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		bindlist.add(new String[]{"INTEGER",application_id});
		execDBConf(conn, sql, bindlist);
	} else {
		sql="insert into mad_request_application (request_id, application_id, entuser, entdate) " + 	
				" values (?, ?, ?, now())";
		int curruser=(Integer) session.getAttribute("userid");
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		bindlist.add(new String[]{"INTEGER",application_id});
		bindlist.add(new String[]{"INTEGER",""+curruser});
		execDBConf(conn, sql, bindlist);
	}
	
	
	
}



//*********************************

boolean isExistsInPackageApp(Connection conn, String package_id, String application_id, String item_path) {
	String sql="select 1 from mad_request_application_member "+
				" where request_id=? and application_id=? " + 
				" and member_path=? ";
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",package_id});
	bindlist.add(new String[]{"INTEGER",application_id});
	bindlist.add(new String[]{"STRING",item_path});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr==null || arr.size()==0) return false;
	System.out.println("returns true");
	return true;
}
//*******************************
String buildRepoTree(Connection conn, HttpSession session, ArrayList<String[]> arr, String package_id, String application_id, int tree_level) {
	StringBuilder sb=new StringBuilder();
	
	
	String sql="select item_repo_selection_type, app_repo_filter from mad_application where id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",application_id});
	ArrayList<String[]> appArr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String item_repo_selection_type="ALL";
	String app_repo_filter_regex="";
	try {item_repo_selection_type=appArr.get(0)[0];} catch(Exception e) {e.printStackTrace(); }
	
	try {
		//app_repo_filter
		String[] lines=appArr.get(0)[1].split("\n|\r");
		for (int i=0;i<lines.length;i++) {
			String a_line=lines[i];
			String par="";
			String val="";
			if (a_line.contains("=")) {
				par=a_line.split("=")[0];
				val=a_line.substring(a_line.indexOf("=")+1);
			}
			if (par.equals("NAME_FILTER")) app_repo_filter_regex=val;
		}
		
		
	} catch(Exception e) {e.printStackTrace(); }
	
	Pattern pattern = null;
	try {
		pattern=Pattern.compile(app_repo_filter_regex,Pattern.CASE_INSENSITIVE);
	} catch(Exception e) {
		System.out.println("Exception@buildRepoTree Message : " + e.getMessage());
		System.out.println("Exception@buildRepoTree Regex   : " + app_repo_filter_regex);
		e.printStackTrace();
	}
	
	for (int i=0;i<arr.size();i++) {

		
		String[] item=arr.get(i);
		int item_id=Integer.parseInt(item[0]);
		int parent_item_id=Integer.parseInt(item[1]);
		//int level =Integer.parseInt(item[2]);
		String item_name=item[3];
		String item_type=item[4];
		String item_author=item[5];
		String item_date=item[6];
		String item_path=item[7];
		String version=item[8];
		
		
		
		if (item_name.equals("..")) continue;
		if (tree_level==1 && item_name.equals(".")) continue;
		
			sb.append("<div id=tree_item_"+tree_level+"_"+item_id+">");
			String item_color="";
			String item_script="";
			if (item_type.equals("DIR")) {
				item_color="label-warning";
				item_script="onclick=\"openRepoTreeFolder('"+package_id+"','"+application_id+"','"+item_id+"','"+codehtml(item_path).replace("\\", "\\\\")+"','"+(tree_level+1)+"');\"";
			
				
			}
			
			
			boolean is_item_valid_to_regex=true;
			if (app_repo_filter_regex.trim().length()>0) {
				try {
					Matcher matcher = pattern.matcher(item_name);
					if (!matcher.find()) 
						is_item_valid_to_regex=false;
				} catch(Exception e) {
					System.out.println("Exception@buildRepoTree : " + e.getMessage());
					e.printStackTrace();
				}
			}
			
			for (int l=0;l<tree_level-1;l++)  sb.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
			if (tree_level>1)  sb.append("<font color=white>|___</font>");
			
			if (is_item_valid_to_regex && (item_type.equals(item_repo_selection_type) || item_repo_selection_type.equals("ALL"))) {
				String checked="";
				if (isExistsInPackageApp(conn, package_id, application_id, item_path)) checked="checked";
				int item_id_hash=Math.abs(item_path.hashCode());
				sb.append(
					"&nbsp;<input id=\"ch_file_"+package_id+"_"+application_id+"_"+item_id_hash+"\" "+checked+
					" type=checkbox "+
					" onclick=\"addRemoveItemOfPackagedApplication('TREE','"+package_id+"','"+application_id+"','"+codehtml(item_name)+"','"+codehtml(item_path.replace("\\", "\\\\"))+"','"+codehtml(version)+"','"+item_id_hash+"')\" "+
					" value=\""+item_id+"\">"
					);
			}
				
			
			if (item_type.equals("FILE")) {
				sb.append("<a href=\"javascript:showFileContentByUrl('"+package_id+"','"+application_id+"','"+item_path+"')\" >");
				sb.append("<font color=white size=2>"+item_name+"</font>");
				sb.append("</a>");
			}
				
			else 
				sb.append("<span class=\"badge "+item_color+"\" "+item_script+">"+item_name+"</span>");
			
			sb.append("</div>");
			
		
			sb.append("<div id=NOFADE_sub_tree_items_of_"+package_id+"_"+application_id+"_"+item_id+">");
			sb.append("</div>");

	}
	
	/*
	if (sb.length()==0) {
		for (int l=0;l<tree_level-1;l++)  sb.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
		if (tree_level>1)  sb.append("<font color=white>|___</font>");
		sb.append("<font color=white size=2>.</font>");
		
	}
	*/
	
	//sb.append("</div>");
	
	return sb.toString();

}




//****************************************************
String openRepoFolder(Connection conn, HttpSession session, String package_id, String application_id, String dir_to_open, int level) {
	StringBuilder sb=new StringBuilder();

	String sql=" select " +
			" class_name, par_hostname, par_username, "+
			" par_password, app_repo_root, app_repo_filter, "+
			" repository_name " + 
			" from  mad_application a, mad_repository r "+
			" where a.repository_id=r.id "+
			" and a.id=?";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",application_id});
	ArrayList<String[]> repoparams=getDbArrayConf(conn, sql, 1, bindlist);
	
	String className=repoparams.get(0)[0];
	String par_hostname=repoparams.get(0)[1];
	String username=repoparams.get(0)[2];
	String password=repoparams.get(0)[3];
	String app_repo_url=nvl(dir_to_open,repoparams.get(0)[4]);
	String filter=repoparams.get(0)[5];
	//make sure maxlevel=1
	filter=filter + "\n+MAXLEVEL=1";
	String repository_name=repoparams.get(0)[6];
	
	ArrayList<String[]> arr=new ArrayList<String[]>();
	
	if (className.equals("oracle.jdbc.driver.OracleDriver")) {
		return getRepoTreeFromDb(conn, session, repository_name, className, par_hostname, username, password, filter, package_id, application_id);
	}
	else {
		RepoExplorer re=new RepoExplorer();
		arr=re.getRepoTree(className,par_hostname,username,password, app_repo_url, filter);
	}
	

	String repo_content=buildRepoTree(conn, session, arr, package_id, application_id, level);
	
	if (level==1) {
		sb.append("<input type=hidden id=repo_window_package_id value="+package_id+">");
		sb.append("<input type=hidden id=repo_window_application_id value="+application_id+">");
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-12\">");
		sb.append("<h4><span class=\"label label-warning\">" + repository_name + " <span class=badge>"+par_hostname+app_repo_url + "</span></span></h4>");
		sb.append("</div>");  // col md 12
	}
	
	sb.append(repo_content);
	
	return sb.toString();
}


//****************************************************
String getRepoTreeFromDb(
		Connection conn, 
		HttpSession session, 
		String repository_name,
		String className, 
		String par_hostname, 
		String username, 
		String password, 
		String filter,
		String package_id,
		String application_id
		) {
	StringBuilder sb=new StringBuilder();
	
	ArrayList<String[]> ownerList=getSchemaList(conn, session, className,par_hostname,username,password);
	ownerList.add(0,new String[]{"PUBLIC"});
	
	ArrayList<String[]> objectTypeList=getObjectTypeList(conn, session, className,par_hostname,username,password);
	
	String curr_schema=nvl((String) session.getAttribute("dbrepo_schema_for_"+package_id+"_"+application_id),"");
	String curr_object_type=nvl((String) session.getAttribute("dbrepo_object_type_for_"+package_id+"_"+application_id),"");
	String curr_object_filter=nvl((String) session.getAttribute("dbrepo_object_filter_for_"+package_id+"_"+application_id),"");
			
	
	sb.append("<input type=hidden id=repo_window_package_id value="+package_id+">");
	sb.append("<input type=hidden id=repo_window_application_id value="+application_id+">");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\">");
	
	sb.append("<h4><span class=\"label label-warning\">" + repository_name + "</span></h4>");
	
	sb.append("<h4><span class=\"label label-info\">Schema</span></h4>");
	sb.append(makeComboArr(ownerList, "", "id=db_schema_list_for_"+package_id+" onchange=reloadDBObjectList('"+package_id+"','"+application_id+"'); ", curr_schema, 0));
	
	sb.append("<h4><span class=\"label label-info\">Object Type</span></h4>");
	sb.append(makeComboArr(objectTypeList, "", "size=10 id=db_object_type_list_for_"+package_id+"  onchange=reloadDBObjectList('"+package_id+"','"+application_id+"'); ", curr_object_type, 0));

	sb.append("<h4><span class=\"label label-info\">Filter</span></h4>");
	sb.append(makeText("db_object_filter_for_"+package_id, curr_object_filter, "onchange=reloadDBObjectList('"+package_id+"','"+application_id+"'); ", 0));

	sb.append("</div>"); 

	sb.append("<div class=\"col-md-9\"   >");
	
	sb.append("<div id=dbObjectListDivFor_"+package_id+" style=\"min-height: 350px; max-height: 350px;  overflow-y: scroll;\">");
	
	sb.append(
				getObjectListFromDbRepository(
				conn,
				session,
				package_id,
				application_id ,
				curr_schema,
				curr_object_type,
				curr_object_filter
				)
			);
			
	sb.append("</div>"); 
	
	sb.append("</div>"); 
	
	sb.append("</div>"); 
	
	
	
	return sb.toString();
}

//****************************************************
ArrayList<String[]> getSchemaList(
		Connection conn, 
		HttpSession session, 
		String className,
		String app_repo_url,
		String username,
		String password
		) {
	ArrayList<String[]> ret1=new ArrayList<String[]>();
	
	String test_sql="select 1 from dual";

	Connection connRep=getconn(className, app_repo_url, username, password, test_sql);
	
	if (connRep==null) return ret1;
	
	DatabaseMetaData md=null;
	
	ResultSet rsSchema = null;
	
	try {
		md = connRep.getMetaData();
		
		rsSchema=md.getSchemas();
		
		while(rsSchema.next()) {
			String schema_name=rsSchema.getString("TABLE_SCHEM");

			
			ret1.add(new String[]{schema_name, schema_name});
		}
		
		rsSchema.close();
		
		
	} catch (Exception e) {
		e.printStackTrace();
	} finally {
		try {md = null;} catch (Exception e) {}
		try {connRep.close();} catch (Exception e) {}

	}
	
	
	
	return ret1;
}

//****************************************************
String getObjectListFromDbRepository(
		Connection conn,
		HttpSession session,
		String package_id,
		String application_id ,
		String schema,
		String object_type,
		String object_filter
		) {
	StringBuilder sb=new StringBuilder();
	
	session.setAttribute("dbrepo_schema_for_"+package_id+"_"+application_id, schema);
	session.setAttribute("dbrepo_object_type_for_"+package_id+"_"+application_id, object_type);
	session.setAttribute("dbrepo_object_filter_for_"+package_id+"_"+application_id, object_filter);
	
	String sql=" select " +
			" r.id, class_name, par_hostname, par_username, "+
			" par_password " + 
			" from  mad_application a, mad_repository r "+
			" where a.repository_id=r.id "+
			" and a.id=?";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",application_id});
	ArrayList<String[]> repoparams=getDbArrayConf(conn, sql, 1, bindlist);
	
	String repository_id=repoparams.get(0)[0];
	String className=repoparams.get(0)[1];
	String par_hostname=repoparams.get(0)[2];
	String username=repoparams.get(0)[3];
	String password=repoparams.get(0)[4];
	
	if (object_type.equals("USER")) {
		sql="select user_id, 'USER', 'SYSTEM',username from dba_users where 1=1 ";
		if (object_filter.trim().length()>=0) 
			sql=sql+" and upper(username) like upper('%'||?||'%') ";

		bindlist.clear();
		if (object_filter.trim().length()>=0) 
			bindlist.add(new String[]{"STRING",object_filter.trim()});
	}
	else if (object_type.equals("ROLE")) {
		sql="select 0, 'ROLE', 'SYSTEM',role from dba_roles where 1=1 ";
		if (object_filter.trim().length()>=0) 
			sql=sql+" and upper(role) like upper('%'||?||'%') ";

		bindlist.clear();
		if (object_filter.trim().length()>=0) 
			bindlist.add(new String[]{"STRING",object_filter.trim()});
	}
	else {
		sql="select object_id, object_type, owner, object_name from all_objects where object_type=? and owner=? ";
		if (object_filter.trim().length()>=0) 
			sql=sql+" and upper(object_name) like upper('%'||?||'%') ";
		
		String revised_object_type=object_type;
		if (revised_object_type.equals("TABLE_DML")) revised_object_type="TABLE";
		
		bindlist.clear();
		bindlist.add(new String[]{"STRING",revised_object_type});
		bindlist.add(new String[]{"STRING",schema});
		if (object_filter.trim().length()>=0) 
			bindlist.add(new String[]{"STRING",object_filter.trim()});
		
	}
	
	String test_sql="select 1 from dual";
	ArrayList<String[]> objList=getDbArrayApp(className, par_hostname, username, password, test_sql, sql, 1000, bindlist);
	
	if (objList==null || objList.size()==0) {
		sb.append("<font color=red>No object found!</font>");
		return sb.toString();
	}
	
	sb.append("<table class=\"table table-condensed\">");

	sb.append("<tr class=info>");
	sb.append("<td></td>");
	sb.append("<td><b>Object Type</b></td>");
	sb.append("<td><b>Owner</b></td>");
	sb.append("<td><b>Object Name</b></td>");
	sb.append("<td><b>View</b></td>");
	sb.append("</tr>");
	
	

	for (int i=0;i<objList.size();i++) {
		
		String object_id=objList.get(i)[0];
		String obj_type=objList.get(i)[1];
		
		String obj_owner=objList.get(i)[2];
		String obj_name=objList.get(i)[3];
		String obj_full_name="["+obj_owner+"].["+obj_name+"]";
		String obj_full_path="["+object_type+"].["+obj_owner+"].["+obj_name+"]";

		String obj_version="0";
		
		String jscode="onclick=addRemoveItemOfPackagedApplication('TREE','"+package_id+"','"+application_id+"','"+obj_full_name+"','"+obj_full_path+"','"+obj_version+"','"+object_id+"'); ";
		
		String checked="";
		String tr_class="active";
		if (isExistsInPackageApp(conn, package_id, application_id, obj_full_path)) {
			checked="checked";
			tr_class="danger";
		}
		
		sb.append("<tr class="+tr_class+">");
		sb.append("<td class=info align=center>");
		sb.append("<input "+checked+" type=checkbox id=ch_file_"+package_id+"_"+application_id+"_"+object_id+" "+jscode+">");
		sb.append("</td>");
		sb.append("<td class=info>"+object_type+"</td>");
		sb.append("<td>"+obj_owner+"</td>");
		sb.append("<td>"+obj_name+"</td>");
		sb.append("<td><span class=\"glyphicon glyphicon-list-alt\" onclick=\"javascript:showFileContentByUrl('"+package_id+"','"+application_id+"','"+obj_full_path+"')\"></a></td>");
		sb.append("</tr>");
	}
	
	
	sb.append("</table>");
	
	
	return sb.toString();
}

//****************************************************
ArrayList<String[]> getObjectTypeList(
		Connection conn, 
		HttpSession session, 
		String className,
		String app_repo_url,
		String username,
		String password
		) {
	ArrayList<String[]> ret1=new ArrayList<String[]>();
	
	ret1.add(new String[]{"TABLE"});
	ret1.add(new String[]{"TABLE_DML"});
	ret1.add(new String[]{"INDEX"});
	ret1.add(new String[]{"VIEW"});
	ret1.add(new String[]{"PROCEDURE"});
	ret1.add(new String[]{"SEQUENCE"});
	ret1.add(new String[]{"FUNCTION"});
	ret1.add(new String[]{"PACKAGE"});
	ret1.add(new String[]{"PACKAGE BODY"});
	ret1.add(new String[]{"TRIGGER"});
	ret1.add(new String[]{"TYPE"});
	ret1.add(new String[]{"TYPE BODY"});
	ret1.add(new String[]{"SYNONYM"});
	ret1.add(new String[]{"USER"});
	ret1.add(new String[]{"ROLE"});
	
	return ret1;
}

//****************************************************
int addItemToApplication(Connection conn, HttpSession session, String package_id, String application_id, String item_name, String item_path, String version) {
	String sql="";
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	bindlist.add(new String[]{"INTEGER",package_id});
	bindlist.add(new String[]{"INTEGER",application_id});
	
	sql="select max(member_order) from mad_request_application_member "+
		" where request_id=? and application_id=?";
	
	int item_order=1;
	try {item_order=Integer.parseInt(getDbArrayConf(conn, sql, 1, bindlist).get(0)[0])+1;} catch(Exception e) {item_order=1;}
	
	
	
	sql="select * from mad_request_application_member " + 
		" where request_id=? and application_id=? and member_name=? and member_path=?";
	
	bindlist.add(new String[]{"STRING",item_name});
	bindlist.add(new String[]{"STRING",item_path});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr!=null && arr.size()==1) return -1;
	
	String next_val_sql="SELECT AUTO_INCREMENT FROM information_schema.tables WHERE table_name = 'mad_request_application_member' AND table_schema = DATABASE()";
	String next_id=getDBSingleVal(conn, next_val_sql);
	
	
	sql="insert into mad_request_application_member " + 
			" (id, request_id, application_id, member_name, member_path, member_version, member_order, entuser, entdate) "+
			" values (?,?,?,?,?,?,?,?,now())";
	
	
	
	int curruser=(Integer) session.getAttribute("userid");
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",""+next_id});
	bindlist.add(new String[]{"INTEGER",""+package_id});
	bindlist.add(new String[]{"INTEGER",""+application_id});
	bindlist.add(new String[]{"STRING",item_name});
	bindlist.add(new String[]{"STRING",item_path});
	bindlist.add(new String[]{"INTEGER",""+version});
	bindlist.add(new String[]{"INTEGER",""+item_order});
	bindlist.add(new String[]{"STRING",""+curruser});
	
	
	
	execDBConf(conn, sql, bindlist);
	
	createHistory(conn, session, "INSERT", "mad_request_application_member", next_id);
	
	return 0;
}


//****************************************************
int removeItemFromApplication(Connection conn, HttpSession session, String package_id, String application_id, String item_name, String item_path, String version) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	bindlist.add(new String[]{"INTEGER",package_id});
	bindlist.add(new String[]{"INTEGER",application_id});
	bindlist.add(new String[]{"STRING",item_name});
	bindlist.add(new String[]{"STRING",item_path});
	
	
	
	String del_sql="select id from mad_request_application_member "+
						" where request_id=? and application_id=? and member_name=? and member_path=?";
	ArrayList<String[]> delArr=getDbArrayConf(conn, del_sql, Integer.MAX_VALUE, bindlist);
	for (int h=0;h<delArr.size();h++) {
		String del_id=delArr.get(h)[0];
		createHistory(conn, session, "DELETE", "mad_request_application_member", del_id);
	}

	
	sql="delete from mad_request_application_member " + 
			" where  request_id=? and application_id=? and member_name=? and member_path=? ";
	
	execDBConf(conn, sql, bindlist);
	
	return 0;
}

//****************************************************
String getItemsInApplication(Connection conn, HttpSession session, String package_id, String application_id, boolean is_form_editable) {
	
	StringBuilder sb=new StringBuilder();
	
	String sql="select " +
			" m.id, m.member_name, m.member_path, m.member_version, m.member_tag_info, m.member_memo, m.member_order " + 
			" from mad_request_application_member m  " + 
			" where request_id=? " + 
			" and application_id=? " + 
			" order by member_order";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",package_id});
	bindlist.add(new String[]{"INTEGER",application_id});

	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);

	sql="select item_view_script from mad_application where id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",application_id});
	ArrayList<String[]> apparr=getDbArrayConf(conn, sql, 1, bindlist);
	String item_view_script="";
	if (apparr.size()==1) item_view_script=apparr.get(0)[0].trim();
	
	
	sb.append("<table class=table>");

	sb.append("<tr class=active>");
	
	sb.append("<td colspan=2>");
	if (is_form_editable) {
		
		sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:fillRepo('"+package_id+"','"+application_id+"');\">");
		sb.append("<span class=\"glyphicon glyphicon-plus\"></span> "+decodeStringTitle(conn, session, "Add Items From Repository", "SYS_PACK_BTN_ADD_FROM_REPO", false));
		sb.append("</button>");
		
		
	}
	sb.append("</td>");
	
	sb.append("<td><span class=\"label label-warning\">"+decodeStringTitle(conn, session, "Version", "SYS_MEMBER_TITLE_VERSION", false)+"</span></td>");
	sb.append("<td><span class=\"label label-warning\">"+decodeStringTitle(conn, session, "Tag", "SYS_MEMBER_TITLE_TAG", false)+"</span></td>");
	sb.append("<td><span class=\"label label-warning\">"+decodeStringTitle(conn, session, "Full Path", "SYS_MEMBER_TITLE_PATH", false)+"</span></td>");
	
	sb.append("</tr>");
	
	int prev_id=0;
	int curr_id=0;
	int next_id=0;
	
	for (int i=0;i<arr.size();i++) {
		String member_id=arr.get(i)[0];
		String member_name=arr.get(i)[1];
		String member_path=arr.get(i)[2];
		String member_version=nvl(arr.get(i)[3],"-");
		String member_tag_info=arr.get(i)[4];
		String member_memo=arr.get(i)[5];
		String member_order=arr.get(i)[6];
		
		
		
		try {prev_id=Integer.parseInt(arr.get(i-1)[0]);} catch(Exception e) {prev_id=curr_id;}
		try {curr_id=Integer.parseInt(arr.get(i)[0]);} catch(Exception e) {curr_id=0;}
		try {next_id=Integer.parseInt(arr.get(i+1)[0]);} catch(Exception e) {next_id=curr_id;}
		
		String member_actions="";
		int item_id_hash=Math.abs(member_path.hashCode());
		
		member_actions=member_actions+
				"<font color=red>" +
				"<span class=\"glyphicon glyphicon-remove\" "+
				" onclick=\"addRemoveItemOfPackagedApplication('TABLE','"+package_id+"','"+application_id+"','"+codehtml(member_name)+"','"+codehtml(member_path.replace("\\", "\\\\"))+"','"+codehtml(member_version)+"','"+item_id_hash+"')\" >" + 
				"</span></font> ";		
		
				
		int item_id=Math.abs(member_path.hashCode());
		sb.append("<input type=hidden id=\"file_in_pack_"+package_id+"_"+application_id+"_"+item_id+"\"");
		
		String reorder_options="";
		
		reorder_options=reorder_options+ 
		"<font color=blue>"+
		"<span class=\"glyphicon glyphicon-arrow-up\" onclick=\"reorderItemOfPackagedApplication('"+package_id+"','"+application_id+"','"+curr_id+"','"+prev_id+"')\"></span>"+
		"</font> ";
		
		reorder_options=reorder_options+ 
				"<font color=blue>" +
				"<span class=\"glyphicon glyphicon-arrow-down\" onclick=\"reorderItemOfPackagedApplication('"+package_id+"','"+application_id+"','"+curr_id+"','"+next_id+"')\"></span>"+
				"</font> ";
					
		
		
		String checkout_status="<font color=green><span class=\"glyphicon glyphicon-check\" onclick=\"javascript:showCheckOutHistory('"+application_id+"','"+member_path+"'); \"></span></font>";
		boolean ischeckedOut=getCheckOutStatus(conn, session, application_id,member_path); 
		if (ischeckedOut)
			checkout_status="<font color=red><span class=\"glyphicon glyphicon-edit\"  onclick=\"javascript:showCheckOutHistory('"+application_id+"','"+member_path+"'); \"></span></font>";
		
		sb.append("<tr>");
		sb.append("<td nowrap class=active align=center>");
		if (is_form_editable) 
			sb.append(member_actions + reorder_options);
		sb.append("</td>");
		
		String view_member_name=member_name;
		
		if (item_view_script.length()>0)
			view_member_name=getMemberItemView(
					member_path,
					member_name,
					member_version,
					item_view_script
					);
		
		sb.append("<td nowrap class=active>");
		sb.append(checkout_status);
		sb.append(" <a href=\"javascript:showFileContent('"+package_id+"','"+member_id+"','"+member_version+"','-1')\">"+view_member_name+"</td>");
		sb.append("</td>");
		
		sb.append("<td nowrap>"+member_version+"</td>");

		
		String tag_js="showTagList('"+application_id+"','"+curr_id+"','"+member_tag_info+"','"+member_version+"')";
		
		sb.append("<td nowrap>");
		
		if(is_form_editable) {
			if (member_tag_info.length()==0) 
				sb.append("<span class=\"glyphicon glyphicon-tag\" onclick="+tag_js+"></span>");
			else 
				sb.append("<a href=\"javascript:"+tag_js+"\"><span class=badge>"+member_tag_info+"</span></a>");
		} else 
			sb.append(member_tag_info);
		
		
		sb.append("</td>");
		
		
		
		sb.append("<td nowrap>");
		sb.append(makeText("", member_path, " readonly ", 0));
		sb.append("</td>");
		
		
		
		
		sb.append("</tr>");
	}
	
	sb.append("</table>");
	
	return sb.toString();
	
}
//*************************************************************
boolean getCheckOutStatus(Connection conn, HttpSession session, String application_id, String member_path) {
	String sql="select repository_id from mad_application where id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",application_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr==null || arr.size()==0) {
		System.out.println("Exception@getCheckOutStatus: repository id not found for application "+application_id);
		return false;
	}
	
	String repository_id=arr.get(0)[0];
	
	
	
	sql="select 1 from mad_checkout_log "+
		" where repository_id=? and member_path=? and status='OPEN'";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",repository_id});
	bindlist.add(new String[]{"STRING",member_path});
	arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr==null || arr.size()==0) return false;
	
	return true;
	
}

//*************************************************************
void reorderItemsInApplication(Connection conn, HttpSession session, String id1, String id2) {
	String sql="select member_order from mad_request_application_member  where id=? " + 
		" union all " + 
		"select member_order from mad_request_application_member  where id=? ";

	

	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",id1});
	bindlist.add(new String[]{"INTEGER",id2});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 2, bindlist);
	if (arr==null || arr.size()<2) {
		return;
	}
	String member_order1=arr.get(1)[0];
	String member_order2=arr.get(0)[0];
	
	sql="update mad_request_application_member set member_order=? where id=?";
	
	
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",member_order1});
	bindlist.add(new String[]{"INTEGER",id1});
	
	createHistory(conn, session, "UPDATE", "mad_request_application_member", id1);
	
	execDBConf(conn, sql, bindlist);
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",member_order2});
	bindlist.add(new String[]{"INTEGER",id2});
	
	createHistory(conn, session, "UPDATE", "mad_request_application_member", id2);
	
	execDBConf(conn, sql, bindlist);
	
}

//**************************************************************
String makeMadRequestTypePicker(Connection conn, HttpSession session, String request_group) {
	StringBuilder sb=new StringBuilder();
	String sql="";
	
	ArrayList<String[]> requestTypeList=getPackageTypeList(conn, session, request_group, false);
	
	if (requestTypeList.size()==0) {
		sb.append("<span class=\"label label-warning\">No allowed request type found</span>");
		return sb.toString();
	}
	
	sb.append("<input type=hidden id=adding_request_group value=\""+request_group+"\">");
	

	
	sb.append("<div class=row>");
	
	
	sb.append("<div class=\"col-md-4\" align=center>");
	sb.append("<img src=\"img/mad/"+request_group+".png\" width=150 height=150>");
	sb.append("</div>");
	
	sb.append("<div class=\"col-md-8\">");
	sb.append("<h4><span class=\"label label-warning\">"+request_group+"</span></h4>");
	sb.append("<br>");
	
	sb.append("<table class=\"table table-condensed table-striped\">");
	
	for (int i=0;i<requestTypeList.size();i++) {
		String request_type_id=requestTypeList.get(i)[0];
		String request_type_name=requestTypeList.get(i)[1];
		
		sb.append("<tr>");
		sb.append("<td>");
		sb.append("<button type=button class=\"btn btn-sm btn-success\" style=\"width:100%;\" onclick=\"createMadRequestDo('"+request_type_id+"','"+clearHtml(request_group)+"');\">");
		sb.append("<span class=\"glyphicon glyphicon-plus\"></span> ");
		sb.append(request_type_name);
		sb.append("</button>");
		sb.append("</td>");
		sb.append("</tr>");
	}
	sb.append("</table>");
	//sb.append(makeComboArr(requestTypeList, "", "size=1 id=adding_request_type_id", "", 0));
	sb.append("</div>");
	

	
	sb.append("</div>");
	
	
	return sb.toString();
}


//**************************************************************
String makeNewMadRequest(Connection conn, HttpSession session, 
		String request_group, String request_type_id, String main_request_id) {
	String request_id="0";
	String sql="";
	
	boolean is_allowed=false;
	boolean get_all=false;
	if (!main_request_id.equals("0")) get_all=true;
	ArrayList<String[]> requestTypeList=getPackageTypeList(conn, session, request_group, get_all);
	
	for (int i=0;i<requestTypeList.size();i++) {
		if (requestTypeList.get(i)[0].equals(request_type_id)) {
			is_allowed=true;
			break;
		}
	}
	
	if (!is_allowed) {
		return "-1";
	}
	sql="SELECT AUTO_INCREMENT FROM information_schema.tables  WHERE table_name = 'mad_request'  AND table_schema = DATABASE() ";
	
	request_id=nvl(getDBSingleVal(conn, sql),request_id);
	
	
	
	sql="insert into mad_request (id, request_type_id, status, entuser, entdate )  values (?, ?, ?, ?, now())";
	
	int curruser=(Integer) session.getAttribute("userid");
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",request_id});
	bindlist.add(new String[]{"INTEGER",request_type_id});
	bindlist.add(new String[]{"STRING","NEW"});
	bindlist.add(new String[]{"INTEGER",""+curruser});
	
	boolean is_ok=execDBConf(conn, sql, bindlist);
	
	if (!is_ok) return "0";
	
	
	if (!main_request_id.equals("0")) {
		String next_val_sql="SELECT AUTO_INCREMENT FROM information_schema.tables WHERE table_name = 'mad_request_link' AND table_schema = DATABASE()";
		String next_id=getDBSingleVal(conn, next_val_sql);
		
		sql="insert into mad_request_link (id, request_id, linked_request_id, entuser, entdate) values (?, ?, ?, ?, now())";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",next_id});
		bindlist.add(new String[]{"INTEGER",main_request_id});
		bindlist.add(new String[]{"INTEGER",request_id});
		bindlist.add(new String[]{"INTEGER",""+curruser});
		
		execDBConf(conn, sql, bindlist);
		
		createHistory(conn, session, "INSERT", "mad_request_link", next_id);
		
		
	}
	
	return request_id;
}


//**************************************************************
String makeDeploymentSlotButton(Connection conn, String request_id, boolean is_editable) {
	StringBuilder sb=new StringBuilder();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String sql="select deployment_slot_id, deployment_slot_detail_id, "+
				" DATE_FORMAT(deployment_date,?) deployment_date " +
				" from mad_request where id=?";
	bindlist.clear();
	bindlist.add(new String[]{"STRING",mysql_format});
	bindlist.add(new String[]{"INTEGER",request_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==0) return "no deployment info found";
	
	
	String deployment_slot_id=arr.get(0)[0];
	String deployment_slot_detail_id=arr.get(0)[1];
	String deployment_date=arr.get(0)[2];
	
	String suffix="";
	
	if (deployment_slot_detail_id.length()>0) {
		sql="select m.slot_type, d.slot_name, d.hourly_day_id  " +
			" from mad_deployment_slot_detail d, mad_deployment_slot m "+
			" where d.slot_id=m.id and d.id=?";
					
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",deployment_slot_detail_id});
		
		arr=getDbArrayConf(conn, sql, 1, bindlist);
		
		if (arr.size()==1) {
			String slot_type=arr.get(0)[0];
			String slot_name=arr.get(0)[1];
			int hourly_day_id=Integer.parseInt(arr.get(0)[2]);

			if (slot_type.equals("HOURLY")) {
				String[] days=new String[]{"Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"};
				suffix=days[hourly_day_id];
			}
			else if (slot_type.equals("FREE")) {
				suffix="";
			}
			else 
				suffix=slot_name;
			
		}

		
	}
	
	String deployment_slot_str="<span class=\"glyphicon glyphicon-calendar\"></span>  <span class=badge>"+deployment_date + "</span>"+
								" <span class=\"glyphicon glyphicon-info-sign\"></span>  <span class=\"badge\">"  + suffix+ "</span>";
	
	String deployment_date_disabled="";
	if (!is_editable)  deployment_date_disabled="disabled";
	
	sb.append("<button "+deployment_date_disabled+" type=button class=\"btn btn-sm btn-primary\" onclick=\"setDeploymentSlot('"+request_id+"')\">");
	sb.append(deployment_slot_str);
	sb.append("</button>");
	
	
	
	return sb.toString();
}
//**************************************************************
int checkRequestLock(Connection conn,HttpSession session, String request_id) {
	
	int curruser=(Integer) session.getAttribute("userid");
	
	String sql="select lock_user_id from mad_request_lock " + 
			" where request_id=? and lock_user_id!=? "+
			" and lock_date>date_sub(now(), INTERVAL 40 SECOND)";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",request_id});
	bindlist.add(new String[]{"INTEGER",""+curruser});
		
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr!=null && arr.size()==1) return Integer.parseInt(arr.get(0)[0]);
			
	return 0;
}

//**************************************************************
void lockRequest(Connection conn, HttpSession session, String request_id) {
	int locking_user_id=checkRequestLock(conn,session,request_id);
	int curruser=(Integer) session.getAttribute("userid");
	
	//the request is locked by other users
	if (locking_user_id>0) return;
	
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="delete from mad_request_lock where request_id=?";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	
	execDBConf(conn, sql, bindlist);
	
	sql="insert into mad_request_lock values (?,?, now())";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	bindlist.add(new String[]{"INTEGER",""+curruser});
	execDBConf(conn, sql, bindlist);
	
	
	
}
//**************************************************************
void sendLockRequest(Connection conn, HttpSession session, String lock_request_ids) {
	String[] arr=lock_request_ids.split(",");
	for (int i=0;i<arr.length;i++) {
		if (arr[i].length()>0) continue;
		int locking_user_id=checkRequestLock(conn,session,arr[i]);
		if (locking_user_id>0)
			lockRequest(conn,session,arr[i]);
	}
}

//**************************************************************
void removeLockForRequest(Connection conn, HttpSession session, String request_id) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="delete from mad_request_lock where request_id=?";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	
	execDBConf(conn, sql, bindlist);
}
//**************************************************************
String formMakerForRequest(Connection conn, HttpSession session, String request_group, String request_id) {
	
	StringBuilder sb=new StringBuilder();
	
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String request_type_id="";
	String description="";
	String status="";
	String entuser_id="";
	String entuser_name="";
	String deployment_slot_detail_id="";
	String is_saved="";
	String creation_date="";
	
	
	
	sql="select "+
		" request_type_id, description, status, entuser, deployment_slot_detail_id, is_saved, date_format(entdate,?) creation_date  "+
		" from mad_request where id=?";
	bindlist.clear();
	bindlist.add(new String[]{"STRING",mysql_format});
	bindlist.add(new String[]{"INTEGER",request_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	
	if (arr!=null && arr.size()>0) {
		 request_type_id=arr.get(0)[0];
		 description=arr.get(0)[1];
		 status=arr.get(0)[2];
		 entuser_id=arr.get(0)[3];
		 deployment_slot_detail_id=arr.get(0)[4];
		 is_saved=arr.get(0)[5];
		 creation_date=arr.get(0)[6];
		
		sql="select concat(fname,' ',lname) from tdm_user where id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",entuser_id});
		arr=getDbArrayConf(conn, sql, 1, bindlist);
		if (arr.size()==1) entuser_name=arr.get(0)[0];
	}
	
	
	boolean is_form_editable=isMadRequestFormEditable(conn, session, request_id);
	
	int locking_user_id=checkRequestLock(conn,session,request_id);
	
	if (locking_user_id==0) lockRequest(conn, session, request_id);
	
	
	//if the request is locked, set editable to false;
	if (is_form_editable && locking_user_id>0) is_form_editable=false;
	
	
	
	
	
	String main_request_id="0";
	String main_request_group="x";
	
	sql="select lnk.request_id, rt.request_group " + 
		" from mad_request_link lnk, mad_request r, mad_request_type rt " +
		" where " + 
		" lnk.request_id=r.id and r.request_type_id=rt.id " +
		" and linked_request_id=? ";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	ArrayList<String[]> mainRArr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (mainRArr.size()==1) {
		main_request_id=mainRArr.get(0)[0];
		main_request_group=mainRArr.get(0)[1];
		} 
	
	
	sb.append("<input type=hidden id=main_request_id_of_"+request_id+ " value=\""+main_request_id+"\">");
	sb.append("<input type=hidden id=is_saved_of_"+request_id+ " value=\""+is_saved+"\">");

	sb.append("<table class=\"table table-condensed\">");


	if (!main_request_id.equals("0") && request_group.equals("REQUEST")) {
		sb.append("<tr>");
		sb.append("<td align=right>");
		sb.append(decodeStringTitle(conn, session, "Parent Requests", "SYS_REQ_REQUEST_PARENT_REQUESTS", false));
		sb.append("</td>");
		sb.append("<td>");
		sb.append(" <a href=\"javascript:listOfParentRequests('"+request_id+"');\"><font color=blue><span class=\"glyphicon glyphicon-share-alt\"></span></font></a>");
		sb.append("</td>");
		sb.append("</tr>");
		//if it has parent form, editable status is calculated based on main form id
		is_form_editable=isMadRequestFormEditable(conn, session, main_request_id);
		
		locking_user_id=checkRequestLock(conn,session,main_request_id);
		//if (locking_user_id==0) lockRequest(conn, session, main_request_id);
		
		if (is_form_editable && locking_user_id>0) is_form_editable=false;
	}
	
	sb.append("<tr>");
	
	sb.append("<td align=right>");
	sb.append("<b>");
	sb.append(decodeStringTitle(conn, session, "Type", "SYS_REQ_REQUEST_TYPE", false));
	sb.append(" : ");
	sb.append("</b>");
	sb.append("</td>");
	
	ArrayList<String[]> requestTypeList=getPackageTypeList(conn, session, request_group, false);
	
	if (!request_type_id.equals("0")) {
		sql="select request_type from mad_request_type where id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_type_id});
		arr=getDbArrayConf(conn, sql, 1, bindlist);
		String request_type_name=arr.get(0)[0];
		sb.append("<td>");
		sb.append("<input type=hidden id=request_type_"+request_id+" value=\""+request_type_id+"\">");
		sb.append(makeText("request_type_title", request_type_name, " disabled ", 0));
		sb.append("</td>");
	}
	else {
		sb.append("<td>");
		sb.append(makeComboArr(requestTypeList, "", " id=request_type_"+request_id+" onchange=makeEntryList()", request_type_id, 0));
		sb.append("</td>");
	}
		
	sb.append("</tr>");
	


	sb.append("<tr>");
	sb.append("<td align=right>");
	sb.append("<font color=red><b>");
	sb.append(decodeStringTitle(conn, session, "Description", "SYS_REQ_DESCRIPTION", false));
	sb.append("</b></font>");
	sb.append("</td>");
	
	sb.append("<td>");
	String disabled_desc="";
	if (!is_form_editable) disabled_desc="disabled";
	sb.append(makeText("deployment_description_"+request_id, codehtml(description), disabled_desc+ "  onchange=validateAllRequestFlexFields('"+request_id+"'); placeholder=\"Enter Description Here...\" ", 0));
	sb.append("</td>");
	
	
	
	sb.append("<tr>");
	sb.append("<td align=right>");
	sb.append("<b>");
	sb.append(decodeStringTitle(conn, session, "Created", "SYS_REQ_CREATED_BY", false));
	sb.append(" : </b>");
	sb.append("</td>");
	
	sb.append("<td>");
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	sb.append("<span class=badge>  "+entuser_name+"</span> ");
	sb.append("@ <span class=badge>  "+creation_date+"</span> ");

	
	sb.append("</div>");

	
	sb.append("<tr>");
	sb.append("<td align=right>");
	sb.append("<b>");
	sb.append(decodeStringTitle(conn, session, "Flow Status", "SYS_REQ_FLOW_STATUS", false));
	sb.append(" : ");
	sb.append("</b>");
	sb.append("</td>");
	sb.append("<td>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	sb.append("<span class=badge>"+status+"</span>");
	sb.append("</div>");
	sb.append("</div>");

	sb.append("</td>");
	
	
	sb.append("</tr>");
	
	
	
	
	sb.append("<tr>");
	sb.append("<td colspan=2>");
	sb.append("<div id=entryListDiv_"+request_id+">");
	sb.append("<div>");
	sb.append("</td>");
	sb.append("</tr>");
	
	sb.append("</table>");
	
	
	
	
	
	
	
	if (request_group.equals("PACKAGE") ) {
		
		//sql="select id, application_name from mad_application where is_valid='YES' order by 2";
		//ArrayList<String[]> source_arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, new ArrayList<String[]>());
		ArrayList<String[]> source_arr=getApplicationList(conn, session, false, request_id);
		
		
		
		sql="select application_id, application_name "+
			"	from mad_request_application a, mad_application b"+
			"	where a.application_id=b.id and request_id=?"+
			"	order by 2";
		
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		ArrayList<String[]> target_arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		String fire_event="javascript:addRemoveRequestApplication(\""+request_id+"\",\"#\");";
		String field_mode="EDITABLE";
		
		if (!is_form_editable) {
			fire_event="";
			field_mode="READONLY";
		}
		
		
		String picklist_title_for_app=decodeStringTitle(conn, session, "Application(s) in the package : ", "SYS_PACK_PICK_ADD_APPLICATION", false);
		
		sb.append(makePickList("0","package_app_selection_"+request_id, source_arr, target_arr,picklist_title_for_app,fire_event, field_mode));
		
		sb.append("<div id=applicationRepoConfigDiv_REQUEST"+request_id+">");
		sb.append(makeApplicationRepoConfig(conn,session,request_id, is_form_editable));
		sb.append("</div>");
		
	} //if (request_group.equals("PACKAGE"))

		
	if (request_group.equals("DEPLOYMENT") ) {
		
		ArrayList<String[]> envList=getEnvironmentList(conn, session, request_id);
		String curr_env_id="0";
		sql="select environment_id from mad_request_app_env where request_id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		try {curr_env_id=getDbArrayConf(conn, sql, 1, bindlist).get(0)[0];} catch(Exception e) {curr_env_id="0";}
		
		boolean is_deployment_time_editable=isDeploymentTimeButtonEditable(session, is_form_editable);
		
		
		//************************************
		
		sb.append("<div class=row>");
		
		sb.append("<div align=right class=\"col-md-2\">");
		sb.append("<b>");
		sb.append(decodeStringTitle(conn, session, "TARGET ENVIRONMENT", "SYS_REQ_TARGET_ENVIRONMENT", false));
		sb.append(" : </b>");
		sb.append("</div>");
		
		sb.append("<div class=\"col-md-4\">");
		

		
		
		sql="select environment_name from mad_environment where id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",curr_env_id});
		arr=getDbArrayConf(conn, sql, 1, bindlist);
		String environment_name="";
		if (arr.size()==1) environment_name=arr.get(0)[0];
		
		sb.append("<input type=hidden id=environment_id_"+request_id+" value=\""+curr_env_id+"\">");

		sb.append("<input disabled style=\"width:80%;\" type=text id=environment_id_title_"+request_id+" value=\""+codehtml(environment_name)+"\">");
		
		if (is_form_editable) {
			sb.append("<a href=\"javascript:makeRequestEnvList('"+request_id+"')\">");
			sb.append(" <font color=blue><span class=\"glyphicon glyphicon-share-alt\"></span></font>");
			sb.append("</a>");
		}
		
		sb.append("</div>");
		
		
		sb.append("<div align=right class=\"col-md-2\">");
		sb.append("<b>");
		sb.append(decodeStringTitle(conn, session, "DEPLOMENT TIME", "SYS_REQ_DEPLOYMENT_TIME", false));
		sb.append(" : </b>");
		sb.append("</div>");
		
		sb.append("<div class=\"col-md-4\" id=deploymentDateDiv"+request_id+">");
		
		sb.append(makeDeploymentSlotButton(conn, request_id,is_deployment_time_editable));
		sb.append("</div>");
		
		sb.append("</div>"); //row



		//************************************
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-12\">");
		sb.append("<b>");
		sb.append(decodeStringTitle(conn, session, "PACKAGES TO DEPLOY", "SYS_REQ_PACKAGES_TO_DEPLOY", false));
		sb.append(" : </b>");
		
		
		if (is_form_editable) {
			
			
			sb.append("<table class=\"table table-condensed\">");
			sb.append("<tr>");
			
			sb.append("<td bgcolor=\"white\" align=left><input type=checkbox id=ch_pack_all_"+request_id+" onclick=packinRequestSelectDeselectAll('"+request_id+"')></td>");

			
			sb.append("<td>");
			sb.append(
					" <button type=button  class=\"btn btn-sm btn-success\" onclick=addPackageToRequest('"+request_id+"')>"+
						"<span class=\"glyphicon glyphicon-plus\"> Add Package(s) </span>"+
					"</button>"
				);
			
			
			sb.append(
					" <button type=button class=\"btn btn-sm btn-danger\" onclick=removePackagesFromRequest('"+request_id+"')>"+
						"<span class=\"glyphicon glyphicon-remove\"> Remove Package(s)</span>"+
					"</button>"
				);
			
			sb.append("</td>");
			sb.append("</tr>");
			
			
			sb.append("</table>");
		}
		
		
		
		
		sb.append("<div id=NOFADE_deploymentPackLinkedDiv_"+request_id+"  style=\"min-height: 0px; max-height: 200px; overflow-y: scroll; \">");
		sb.append(writeDeploymentPackagesInRequest(conn,session,request_id, is_form_editable));
		sb.append("</div>");
		sb.append("</div>");
		sb.append("</div>"); //row
		
		
		
		//************************************

		
		sb.append("<div class=\"row\">");

		
		sb.append("<div class=\"col-md-12\">");


		sb.append("<div role=tabpanel>");
		sb.append("<ul class=\"nav nav-pills\" role=tablist>");
		
		sb.append("<li role=presentation>");
		sb.append("<a href=\"#appsindev_"+request_id+"\" aria-controls=\"appsindev_"+request_id+"\" data-toggle=tab>"+decodeStringTitle(conn, session, "Applications", "SYS_REQ_DEPLOYMENT_APPLICATIONSS", false)+"</a>");
		sb.append("</li>");
		
		sb.append("<li role=presentation class=active>");
		sb.append("<a href=\"#ordering_"+request_id+"\" aria-controls=\"ordering_"+request_id+"\" data-toggle=tab>"+decodeStringTitle(conn, session, "Items to Deploy", "SYS_REQ_DEPLOYMENT_ITEMS", false)+"</a>");
		sb.append("</li>");

		sb.append("<li role=presentation>");
		sb.append("<a href=\"#targettings_"+request_id+"\" aria-controls=\"targettings_"+request_id+"\" data-toggle=tab>"+decodeStringTitle(conn, session, "Platforms and Parameters", "SYS_REQ_DEPLOYMENT_PLATFORMS", false)+"</a>");
		sb.append("</li>");
		
		
		sb.append("</ul>");
		
		sb.append("<div class=\"tab-content\">");

		
		sb.append("<div role=tabpanel class=\"tab-pane\" id=appsindev_"+request_id+"  style=\"min-height: 400px; max-height: 400px; overflow-y: scroll; \">");
		sb.append("<div  id=NOFADE_applicationsInReqDiv_"+request_id+">");
		sb.append(writeApplicationsInRequest(conn, session, request_id, is_form_editable));
		sb.append("</div>"); 
		sb.append("</div>"); //tabpanel
		
		sb.append("<div role=tabpanel class=\"tab-pane active\" id=ordering_"+request_id+"  style=\"min-height: 400px; max-height: 400px; overflow-y: scroll; \">");
		sb.append("<div  id=NOFADE_deplomentOrderingDiv_"+request_id+">");
		sb.append(writeRequestDeploymentList(conn,session,request_id, is_form_editable));
		sb.append("</div>"); 
		sb.append("</div>"); //tabpanel

		
		sb.append("<div role=tabpanel class=\"tab-pane\" id=targettings_"+request_id+"  style=\"min-height: 400px; max-height: 400px; overflow-y: scroll; \">");
		sb.append("<div  id=NOFADE_appEnvTargetDiv_"+request_id+">");
		sb.append(writeRequestAppEnvLink(conn,session,request_id, is_form_editable));
		sb.append("</div>"); 
		sb.append("</div>");//tabpanel
		
		
		
		
		sb.append("</div>"); //div class=tab-content
		
		sb.append("</div>"); //div role=tabpanel	
	} //if (request_group.equals("DEPLOYMENT"))
	
	
	
	
	sb.append("</div>"); // col-md-8
	
	
	sb.append("</div>"); //row
	
	return sb.toString();
}


//****************************************************************
String writeApplicationsInRequest(Connection conn, HttpSession session, String request_id, boolean is_form_editable) {
	StringBuilder sb=new StringBuilder();
	String sql="";
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",request_id});
	sql="select distinct application_id, application_name "+
		" from mad_request_application ra, mad_application a "+
		" where request_id=? and application_id=a.id "+
		" order by application_name";
	ArrayList<String[]> appInRequestList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	ArrayList<String[]> appAllowedAppList=getApplicationList(conn,session,true, request_id);
	ArrayList<String[]> arr=new ArrayList<String[]>();
	
	if (appInRequestList.size()==0) {
		sb.append("<table class=\"table table-condensed\">");
		sb.append("<tr class=active>");
		sb.append("<td nowrap>");
		sb.append("<br><span class=\"label label-warning\">No application added.</span>"); 
		sb.append("</td>");
		sb.append("</tr>");
		sb.append("</table>");
		return sb.toString();
	}
	
	sb.append("<table class=\"table table-condensed\">");
	for (int i=0;i<appInRequestList.size();i++) {
		String application_id=appInRequestList.get(i)[0];
		String application_name=appInRequestList.get(i)[1];
		String is_selected="0";
		
		sql="select sign(count(*)) from mad_request_app_env where request_id=? and  application_id=? ";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		bindlist.add(new String[]{"INTEGER",application_id});
		
		arr=getDbArrayConf(conn, sql, 1, bindlist);
		if (arr.size()==1) is_selected=arr.get(0)[0];
		
		
		
		
		String is_checked="";
		
		String tr_class="";
		
		if (is_selected.equals("1")) {
			is_checked="checked ";
			tr_class="info";
		}
		
		String is_disabled="disabled ";
		for (int a=0;a<appAllowedAppList.size();a++) 
			if (appAllowedAppList.get(a)[0].equals(application_id)) {
				is_disabled="";
				break;
			}
		
		if (is_disabled.equals("disabled ")) tr_class="danger";
		
		if(!is_form_editable) is_disabled="disabled ";
		
		sb.append("<tr class="+tr_class+">");
		sb.append("<td nowrap>");
		sb.append("<input type=checkbox "+is_checked+is_disabled+" id=selected_app_"+request_id+"_"+i+" value=\""+application_id+"\" onclick=linkAppEnv('"+request_id+"','APP',this)>");
		sb.append("<span class=\"badge badge-default\">"+application_name+"</span>"); 
		sb.append("</td>");
		sb.append("</tr>");
	}
	sb.append("</table>");
	
	return sb.toString();
}
//****************************************************************
String writeDeploymentPackagesInRequest(Connection conn, HttpSession session, String request_id, boolean is_form_editable ) {
	StringBuilder sb=new StringBuilder();
	String sql="";
	
	sql="select lnk.id, req.id, req.description, req.status, rt.flow_id  " +
		" from mad_request_link lnk, mad_request req, mad_request_type rt " +
		" where lnk.linked_request_id=req.id and req.request_type_id=rt.id and  lnk.request_id=?";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",request_id});
	ArrayList<String[]> linkArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	
	if (linkArr.size()==0) return "No Pacakage added.";
	

	
	sb.append("<table class=\"table table-condensed\">");
	
	
	
	
	for (int i=0;i<linkArr.size();i++) {
		String lnk_id=linkArr.get(i)[0];
		String req_id=linkArr.get(i)[1];
		String req_desc=linkArr.get(i)[2];
		String req_status=linkArr.get(i)[3];
		String req_flow_id=linkArr.get(i)[4];
		String req_status_title=getStateProperty(conn, session, i, req_flow_id, req_status,"TITLE");
		
		String application_list=getAppNameByReqId(conn,req_id);
		
		sb.append("<tr class=active>");
		if (is_form_editable)
			sb.append("<td><input type=checkbox id=ch_pack_"+request_id+"_"+i+" value=\""+lnk_id+"\"></td>");
		
		
		
		sb.append("<td>");
		sb.append("<a href=\"javascript:openRequest('"+req_id+"','PACKAGE');\";><span class=\"glyphicon glyphicon-share-alt\"></span></a> ");
		sb.append("<b>"+req_id+"</b> "+req_desc);
		sb.append("</td>");
		
		sb.append("<td nowrap><b>"+req_status_title+"</td>");
		
		sb.append("<td><b>"+application_list+"</td>");
		sb.append("</tr>");
	}
	sb.append("</table>");
	
	return sb.toString();
}

//***************************************************************
String makePackageAddPackageOptions(Connection conn, HttpSession session, String request_id, String pack_ids) {
	StringBuilder sb=new StringBuilder();
	
	sb.append("<input type=hidden id=adding_request_id value=\""+request_id+"\">");
	sb.append("<input type=hidden id=package_ids_"+request_id+" value=\""+pack_ids+"\">");

	sb.append("<h4>Adding packages to request "+request_id+"</h4>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	sb.append("<input type=checkbox id=include_to_skip_CANCELLED_"+request_id+">");
	sb.append(" Include skipped (Cancelled)");
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	sb.append("<input type=checkbox id=include_to_skip_SUCCESSFULL_"+request_id+">");
	sb.append(" Include skipped (Consider Successfull)");
	sb.append("</div>");
	sb.append("</div>");
	
	return sb.toString();
}

//***************************************************************
void addPackageToRequest(Connection conn, HttpSession session, String request_id, String pack_ids, String environment_id) {
	String sql="";
	
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	String[] ids=pack_ids.split(",");
	
	for (int a=0;a<ids.length;a++) {
		
		String pack_id=ids[a];
		if (pack_id.length()==0) continue;
		
		
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		bindlist.add(new String[]{"INTEGER",pack_id});
		
		sql="select 1 from mad_request_link where request_id=? and linked_request_id=?";
		
		ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
		
		if (arr.size()==1) continue;
		
		sql="select request_group from mad_request_type "+
			" where request_group='PACKAGE' and id=(select request_type_id from mad_request where id=?)   ";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",pack_id});
		arr=getDbArrayConf(conn, sql, 1, bindlist);
		
		if (arr.size()==0) continue;
		
		String next_val_sql="SELECT AUTO_INCREMENT FROM information_schema.tables WHERE table_name = 'mad_request_link' AND table_schema = DATABASE()";
		String next_id=getDBSingleVal(conn, next_val_sql);
		
		sql="insert into mad_request_link (id, request_id,linked_request_id, entuser, entdate ) values (?,?,?,?,now())";
		
		int curruser=(Integer) session.getAttribute("userid");
		
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",next_id});
		bindlist.add(new String[]{"INTEGER",request_id});
		bindlist.add(new String[]{"INTEGER",pack_id});
		bindlist.add(new String[]{"INTEGER",""+curruser});
		
		execDBConf(conn, sql, bindlist);
		
		createHistory(conn, session, "INSERT", "mad_request_link", next_id);
		
	} //for (int a=0;a<ids.length
	
			
	
			
	updateRequestApplicationAndDeploymentItems(conn,session,request_id, environment_id);
	

	
}

//***************************************************************
void updateRequestApplicationAndDeploymentItems(Connection conn, HttpSession session, String request_id, String environment_id) {
	String sql="";
	
	
	
	int curruser=(Integer) session.getAttribute("userid");
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",request_id});
	
	sql="select  distinct  ra.application_id  " +
		"	from  " +
		"	mad_request_link lnk, " +
		"	mad_request_application ra " +
		"	where lnk.request_id=? " +
		"	and lnk.linked_request_id=ra.request_id";
	
	
	
	ArrayList<String[]> appFullList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	

	sql="select application_id  from mad_request_application where request_id=?";
	
	ArrayList<String[]> appExistingList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	

	
	

	boolean added_new_app=false;
	
	//insert new applications to the list
	for (int i=0;i<appFullList.size();i++) {
		
		
		boolean is_exists=false;
		
		String adding_app_id=appFullList.get(i)[0];
		
		
		
		for (int j=0;j<appExistingList.size();j++) {
			if (appExistingList.get(j)[0].equals(adding_app_id)) {
				is_exists=true;
				break;
			}
		}
		
		if (is_exists)  
			
			continue;
		
		
		added_new_app=true;
		
		sql="insert into mad_request_application (request_id, application_id, entuser, entdate) values (?, ?, ?, now())";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		bindlist.add(new String[]{"INTEGER",adding_app_id});
		bindlist.add(new String[]{"INTEGER",""+curruser});
		execDBConf(conn, sql, bindlist);
		
		
		boolean is_app_allowed=false;
		
		ArrayList<String[]> allowedAppList=getApplicationList(conn, session, true, request_id);

		for (int a=0;a<allowedAppList.size();a++)
			if (allowedAppList.get(a)[0].equals(adding_app_id)) {
				is_app_allowed=true;
				break;
			}

		if (!is_app_allowed) {
			System.out.println("not allowed app : "+adding_app_id); 
			continue;
		}

		//direk memberleri de eklemek icin paket eklendiginde calisir. app eklendiginde zaten ekleniyor. 
		if (environment_id.length()>0) {
			
			String next_val_sql="SELECT AUTO_INCREMENT FROM information_schema.tables WHERE table_name = 'mad_request_app_env' AND table_schema = DATABASE()";
			String next_id=getDBSingleVal(conn, next_val_sql);
			
			sql="insert into mad_request_app_env (id, request_id, application_id, environment_id, entuser, entdate) " +
					" values (?, ?, ?, ?, ?, now()) ";
			bindlist.clear();
			bindlist.add(new String[]{"INTEGER",next_id});
			bindlist.add(new String[]{"INTEGER",request_id});
			bindlist.add(new String[]{"INTEGER",adding_app_id});
			bindlist.add(new String[]{"INTEGER",environment_id});
			bindlist.add(new String[]{"INTEGER",""+curruser});
			execDBConf(conn, sql, bindlist);
			
			createHistory(conn, session, "INSERT", "mad_request_app_env", next_id);
		}
		
		
		makeRequestParameters(conn, session, request_id, adding_app_id, environment_id);
		
		
		
		addRequestMembersByApplicationId(conn, session, request_id, adding_app_id);
		
	}
	
	if (added_new_app) 
		arrangeRequestMembers(conn, session, request_id);
	
		
	
	
	
	
	// remove application
	for (int i=0;i<appExistingList.size();i++) {
		boolean is_exists=false;
		String deleting_app_id=appExistingList.get(i)[0];
		
		for (int j=0;j<appFullList.size();j++) {
			if (appFullList.get(j)[0].equals(deleting_app_id)) {
				is_exists=true;
				break;
			}
		}
		
		if (is_exists)  continue;
		
			
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		bindlist.add(new String[]{"INTEGER",deleting_app_id});
		
		sql="delete from mad_request_application where request_id=? and application_id=?";
		execDBConf(conn, sql, bindlist);

		
		String del_sql="select id from mad_request_app_env where request_id=? and application_id=?";
		ArrayList<String[]> delArr=getDbArrayConf(conn, del_sql, Integer.MAX_VALUE, bindlist);
		for (int h=0;h<delArr.size();h++) {
			String request_app_env_id=delArr.get(h)[0];
			createHistory(conn, session, "DELETE", "mad_request_app_env", request_app_env_id);

		}
		
		sql="delete from mad_request_app_env where request_id=? and application_id=?";
		execDBConf(conn, sql, bindlist);
		
		
		del_sql="select id from mad_request_env_fields "+
				"  where request_id=? and (application_id=? or application_id=0)";
		delArr=getDbArrayConf(conn, del_sql, Integer.MAX_VALUE, bindlist);
		for (int h=0;h<delArr.size();h++) {
		String del_id=delArr.get(h)[0];
		createHistory(conn, session, "DELETE", "mad_request_env_fields", del_id);
		}

		sql="delete from mad_request_env_fields where request_id=? and (application_id=? or application_id=0)";
		execDBConf(conn, sql, bindlist);
		
		removeRequestMembersByApplicationId(conn, session, request_id, deleting_app_id);
			
	}
}


//--------------------------------------------------------------------------------
void arrangeRequestMembers(Connection conn, HttpSession session, String request_id) {	

	String sql="";
	
	//if (1==1) return;
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select id, application_id, member_path, member_name, "+
		"  member_version, member_tag_info, status, to_skip " + 
		"	from mad_request_application_member where request_id=?";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	
	ArrayList<String[]> memList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	ArrayList<String> compareList=new ArrayList<String>();
	ArrayList<String[]> actionList=new ArrayList<String[]>();
	
	for (int i=0;i<memList.size();i++) {
		String member_id=memList.get(i)[0];
		String application_id=memList.get(i)[1];
		String member_path=memList.get(i)[2];
		String member_name=memList.get(i)[3];
		String member_version=memList.get(i)[4];
		String member_tag_info=memList.get(i)[5];
		String status=memList.get(i)[6];
		String to_skip=memList.get(i)[7];
		
		//don't touch skipped or deployed ones
		if (status.equals("OK") || to_skip.equals("YES") ) continue;
		
		String ver_info=member_version;
		
		//if there is same member_path with same app, 
		//keep this if this is newer, else delete this
		
		for (int k=0;k<memList.size();k++) {
			String in_member_id=memList.get(k)[0];
			String in_application_id=memList.get(k)[1];
			String in_member_path=memList.get(k)[2];
			String in_member_name=memList.get(k)[3];
			String in_member_version=memList.get(k)[4];
			String in_member_tag_info=memList.get(k)[5];
			String in_status=memList.get(k)[6];
			String in_to_skip=memList.get(k)[7];
			
			if (i==k) continue;
			
			if (!in_application_id.equals(application_id)) continue;
			
			if (!in_member_path.equals(member_path)) continue;
			
			//check if this two member compared before 
			if (compareList.indexOf(member_id+"_"+in_member_id)>-1) continue;
			if (compareList.indexOf(in_member_id+"_"+member_id)>-1) continue;
			
			compareList.add(member_id+"_"+in_member_id);
			compareList.add(in_member_id+"_"+member_id);
			
			String in_ver_info=in_member_version;
			
			boolean is_numeric=false;
			try {Integer.parseInt(in_ver_info); is_numeric=true;} catch(Exception e) {}
			
			
			boolean is_newer_or_same=false;
			
			if (is_numeric) 
				try {
					is_newer_or_same=Integer.parseInt(in_ver_info)>=Integer.parseInt(ver_info);
				} catch(Exception e) {}
			else 
				if (in_ver_info.compareTo(ver_info)>0) 
					is_newer_or_same=true;
			
			System.out.println("Check : "+member_path+" / "+in_member_path +" : is_newer_or_same : "+is_newer_or_same);
			
			if (is_newer_or_same) {
			
				actionList.add(new String[]{"DELETE",member_id});
			}
				
			
		} // for int k
		
	} // for int i

	
	//perform actions
	for (int i=0;i<actionList.size();i++) {
		String action=actionList.get(i)[0];
		String member_id=actionList.get(i)[1];
		
		if (action.equals("DELETE")) {
			sql="delete from mad_request_application_member where id=?";
			bindlist.clear();
			bindlist.add(new String[]{"INTEGER",member_id});
			
			createHistory(conn, session, "DELETE", "mad_request_application_member", member_id);
			
			execDBConf(conn, sql, bindlist);
		}
		
	}
	
}

//***************************************************************
void addRequestMembersByApplicationId(Connection conn, HttpSession session, String request_id, String application_id) {
	
	String sql="";
	
	int curruser=(Integer) session.getAttribute("userid");
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	
	sql="select \n"+
		"	ram.id req_app_member_id, \n"+
		"	member_name, \n"+
		"	member_path,  \n"+
		"	member_version, \n"+
		"	member_tag_info \n"+
		"	from  \n"+
		"	mad_request_link rl, \n"+
		"	mad_request_application_member ram \n"+
		"	where rl.request_id=? \n"+
		"	and rl.linked_request_id=ram.request_id \n"+
		"	and ram.application_id=? \n"+
		" and not exists ( \n " +
				" select 1 from mad_request_application_member iram "+
				" where \n "+
				  " iram.request_id=rl.request_id  \n "+
				  " and iram.application_id=ram.application_id  \n "+
				  " and iram.member_name=ram.member_name  \n "+
				  " and iram.member_path=ram.member_path  \n "+
				  " and iram.member_version>=ram.member_version \n"+
		" ) " +
		"	order by ram.application_id, member_order, member_version ";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	bindlist.add(new String[]{"INTEGER",application_id});
	
	/*
	System.out.println(sql);
	System.out.println("request_id="+request_id);
	System.out.println("application_id="+application_id);
	*/
	
	ArrayList<String[]> memberList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	ArrayList<String[]> arr=new ArrayList<String[]>();

	
	
			
	if (memberList.size()==0) return;
	
	int order_no=0;
	String max_member_id="0";
	
	sql="select max(member_order), max(id)  from mad_request_application_member where request_id=?";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});

	arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	try {order_no=Integer.parseInt(arr.get(0)[0]);} catch(Exception e) {order_no=0;}
	try {max_member_id=nvl(arr.get(0)[1],"0");} catch(Exception e) {max_member_id="0";}

	
	for (int i=0;i<memberList.size();i++) {
		String req_app_member_id=memberList.get(i)[0];
		String member_name=memberList.get(i)[1];
		String member_path=memberList.get(i)[2];
		String member_version=memberList.get(i)[3];
		String member_tag_info=memberList.get(i)[4];
	
		order_no++;
		
		
		sql="insert into mad_request_application_member  " +
			" (request_id, application_id, member_name, member_path, member_version, member_tag_info, member_order, entuser, entdate) "+
			" values (?, ?, ?, ?, ?, ?, ?, ?, now())";
		
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		bindlist.add(new String[]{"INTEGER",application_id});
		bindlist.add(new String[]{"STRING",member_name});
		bindlist.add(new String[]{"STRING",member_path});
		bindlist.add(new String[]{"STRING",member_version});
		bindlist.add(new String[]{"STRING",member_tag_info});
		bindlist.add(new String[]{"STRING",""+order_no});
		bindlist.add(new String[]{"STRING",""+curruser});
		
		
		
		
		execDBConf(conn, sql, bindlist);

	}
	
	
	// CREATE INSERT HISTORY FOR NEW ITEMS
	sql="insert into mad_request_application_member_history ( "+
			" request_application_member_id, "+
			" request_id, "+
			" application_id, "+
			" member_name, "+
			" member_path, "+
			" member_version, "+
			" member_order, "+
			" to_skip, "+
			" skip_reason, "+
			" member_tag_info, "+
			" history_action, "+
			" history_user, "+
			" history_date, "+
			" history_host )  "+
		" select  "+
				" id, "+
				" request_id, "+
				" application_id, "+
				" member_name, "+
				" member_path, "+
				" member_version, "+
				" member_order, "+
				" to_skip, "+
				" skip_reason, "+
				" member_tag_info, "+
				" 'INSERT', "+
				" entuser, "+
				" entdate, "+
				" ?  "+
		" from mad_request_application_member where request_id=? and id>?";
		
		String hostname=nvl((String) session.getAttribute("hostname"),"UNKNOWN");
		
		bindlist.clear();
		bindlist.add(new String[]{"STRING",""+hostname}); 
		bindlist.add(new String[]{"INTEGER",request_id}); 
		bindlist.add(new String[]{"INTEGER",max_member_id}); 
		

	
		execDBConf(conn, sql, bindlist);
	
}


//***************************************************************
void removeRequestMembersByApplicationId(Connection conn, HttpSession session, String request_id, String application_id) {
	String sql="";
	

	sql="delete from mad_request_application_member where request_id=? and application_id=?";
			
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	bindlist.add(new String[]{"INTEGER",application_id});
	
	String del_sql="select id from mad_request_application_member "+
			" where request_id=? and application_id=?";
	ArrayList<String[]> delArr=getDbArrayConf(conn, del_sql, Integer.MAX_VALUE, bindlist);
	for (int h=0;h<delArr.size();h++) {
	String del_id=delArr.get(h)[0];
	createHistory(conn, session, "DELETE", "mad_request_application_member", del_id);
	}
	
	execDBConf(conn, sql, bindlist);
	
	
	del_sql="select id from mad_request_env_fields "+
			"  where request_id=? and application_id=?";
	delArr=getDbArrayConf(conn, del_sql, Integer.MAX_VALUE, bindlist);
	for (int h=0;h<delArr.size();h++) {
	String del_id=delArr.get(h)[0];
	createHistory(conn, session, "DELETE", "mad_request_env_fields", del_id);
	}
	
	sql="delete from mad_request_env_fields where request_id=? and application_id=?";
	
	execDBConf(conn, sql, bindlist);
	
	sql="select id from  mad_request_env_fields  \n" + 
			" where \n" + 
			" request_id=? \n" + 
			" and platform_id not in \n" + 
			"( \n" + 
			" select id from mad_platform where platform_type_id in  \n" + 
			"	  (select platform_type_id from mad_application where id in \n" + 
			"	    	(select application_id from mad_request_env_fields where request_id=?) \n" + 
			"     ) \n" + 
			") ";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	bindlist.add(new String[]{"INTEGER",request_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	sql="delete from mad_request_env_fields where id=?";
	
	for (int i=0;i<arr.size();i++) {
		String id=arr.get(i)[0];
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",id});
		
		createHistory(conn, session, "DELETE", "mad_request_env_fields", id);
		
		execDBConf(conn, sql, bindlist);
	}
	
}

//***************************************************************
void removePackagesFromRequest(Connection conn, HttpSession session, String request_id,String pack_ids_to_remove, String environment_id) {
	String sql="";
	
	sql="delete from mad_request_link where id=?";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String[] ids=pack_ids_to_remove.split(",");
	
	for (int i=0;i<ids.length;i++) {
		String pack_link_id=ids[i];
		if (pack_link_id.length()==0 || pack_link_id.equals("0")) continue;
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",pack_link_id});
		
		
		createHistory(conn, session, "DELETE", "mad_request_link", pack_link_id);
		
		execDBConf(conn, sql, bindlist);
		
		
	}

	updateRequestApplicationAndDeploymentItems(conn, session, request_id, environment_id);
	
}


//***************************************************************
String writeRequestAppEnvLink(Connection conn, HttpSession session, String request_id, boolean is_form_editable) {

	StringBuilder sb=new StringBuilder();
	
	String sql="";
	
	sql="select distinct environment_id,env.environment_name, " + 
			"       platform_type_id, platform_type_name " +
			"	from mad_request_app_env lnk, mad_application app, mad_environment env, mad_platform_type pt " + 
			"	where lnk.application_id=app.id and lnk.environment_id=env.id " + 
			"   and app.platform_type_id=pt.id " +
			"	and request_id=?";
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",request_id});
	ArrayList<String[]> linkArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	if (linkArr.size()==0) {
		sb.append("<table class=\"table table-condensed\">");
		sb.append("<tr class=active>");
		sb.append("<td nowrap>");
		sb.append("<br><span class=\"label label-warning\">No platform added.</span>"); 
		sb.append("</td>");
		sb.append("</tr>");
		sb.append("</table>");
		return sb.toString();
	}
	
	
	sb.append("<table class=\"table table-striped\">");
	for (int i=0;i<linkArr.size();i++) {
		
		String environment_id=linkArr.get(i)[0];
		String environment_name=linkArr.get(i)[1];
		String platform_type_id=linkArr.get(i)[2];
		String platform_type_name=linkArr.get(i)[3];
		
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		bindlist.add(new String[]{"INTEGER",environment_id});
		bindlist.add(new String[]{"INTEGER",platform_type_id});
		
		
		sql="select p.id, platform_name,  "+
			" (select sign(count(*)) from mad_request_platform_skip s where s.request_id=? and platform_id=p.id) platform_skip " +
			"   from mad_platform_env e, mad_platform p  " + 
			"	where e.platform_id=p.id " + 
			"	and environment_id=? " + 
			"	and p.platform_type_id=? " + 
			"	order by 2";
		
		
		ArrayList<String[]> platformList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		sb.append("<tr>");
		
		
		sb.append("<td>");
		sb.append("<input type=hidden id=environment_id_level_"+i + " value=\""+environment_id+"\">");

		sb.append("<input type=hidden id=platform_type_level_"+i + " value=\""+platform_type_id+"\">");
		sb.append("<span class=\"badge\">"+environment_name+"</span>");
		sb.append("<ul>");
		sb.append("<li><b>["+platform_type_name+"]</b></li>");
		
		//List Platforms
		sb.append("<ul>");
		if (platformList.size()==0) 
			sb.append("<li><font color=red>No vailable platform found!</red></li>");
		else {
			for (int p=0;p<platformList.size();p++) {
				String platform_id=platformList.get(p)[0];
				String platform_name=platformList.get(p)[1];
				String platform_skip=platformList.get(p)[2];
				
				String platform_checked="checked";
				if (platform_skip.equals("1")) platform_checked="";
				String platform_skip_disabled="";
				boolean has_ability=checkpermissionByName(session, "SKIP_PLATFORM_DEPLOYMENT");
				if (!has_ability) platform_skip_disabled="disabled";
				if (!is_form_editable) platform_skip_disabled="disabled";
				
				sb.append("<li>");
				sb.append("<input type=hidden id=platform_level_"+platform_type_id+"_"+ i + " value=\""+platform_id+"\">");
				sb.append("<input type=checkbox "+platform_checked+" " + platform_skip_disabled+" onclick=setMadPlatformSkip('"+request_id+"','"+platform_id+"',this);> ");
				sb.append("<span class=\"label label-warning\">"+platform_name+"</span>");
				sb.append("</li>");
				
				StringBuilder sbParams=new StringBuilder();
				
				sql="select title, flex_field_id, default_value, is_mandatory, is_editable, is_visible,  \n" +
					" (select field_value from mad_platform_fields where platform_id=? and flex_field_id=ptf.flex_field_id) current_value \n " + 
					" from mad_platform_type_flex_fields ptf, mad_flex_field f  \n" +
					" where platform_type_id=? \n" +
					" and ptf.flex_field_id=f.id \n" + 
					" and is_visible='YES' "+
					" order by field_order ";

				
				bindlist.clear();
				bindlist.add(new String[]{"INTEGER",platform_id});
				bindlist.add(new String[]{"INTEGER",platform_type_id});
				ArrayList<String[]> paramArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
				if (paramArr.size()==0) continue;
				
				sbParams.append("<table class=table>");
				
				ArrayList<String[]> fexValsArr=new ArrayList<String[]>();
				sql="select flex_field_id, field_value "+
					" from mad_request_env_fields " + 
					" where request_id=? " +
					" and environment_id=? "+
					" and platform_id=? " +
					" and application_id=0";
				
				bindlist.clear();
				bindlist.add(new String[]{"INTEGER",request_id});
				bindlist.add(new String[]{"INTEGER",environment_id});
				bindlist.add(new String[]{"INTEGER",platform_id});
				fexValsArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
				
				int field_index=0;
				
				for (int t=0;t<paramArr.size();t++) {
					
					String parameter_title=paramArr.get(t)[0];
					String flex_field_id=paramArr.get(t)[1];
					//String default_value=nvl(paramArr.get(t)[5], paramArr.get(t)[2]);
					
					String is_mandatory=paramArr.get(t)[3];
					String is_editable=paramArr.get(t)[4];
					String is_visible=paramArr.get(t)[5];
					
					String default_value=paramArr.get(t)[6];
					
					if(!is_form_editable) is_editable="NO";
					
					
					
					sbParams.append("<tr>");
					sbParams.append("<td>");
					
					String fire_event="javascript:setMadRequestEnvFieldValue("+request_id+","+platform_id+",0, "+flex_field_id+",#)";
					sbParams.append(makeFlexField(conn, session, "param_platform_"+platform_id, field_index, platform_id, flex_field_id, "DUMMY_FIELD_PARAM_NAME", fexValsArr, is_mandatory, is_editable, is_visible, default_value,fire_event));
					field_index++;
					
						
					
					sbParams.append("</td>");
					sbParams.append("</tr>");
				}
				
				sql="select application_id, application_name  " + 
					"	from  mad_request_app_env lnk, mad_application app, mad_environment env " + 
					"	where lnk.application_id=app.id and lnk.environment_id=env.id  " + 
					"	and request_id=? " + 
					"	and platform_type_id=?";
				bindlist.clear();
				bindlist.add(new String[]{"INTEGER",request_id});
				bindlist.add(new String[]{"INTEGER",platform_type_id});
				ArrayList<String[]> appArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
				
				for (int a=0;a<appArr.size();a++) {
					String application_id=appArr.get(a)[0];	
					String application_name=appArr.get(a)[1];
				
					sbParams.append("<tr>");
					sbParams.append("<td>");
					sbParams.append("<input type=hidden id=application_level_platform_"+platform_id+"_"+a + " value=\""+application_id+"\">");
					sbParams.append("<span class=\"label label-info\">"+application_name+"</span>");
					sbParams.append("</td>");
					sbParams.append("</tr>");
					
					
					
					sql="select title, flex_field_id, default_value, is_mandatory, is_editable, is_visible \n" +
							" from mad_application_flex_fields ptf, mad_flex_field f  \n" +
							" where application_id=? \n" +
							" and ptf.flex_field_id=f.id \n" + 
							" and is_visible='YES' ";
					
					
					bindlist.clear();
					bindlist.add(new String[]{"INTEGER",application_id});
					paramArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
					if (paramArr.size()==0) continue;
					
					field_index=0;
					
					sql="select flex_field_id, field_value "+
							" from mad_request_env_fields " + 
							" where request_id=? " +
							" and environment_id=? "+
							" and platform_id=? " +
							" and application_id=?";
						
						bindlist.clear();
						bindlist.add(new String[]{"INTEGER",request_id});
						bindlist.add(new String[]{"INTEGER",environment_id});
						bindlist.add(new String[]{"INTEGER",platform_id});
						bindlist.add(new String[]{"INTEGER",application_id});
						
						fexValsArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
						
					for (int t=0;t<paramArr.size();t++) {
						String parameter_title=paramArr.get(t)[0];
						String flex_field_id=paramArr.get(t)[1];
						//String default_value=paramArr.get(t)[2];
						String default_value="";
						String is_mandatory=paramArr.get(t)[3];
						String is_editable=paramArr.get(t)[4];
						String is_visible=paramArr.get(t)[5];
						
						sbParams.append("<tr>");
						sbParams.append("<td>");
						
						String fire_event="javascript:setMadRequestEnvFieldValue("+request_id+","+platform_id+","+application_id+", "+flex_field_id+",#)";
						sbParams.append(makeFlexField(conn, session, "param_application_"+platform_id+"_"+application_id, field_index, request_id, flex_field_id, "DUMMY_FIELD_PARAM_NAME", fexValsArr, is_mandatory, is_editable, is_visible, default_value,fire_event));
						field_index++;
						sbParams.append("</td>");
						sbParams.append("</tr>");
						
					}
					
				}
				
				sbParams.append("</table>");
				ArrayList<String[]> collapseItems=new ArrayList<String[]>();
				collapseItems.add(new String[]{
						"platform_params_mas_"+platform_id+"_"+request_id,
						decodeStringTitle(conn, session, "Platform and Application Parameters", "SYS_REQ_TITLE_PLATFORM_PARAMS", false), 
						sbParams.toString(),
						"parameter.png",  
						"" 
						});
						
				sb.append(addCollapse("platform_params_"+platform_id+"_"+request_id, collapseItems));
				
			}
		}
		sb.append("</ul>");
		
		
		sb.append("</ul>");
		sb.append("</td>");
		
		sb.append("</tr>");
	}
	sb.append("</table>");
	

	
	return sb.toString();
}

//**************************************************************
int getConflictType(
		Connection conn, 
		HttpSession session,
		String application_id, 
		String conflict_environment_id,
		String conflict_member_version, 
		String conflict_member_tag_info, 
		String conflict_deployment_date,
		String member_environment_id,
		String member_version, 
		String member_tag_info,
		String member_request_deployment_date
		) {
	
	int application_conflict_level=1;
	//0 : No conflict check
	//1 : Based on Environment + Deployment time : Less Conflict expected
	//2 : Based on Environment : More Conflict expected
	
	String sql="select conflict_level from mad_application where id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",application_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==1) 
		try {application_conflict_level=Integer.parseInt(arr.get(0)[0]);} catch(Exception e) {};
		
	if (application_conflict_level==0)  return -1;
	
	//if targeting different environment, it is not conflicting
	if (!conflict_environment_id.equals(member_environment_id)) return -1;
	
	if (application_conflict_level==1) {
		//deployment date is not equals, so it is not conflicting
		if (!conflict_deployment_date.equals(member_request_deployment_date)) return -1;
	}  
	
	int ret1=conflict_member_version.compareTo(member_version);
	
	if (ret1<0) return 1;  // older version 
	if (ret1>0) return 2;  // newer version
	return 0; //version equals
	
	
}

//***************************************************************
ArrayList<String[]> getConflictInfoList(
		Connection conn, 
		HttpSession session,
		String request_id, 
		String environment_id,
		String application_id, 
		String req_app_member_id, 
		String member_name, 
		String member_path, 
		String member_version, 
		String member_tag_info) {
	
	 ArrayList<String[]> bindlist=new ArrayList<String[]>();
	 String sql="";

	 sql="select DATE_FORMAT(deployment_date,?)  deployment_date from mad_request where id=?";
	 bindlist.clear();
	 bindlist.add(new String[]{"STRING",mysql_format});
	 bindlist.add(new String[]{"INTEGER",request_id});
	
	 ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	 
	 String member_request_deployment_date ="";
	 if (arr.size()==1) member_request_deployment_date =arr.get(0)[0];
	
	 sql="select " +
		"	mem.request_id, mem.id member_id, mem.member_version,  mem.member_tag_info, rae.environment_id, "+
		" 	DATE_FORMAT(r.deployment_date,?)  deployment_date " +
		"	from "+
		"	mad_request_application_member mem, mad_request r, mad_request_type rt, mad_flow_state fs, mad_request_app_env rae "+
		"	where  "+
		"	mem.request_id=r.id  "+
		"   and mem.request_id=rae.request_id and mem.application_id=rae.application_id  " +
		"	and r.request_type_id=rt.id and rt.request_group='DEPLOYMENT' "+
		"	and rt.flow_id=fs.flow_id  "+
		"	and r.status=fs.state_name and state_stage not in ('START','FINISH','DEPLOY_SUCCESS','DEPLOY_FAIL','REJECTED','WAIT') "+
		"   and mem.to_skip='NO' "  + 
		"	and mem.id!=? "+
		"	and mem.member_path=? "+
		"	order by mem.id";
	
	bindlist.clear();
	bindlist.add(new String[]{"STRING",mysql_format});
	bindlist.add(new String[]{"INTEGER",req_app_member_id});
	bindlist.add(new String[]{"STRING",member_path});
	ArrayList<String[]> memArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	ArrayList<String[]> ret1=new ArrayList<String[]>();
			
			
	for (int i=0;i<memArr.size();i++) {
		String conflict_request_id=memArr.get(i)[0];
		String conflict_member_id=memArr.get(i)[1];
		String conflict_member_version=memArr.get(i)[2];
		String conflict_member_tag_info=memArr.get(i)[3];
		String conflict_environment_id=memArr.get(i)[4];
		String conflict_request_deployment_date=memArr.get(i)[5];
		
		int conflict_type=getConflictType(
				conn, session, application_id, 
				conflict_environment_id, 
				conflict_member_version, 
				conflict_member_tag_info, 
				conflict_request_deployment_date,
				environment_id, 
				member_version, 
				member_tag_info,
				member_request_deployment_date
				);


		if (conflict_type<0) continue;
		
		ret1.add(new String[]{
				conflict_request_id, 
				conflict_member_id,   
				conflict_member_version, 
				conflict_member_tag_info,
				conflict_environment_id,
				""+conflict_type
			});
		}
		
	
	
		return ret1;
	
}

//***************************************************************
int isCodeConflict(
		Connection conn, 
		HttpSession session,
		String request_id, 
		String environment_id, 
		String application_id,
		String req_app_member_id, 
		String member_name, 
		String member_path, 
		String member_version, 
		String member_tag_info) {
	
	ArrayList<String[]> memArr=getConflictInfoList(conn, session, 
			request_id, 
			environment_id, 
			application_id, 
			req_app_member_id, 
			member_name, 
			member_path, 
			member_version, 
			member_tag_info);
	
	//0 : No Conflict 
	//1 : Warning 
	//2 : Danger
	
	if (memArr==null || memArr.size()==0) return 0;
	 
	for (int i=0;i<memArr.size();i++) {
		int  conflict_type=Integer.parseInt(memArr.get(i)[5]);
		if (conflict_type>0) return 2;
	}
	
	if (memArr.size()>0) return 1;
	
	return 0;
	
}

//***************************************************************************************************
String showMadMemberConflict(Connection conn,  HttpSession session, String request_id, String member_id, boolean is_form_editable) {
	StringBuilder sb=new StringBuilder();
	
	String sql="select mam.application_id, member_name, member_path, member_version, "+
				" member_tag_info, application_name, rae.environment_id, environment_name "+
				" from mad_request_application_member mam, mad_application a, mad_request_app_env rae, mad_environment e " +
				" where mam.id=? "+
				" and mam.request_id=rae.request_id and mam.application_id=rae.application_id and rae.environment_id=e.id " +
				" and mam.application_id=a.id ";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",member_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);

	if (arr.size()==0) return "Member not found!. id : " + member_id;
	
	String application_id=arr.get(0)[0];
	String member_name=arr.get(0)[1];
	String member_path=arr.get(0)[2];
	String member_version=arr.get(0)[3];
	String member_tag_info=arr.get(0)[4];
	String member_application_name=arr.get(0)[5];
	String environment_id=arr.get(0)[6];
	String environment_name=arr.get(0)[7];
	String member_request_deployment_date="";
	String member_request_description="";

	
	sql="select DATE_FORMAT(deployment_date,?) deployment_date, description from mad_request where id=?";
	bindlist.clear();
	bindlist.add(new String[]{"STRING",mysql_format});
	bindlist.add(new String[]{"INTEGER",request_id});
	arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) {
		member_request_deployment_date=arr.get(0)[0];
		member_request_description=arr.get(0)[1];
	}
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right><b>Request Id : </b></div>");
	sb.append("<div class=\"col-md-9\"><span class=badge>"+request_id+"</span></div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right><b>Request Description : </b></div>");
	sb.append("<div class=\"col-md-9\"><span class=badge>"+member_request_description+"</span></div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right><b>Application : </b></div>");
	sb.append("<div class=\"col-md-9\"><span class=badge>"+member_application_name+"</span></div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right><b>Member Name : </b></div>");
	sb.append("<div class=\"col-md-9\"><span class=badge>"+member_name+"</span></div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right><b>Path : </b></div>");
	sb.append("<div class=\"col-md-9\"><span class=badge>"+member_path+"</span></div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right><b>Version : </b></div>");
	sb.append("<div class=\"col-md-9\"><span class=badge>"+member_version+"</span></div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right><b>Tag : </b></div>");
	sb.append("<div class=\"col-md-9\"><span class=badge>"+member_tag_info+"</span></div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right><b>Environment : </b></div>");
	sb.append("<div class=\"col-md-9\"><span class=badge>"+environment_name+"</span></div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right><b>Deployment date : </b></div>");
	sb.append("<div class=\"col-md-9\"><span class=badge>"+member_request_deployment_date+"</span></div>");
	sb.append("</div>");
	
	sb.append("<hr>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=showMadMemberConflict('"+request_id+"','"+member_id+"');>");
	sb.append("<span class=\"glyphicon glyphicon-refresh\"></span> Reload Conflict List ");
	sb.append("</button>");

	sb.append("</div>");
	sb.append("</div>");
	
	ArrayList<String[]> memArr=getConflictInfoList(conn, session, request_id, environment_id, application_id, member_id, member_name, member_path, member_version, member_tag_info);

	sb.append("<div style=\"min-height: 300px; max-height: 500px; overflow-x: scroll; overflow-y: scroll;\">");
	
	sb.append("<table class=\"table table-condensed table-striped\">");
	
	sb.append("<tr>");
	sb.append("<td><b>Request no</b></td>");
	sb.append("<td><b>Request</b></td>");
	sb.append("<td><b>Conflict Type</b></td>");
	sb.append("<td><b>Version</b></td>");
	sb.append("<td><b>Tag</b></td>");
	sb.append("<td><b>Environment</b></td>");
	sb.append("<td><b>Deployment Date</b></td>");
	sb.append("<td><b>Created By</b></td>");
	sb.append("<td><b>Creation Date</b></td>");
	sb.append("<td><b>Status</b></td>");
	sb.append("</tr>");
	
	
	
	String[] confArr=new String[]{"Same Item","Older Item","Newer Item"};
	String[] confImgArr=new String[]{"warning","danger","danger"};
	
	for (int i=0;i<memArr.size();i++) {
		
		String  conflict_request_id=memArr.get(i)[0];
		String  conflict_member_id=memArr.get(i)[1];
		String  conflict_member_version=memArr.get(i)[2];
		String  conflict_member_tag_info=memArr.get(i)[3];
		String  conflict_environment_id=memArr.get(i)[4];
		int  conflict_type=Integer.parseInt(memArr.get(i)[5]);
		
		
		//no conflict continue
		if (conflict_type<0) continue;
		
		String  conflict_type_title=confArr[conflict_type];
		String conflict_type_image=confImgArr[conflict_type];
		
		sql="select " + 
				" flow_id, " +
				" DATE_FORMAT(entdate,?) entdate, " +
				" DATE_FORMAT(deployment_date,?) deployment_date, " +
				" status, " + 
				" concat(fname, ' ', lname) fullname, " +
				" r.description " +
				" from mad_request r, mad_request_type rt, tdm_user u " +
				" where r.entuser=u.id and r.id=?";
		
		bindlist.clear();
		bindlist.add(new String[]{"STRING",mysql_format});
		bindlist.add(new String[]{"STRING",mysql_format});
		bindlist.add(new String[]{"INTEGER",conflict_request_id});
		
		arr=getDbArrayConf(conn, sql, 1, bindlist);
		
		String conflict_flow_id=arr.get(0)[0];
		String conflict_request_date=arr.get(0)[1];
		String conflict_deployment_date=arr.get(0)[2];
		String conflict_request_status=getStateProperty(conn, session, i, conflict_flow_id, arr.get(0)[3],"TITLE");
		String conflict_request_fullname=arr.get(0)[4];
		String conflict_request_description=arr.get(0)[5];
		 
		
		sql="select environment_name from mad_environment where id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",conflict_environment_id});
		arr=getDbArrayConf(conn, sql, 1, bindlist);
		
		String conflict_environment_name=conflict_environment_id;
		if (arr.size()==1) conflict_environment_name=arr.get(0)[0];
		
		sb.append("<tr>");
		sb.append("<td nowrap><a href=\"javascript:openRequest('"+conflict_request_id+"','DEPLOYMENT');\">"+conflict_request_id+"</a></td>");
		sb.append("<td nowrap>"+conflict_request_description+"</td>");
		sb.append("<td><img src=\"img/mad/"+conflict_type_image+".png\" width=20 height=20> "+
				"<span class=\"label label-"+conflict_type_image+"\">"+conflict_type_title+"</span></td>");
		sb.append("<td nowrap><span class=badge>"+conflict_member_version+"</span></td>");
		sb.append("<td nowrap><span class=badge>"+conflict_member_tag_info+"</span></td>");
		sb.append("<td nowrap>"+conflict_environment_name+"</td>");
		sb.append("<td nowrap>"+conflict_deployment_date+"</td>");
		sb.append("<td nowrap>"+conflict_request_fullname+"</td>");
		sb.append("<td nowrap>"+conflict_request_date+"</td>");
		sb.append("<td nowrap>"+conflict_request_status+"</td>");
		sb.append("</tr>");
		
	}
	
	sb.append("</table>");
	
	sb.append("</div>");
	
	return sb.toString();
}

//***************************************************************
String writeRequestDeploymentList(Connection conn, HttpSession session, String request_id, boolean is_form_editable) {

	StringBuilder sb=new StringBuilder();
	
	String sql="";
	
	sql="select "+
			"	ram.id req_app_member_id, "+
			"	ram.application_id, "+
			"	a.application_name,  "+
			"	member_name, "+
			"	member_path,  "+
			"	member_version, "+
			"	member_tag_info, "+
			"	member_order,  "+
			"   to_skip , " + 
			"   status,  " + 
			"   work_package_id ,  " + 
			"	rae.environment_id, " + 
			"   skip_reason, " + 
			"	item_view_script " +
			"	from  "+
			"	mad_request_application_member ram, "+
			"	mad_request_app_env rae, " +
			"	mad_application a "+
			"	where ram.request_id=? "+
			"	and ram.request_id=rae.request_id and ram.application_id=rae.application_id "+
			"	and ram.application_id=a.id "+
			"	order by member_order";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",request_id});
	ArrayList<String[]> linkArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	if (linkArr.size()==0) {
		sb.append("<table class=\"table table-condensed\">");
		sb.append("<tr class=active>");
		sb.append("<td nowrap>");
		sb.append("<br><span class=\"label label-warning\">No item added.</span>"); 
		sb.append("</td>");
		sb.append("</tr>");
		sb.append("</table>");
		return sb.toString();
	}
	
	
	
	sb.append("<span class=\"badge label-default\">"+linkArr.size()+"</span> item(s)");
	
	sb.append("<table class=\"table table-striped table-condensed\">");
	
	sb.append("<tr>");
	
	sb.append("<td></td>");
	sb.append("<td><span class=\"label label-info\">"+decodeStringTitle(conn, session, "Item", "SYS_MEMBER_TITLE_ITEM", false)+"</span></td>");
	sb.append("<td><span class=\"label label-info\">"+decodeStringTitle(conn, session, "Application", "SYS_MEMBER_TITLE_APPLICATION", false)+"</span></td>");
	sb.append("<td><span class=\"label label-info\">"+decodeStringTitle(conn, session, "Version", "SYS_MEMBER_TITLE_VERSION", false)+"</span></td>");
	sb.append("<td><span class=\"label label-info\">"+decodeStringTitle(conn, session, "Tag", "SYS_MEMBER_TITLE_TAG", false)+"</span></td>");
	sb.append("<td align=center><span class=\"label label-info\">"+decodeStringTitle(conn, session, "Conflict", "SYS_MEMBER_TITLE_CONFLICT", false)+"</span></td>");
	sb.append("<td><span class=\"label label-info\">"+decodeStringTitle(conn, session, "Full Path", "SYS_MEMBER_TITLE_PATH", false)+"</span></td>");
	sb.append("<td align=center><span class=\"label label-info\">"+decodeStringTitle(conn, session, "Depl.", "SYS_MEMBER_TITLE_DEPLOYMENT_STATUS", false)+"</span></td>");
	sb.append("</tr>");
	
	int curr_id=0;
	int prev_id=0;
	int next_id=0;
	
	for (int i=0;i<linkArr.size();i++) {
		String req_app_member_id=linkArr.get(i)[0];
		String application_id=linkArr.get(i)[1];
		String application_name=linkArr.get(i)[2];
		String member_name=linkArr.get(i)[3];
		String member_path=linkArr.get(i)[4];
		String member_version=linkArr.get(i)[5];
		String member_tag_info=linkArr.get(i)[6];
		String member_order=linkArr.get(i)[7];
		String member_skip=linkArr.get(i)[8];
		String member_status=nvl(linkArr.get(i)[9],"New");
		String member_work_package_id=nvl(linkArr.get(i)[10],"0");
		String member_environment_id=linkArr.get(i)[11];
		String skip_reason=linkArr.get(i)[12];
		String item_view_script=linkArr.get(i)[13].trim();
		
		
		try {prev_id=Integer.parseInt(linkArr.get(i-1)[0]);} catch(Exception e) {prev_id=curr_id;}
		try {curr_id=Integer.parseInt(linkArr.get(i)[0]);} catch(Exception e) {curr_id=0;}
		try {next_id=Integer.parseInt(linkArr.get(i+1)[0]);} catch(Exception e) {next_id=curr_id;}
		
		String  reorder_options="";
		
		
		reorder_options=reorder_options+ 
				"<span class=\"badge\" onclick=reorderItemOfDeploymentRequest('"+request_id+"','"+application_id+"','"+curr_id+"','"+prev_id+"')>"+
				"<span class=\"glyphicon glyphicon-arrow-up\"></span>"+
				"</span>";
	
		reorder_options=reorder_options+ 
				"<span class=\"badge\" onclick=reorderItemOfDeploymentRequest('"+request_id+"','"+application_id+"','"+curr_id+"','"+next_id+"')>" +
				"<span class=\"glyphicon glyphicon-arrow-down\"></span>"+
				"</span>";
						
		sb.append("<tr>");
		
		sb.append("<td nowrap align=center>");
		if (is_form_editable)
			sb.append(reorder_options);
		sb.append("</td>");
		
			
		sb.append("<td nowrap>");
				
		if (member_skip.equals("YES")) {
			
				if (skip_reason.equals("SUCCESSFULL"))
					sb.append("<span class=\"glyphicon glyphicon-ok-circle\" ></span> ");
				else 
					sb.append("<span class=\"glyphicon glyphicon-remove-circle\" ></span> ");
			
			if (is_form_editable)
				sb.append("<font color=blue><span class=\"glyphicon glyphicon-star-empty\" onclick=setMadMemberSkip('"+request_id+"','"+req_app_member_id+"','NO');></span></font> ");
		}
		else {
			if (is_form_editable)
				sb.append("<font color=blue><span class=\"glyphicon glyphicon-star\" onclick=setMadMemberSkip('"+request_id+"','"+req_app_member_id+"','YES');></span></font> ");
			
		}
		
		String view_member_name=member_name;
		
		if (item_view_script.length()>0)
			view_member_name=getMemberItemView(
					member_path,
					member_name,
					member_version,
					item_view_script
					);
			
		if (member_skip.equals("YES")) sb.append("<strike>");
		sb.append("<a href=\"javascript:showFileContent('"+request_id+"','"+req_app_member_id+"','"+member_version+"','-1')\">"+view_member_name+"</td>");
		if (member_skip.equals("YES")) sb.append("</strike>");
		
		
		sb.append("</td>");
		

		sb.append("<td nowrap>");
		if (member_skip.equals("YES"))
			sb.append("<strike>"+application_name+"</strike>");
		else 
			sb.append("<b>"+application_name+"</b>");
		sb.append("</td>");
		
		
		sb.append("<td nowrap>");
		if (member_skip.equals("YES"))
			sb.append("<strike>"+member_version+"</strike>");
		else {
			sb.append(member_version);
		}
			
		sb.append("</td>");
		
		String tag_js="showTagList('"+application_id+"','"+req_app_member_id+"','"+member_tag_info+"','"+member_version+"')";

		sb.append("<td nowrap>");
		
		if (is_form_editable) {
			if (member_tag_info.length()==0)
				sb.append("<span class=\"glyphicon glyphicon-tag\" onclick="+tag_js+"></span>");
			else 
				sb.append("<a href=\"javascript:"+tag_js+"\"><span class=badge>"+member_tag_info+"</span></a>");
		} else 
			sb.append(member_tag_info);
		
		
		sb.append("</td>");
		
		
		int conflict_status=isCodeConflict(conn, session, request_id, member_environment_id, application_id , req_app_member_id, member_name, member_path, member_version, member_tag_info);
				
		sb.append("<td align=center>");
		if (conflict_status==2) 
			sb.append("<a href=\"javascript:showMadMemberConflict('"+request_id+"','"+req_app_member_id+"');\"><img src=\"img/mad/danger.png\" width=20 height20></a> ");
		else if (conflict_status==1) 
			sb.append("<a href=\"javascript:showMadMemberConflict('"+request_id+"','"+req_app_member_id+"');\"><img src=\"img/mad/warning.png\" width=20 height20></a> ");
		else 
			sb.append("<font color=green><span class=\"glyphicon glyphicon-ok-sign\" ></span></font> ");
		sb.append("</td>");
		
		sb.append("<td nowrap>");
		sb.append(makeText("", member_path, " readonly ", 0));
		sb.append("</td>");
		
		String status_label="primary";
		String status_onclick="";
		
		if (member_status.equals("OK")) status_label="success";
		if (member_status.equals("NOK")) status_label="danger";
		if (member_status.equals("RUNNING")) status_label="warning";
		
		if (!member_status.equals("New")) 
			status_onclick=" onclick=\"javascript:showWorkPackageErrInfo('"+member_work_package_id+"','tdm_work_package','err_info');\" ";
		
		
		sb.append("<td align=center>");
		sb.append("<span "+status_onclick+" class=\"label label-"+status_label+"\" >"+member_status+"</span>");
		sb.append("</td>");
		
		
		
		sb.append("</tr>");
	}
	sb.append("</table>");
	
	return sb.toString();
}



//**************************************************************
void linkApplicationEnvironment(Connection conn, HttpSession session, String request_id, String addremove, String objtype, String object_id, String link_id) {
	String sql="";
	
	String source_id=object_id;
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",request_id});
	
	if (addremove.equals("DEL")) {
		String del_sql="";
		
		if (objtype.equals("APP")) {
			del_sql="select id from mad_request_app_env where request_id=? and application_id=?";
			sql="delete from mad_request_app_env where request_id=? and application_id=?";
		}
		else {
			del_sql="select id from mad_request_app_env where request_id=? and environment_id=?";
			sql="delete from mad_request_app_env where request_id=? and environment_id=?";
		}
			
		bindlist.add(new String[]{"INTEGER",source_id});
		
		ArrayList<String[]> delArr=getDbArrayConf(conn, del_sql, Integer.MAX_VALUE, bindlist);
		for (int h=0;h<delArr.size();h++) {
			String request_app_env_id=delArr.get(h)[0];
			createHistory(conn, session, "DELETE", "mad_request_app_env", request_app_env_id);

		}
		
		execDBConf(conn, sql, bindlist);
		
		
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		bindlist.add(new String[]{"INTEGER",request_id});
		
		String hist_sql="select id from mad_request_platform_skip "+
				"	where request_id=?  "+ 
				"	and platform_id not in  "+ 
				"	( "+ 
				"	select platform_id "+ 
				"	from mad_platform_env "+ 
				"	where environment_id in (select environment_id from mad_request_app_env where request_id=?)  "+ 
				"	)" ;
		ArrayList<String[]> histArr=getDbArrayConf(conn, hist_sql, Integer.MAX_VALUE, bindlist);
		for (int h=0;h<histArr.size();h++) {
			String hist_id=histArr.get(h)[0];
			createHistory(conn, session, "DELETE", "mad_request_platform_skip", hist_id);
		}

		
		sql="delete from mad_request_platform_skip " + 
				"	where request_id=?  "+ 
				"	and platform_id not in  "+ 
				"	( "+ 
				"	select platform_id "+ 
				"	from mad_platform_env "+ 
				"	where environment_id in (select environment_id from mad_request_app_env where request_id=?)  "+ 
				"	)" ;
		
		execDBConf(conn, sql, bindlist);
		
		if (objtype.equals("APP")) 
			removeRequestMembersByApplicationId(conn, session, request_id, source_id);

			
		return;
	}
	
	ArrayList<String[]> targetList=new ArrayList<String[]>();
	String insert_sql="";
	String environment_id="";
	
	if (objtype.equals("APP"))  {
			sql="select distinct environment_id from mad_request_app_env  where request_id=?";
			targetList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
			insert_sql="insert into mad_request_app_env (id, request_id, application_id, environment_id, entuser, entdate) " +
						" values (?, ?, ?, ?, ?, now())";
			
			makeRequestParameters(conn,session,request_id, object_id, link_id);
		}
	else  {
			sql="select distinct application_id from mad_request_app_env  where request_id=?";
			targetList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
			insert_sql="insert into mad_request_app_env (id, request_id, environment_id, application_id, entuser, entdate) " +
					" values (?, ?, ?, ?, ?, now())";
		}
	
	
	
	if (targetList.size()==0)   targetList.add(new String[]{link_id});
	int curruser=(Integer) session.getAttribute("userid");
	
	String next_val_sql="SELECT AUTO_INCREMENT FROM information_schema.tables WHERE table_name = 'mad_request_app_env' AND table_schema = DATABASE()";
			
	for (int i=0;i<targetList.size();i++) {
		String target_id=targetList.get(i)[0];
		
		String next_id=getDBSingleVal(conn, next_val_sql);
		
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",next_id});
		bindlist.add(new String[]{"INTEGER",request_id});
		bindlist.add(new String[]{"INTEGER",source_id});
		bindlist.add(new String[]{"INTEGER",target_id});
		bindlist.add(new String[]{"INTEGER",""+curruser});
		
		execDBConf(conn, insert_sql, bindlist);
		
		createHistory(conn, session, "INSERT", "mad_request_app_env", next_id);
	}
	
	if (objtype.equals("APP") && addremove.equals("ADD"))  {
		addRequestMembersByApplicationId(conn, session, request_id, source_id);
		arrangeRequestMembers(conn, session, request_id);
	}
			
		
	updateRequestApplicationAndDeploymentItems(conn,session,request_id, environment_id);
	
	
}

//****************************************************************************
void makeRequestParameters(Connection conn, HttpSession session, String request_id, String application_id, String environment_id) {
	
	System.out.println("makeRequestParameters for "+application_id);
	
	String sql="select platform_type_id from mad_application where id=?";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	bindlist.add(new String[]{"INTEGER",application_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==0) return;
	
	String platform_type_id=arr.get(0)[0];
	
	
	sql="select max(id)  from mad_request_env_fields where request_id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id}); //*
	
	
	arr=getDbArrayConf(conn, sql, 1, bindlist);
	String max_env_fields_id="0";
	if (arr.size()==1) max_env_fields_id=nvl(arr.get(0)[0],"0");
	
	int curruser=(Integer) session.getAttribute("userid");
	
	sql="select  pf.platform_id, flex_field_id, field_value \n "+
		" from mad_platform p, mad_platform_env pe, mad_platform_fields pf  \n " + 
		" where \n "+
		" p.platform_type_id=? \n " +
		" and p.id=pe.platform_id \n " +
		" and p.id=pf.platform_id \n " + 
		" and pe.environment_id=?  \n "+
		" and not exists ( \n " + 
				"  select 1 \n "+
				" from mad_request_env_fields ref \n " + 
				" where ref.request_id=? \n " + 
				" and ref.environment_id=pe.environment_id \n " +
				" and ref.platform_id=p.id \n " + 
				" and ref.flex_field_id=pf.flex_field_id \n " +
		" ) \n "+
		" order by pf.platform_id";
	
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",platform_type_id});
	bindlist.add(new String[]{"INTEGER",environment_id});
	bindlist.add(new String[]{"INTEGER",request_id}); //*
	
	

	
	
	ArrayList<String[]> arrPlatParam=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	long dura=System.currentTimeMillis();
	
	for (int i=0;i<arrPlatParam.size();i++) {
		String platform_id=arrPlatParam.get(i)[0];
		String platform_flex_field_id=arrPlatParam.get(i)[1];
		String platform_flex_field_default_value=arrPlatParam.get(i)[2];
		
			
		
		if (platform_flex_field_default_value.length()==0) {

			
			
			sql="select default_value from mad_platform_type_flex_fields "+
				" where platform_type_id=? and flex_field_id=? ";
			bindlist.clear();
			bindlist.add(new String[]{"INTEGER",platform_type_id});
			bindlist.add(new String[]{"INTEGER",platform_flex_field_id});

			arr=getDbArrayConf(conn, sql, 1, bindlist);
			if (arr.size()==1)  platform_flex_field_default_value=arr.get(0)[0];
			
		}
		
		
		sql="insert into mad_request_env_fields (request_id, environment_id, platform_id, application_id, flex_field_id, field_value, entuser, entdate) "+
			" values (?, ?, ?, ?, ?, ?, ?, now())";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		bindlist.add(new String[]{"INTEGER",environment_id});
		bindlist.add(new String[]{"INTEGER",platform_id});
		bindlist.add(new String[]{"INTEGER","0"});
		bindlist.add(new String[]{"INTEGER",platform_flex_field_id});
		bindlist.add(new String[]{"STRING",platform_flex_field_default_value});
		bindlist.add(new String[]{"INTEGER",""+curruser});
		
		
		execDBConf(conn, sql, bindlist);
			
		}
	
	
	
	sql="select distinct platform_id from mad_request_env_fields where request_id=? ";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});

	ArrayList<String[]> platformList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	for (int p=0;p<platformList.size();p++) {
		String platform_id=platformList.get(p)[0];
		
		sql="select  flex_field_id, default_value \n " + 
				"	from mad_application_flex_fields aff \n  " + 
				"	where application_id=? \n "+
				" and not exists ( \n "+
						" select 1 \n "+
						" from mad_request_env_fields ref \n " + 
						" where ref.request_id=? \n " + 
						" and ref.environment_id=? \n " +
						" and ref.platform_id=? \n " + 
						" and ref.application_id=aff.application_id \n " +
						" and ref.flex_field_id=aff.flex_field_id \n " +
				" ) ";
		
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",application_id});
		bindlist.add(new String[]{"INTEGER",request_id}); //*
		bindlist.add(new String[]{"INTEGER",environment_id}); //*
		bindlist.add(new String[]{"INTEGER",platform_id}); //*
		
		
		ArrayList<String[]> arrAppParam=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		
		for (int a=0;a<arrAppParam.size();a++) {
			
			String application_flex_field_id=arrAppParam.get(a)[0];
			String application_flex_field_default_value=arrAppParam.get(a)[1];
			
			sql="insert into mad_request_env_fields (request_id, environment_id, platform_id, application_id, flex_field_id, field_value, entuser, entdate) "+
					" values (?, ?, ?, ?, ?, ?, ?, now())";
			
			bindlist.clear();
			bindlist.add(new String[]{"INTEGER",request_id});
			bindlist.add(new String[]{"INTEGER",environment_id});
			bindlist.add(new String[]{"INTEGER",platform_id});
			bindlist.add(new String[]{"INTEGER",application_id});
			bindlist.add(new String[]{"INTEGER",application_flex_field_id});
			bindlist.add(new String[]{"STRING",application_flex_field_default_value});
			bindlist.add(new String[]{"INTEGER",""+curruser});
			
			execDBConf(conn, sql, bindlist);
			
			
		} 

	}
	
	String hostname=nvl((String) session.getAttribute("hostname"),"UNKNOWN");
	
	// CREATE INSERT HISTORY FOR NEW PARAMETERS
	sql="insert into mad_request_env_fields_history ( "+
			" request_env_fields_id, "+
			" request_id, "+
			" environment_id, "+
			" platform_id, "+
			" application_id, "+
			" flex_field_id, "+
			" field_value, "+
			" history_action, "+
			" history_user, "+
			" history_date, "+
			" history_host )  "+
		" select  "+
				" id, "+
				" request_id,  "+
				" environment_id,  "+
				" platform_id,  "+
				" application_id,  "+
				" flex_field_id,  "+
				" field_value, "+
				" 'INSERT', "+
				" entuser, "+
				" entdate, "+
				" ?  "+
		" from mad_request_env_fields where request_id=? and id>?";
	
	bindlist.clear();
	bindlist.add(new String[]{"STRING",""+hostname}); 
	bindlist.add(new String[]{"INTEGER",request_id}); 
	bindlist.add(new String[]{"INTEGER",max_env_fields_id}); 
	
	
	execDBConf(conn, sql, bindlist);
	
	
}


//****************************************************************************
String makeTagPicker(Connection conn, ServletContext application, HttpSession session, String application_id, String member_id, String current_tag, String current_ver, String use_cache) {
	
	
	StringBuilder sb=new StringBuilder();
	

	String sql=" select " +
			" class_name, par_hostname, par_username, "+
			" par_password, app_repo_policy, app_repo_tag_path, app_repo_tag_filter "+
			" from  mad_application a, mad_repository r "+
			" where a.repository_id=r.id "+
			" and a.id=?";		
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",application_id});
	ArrayList<String[]> repoparams=getDbArrayConf(conn, sql, 1, bindlist);
	
	String className=repoparams.get(0)[0];
	String repo_url=repoparams.get(0)[1];
	String username=repoparams.get(0)[2];
	String password=repoparams.get(0)[3];
	String app_repo_policy=repoparams.get(0)[4];
	String app_repo_tag_path=repoparams.get(0)[5];
	String filter=repoparams.get(0)[6];
	

	if (app_repo_policy.equals("PACKAGE_MEMBER")) {
		sql="select member_name, member_path from mad_request_application_member where id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",member_id});
		
		ArrayList<String[]> memArr=getDbArrayConf(conn, sql, 1, bindlist);

		if (memArr!=null && memArr.size()==1) {
			
			String member_name=memArr.get(0)[0];
			String member_path=memArr.get(0)[1];
			
			
			
			int last_ind=member_path.lastIndexOf(member_name);
			if (last_ind>-1) 
				app_repo_tag_path=member_path.substring(0,last_ind-1);
		}
		
		
		use_cache="NO";
		
	}
	
	
	//make sure maxlevel=1
	filter=filter + "\n+MAXLEVEL=1";
	
	//app_repo_tag_path=app_repo_tag_path.replace("\\", "\\\\");
	
	System.out.println("Getting tag list from repository ["+app_repo_tag_path+"] .");
	
	ArrayList<String> arr=null;

	if (use_cache.equals("YES"))
		arr=(ArrayList<String>) application.getAttribute("TAG_LIST_OF_"+application_id);
	
	if (arr!=null)
		System.out.println("Getting tag list from application cache...");
	else {
		long start_ts=System.currentTimeMillis();
		
		RepoExplorer re=new RepoExplorer();
		arr=re.getTagList(className,repo_url,username,password, app_repo_tag_path, filter);
		application.setAttribute("TAG_LIST_OF_"+application_id, arr);
		System.out.println("DONE. Getting tag list from repository ["+app_repo_tag_path+"]. took : " + (System.currentTimeMillis()-start_ts));
	}
	
	ArrayList<String[]> arrCombo=new ArrayList<String[]>();
	for (int i=0;i<arr.size();i++)
		arrCombo.add(new String[]{arr.get(i)});
	
	
	sb.append("<input type=hidden id=tag_search_application_id value=\""+clearHtml(application_id)+"\">");
	sb.append("<input type=hidden id=tag_search_member_id value=\""+clearHtml(member_id)+"\">");
	sb.append("<input type=hidden id=tag_search_current_tag value=\""+clearHtml(current_tag)+"\">");
	
	
	sb.append("<table class=\"table table-striped\">");
	
	
	
	sb.append("<tr class=warning>");
	sb.append("<td>");
	sb.append("<span class=\"label label-info\">Pick a Tag To Set</span>");
	sb.append("</td>");
	
	String onclick="reloadTagList('"+application_id+"', '"+member_id+"', '"+current_tag+"','"+current_ver+"')"; 
	
	sb.append("<td align=right>");
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\""+onclick+"\";><span class=\"glyphicon glyphicon-refresh\"> Reload </span></button>");
	sb.append("</td>");
	
	
	sb.append("</tr>");
	
	
	sb.append("<tr>");
	sb.append("<td colspan=2 align=left>");
	sb.append("<span class=\"label label-warning\"> "+app_repo_tag_path+"</span>");
	sb.append("</td>");
	sb.append("</tr>");
	
	sb.append("<tr>");
	sb.append("<td colspan=2 align=left>");
	sb.append("<span class=badge><input type=checkbox id=set_all_items_in_application> Set Tags OF All Items in the Applications</span>");
	sb.append("</td>");
	sb.append("</tr>");
	
	
	

	
	sb.append("<tr>");
	sb.append("<td>");
	sb.append(makeText("tag_search_box", "", "onkeyup=onTagSearchEnter(event) ", 0));
	sb.append("</td>");
	sb.append("<td width=\"10%\">");
	sb.append("<span class=badge onclick=\"performTagSearch();\">");
	sb.append("<span class=\"glyphicon glyphicon-filter\"></span>");
	sb.append("</span>");
	sb.append("</td>");
	sb.append("</tr>");
	
	
	sb.append("<tr>");
	sb.append("<td colspan=2>");
	sb.append("<div id=tagListSearchDiv>");
	sb.append(makeComboArr(arrCombo, "", "size=8 id=tag_list_of_"+member_id+ " onclick=clickTag('"+application_id+"','"+member_id+"','TAG'); ", current_tag, 0));
	sb.append("</div>");
	sb.append("</td>");
	sb.append("</tr>");
	
	
	sb.append("<tr>");
	sb.append("<td colspan=2>");
	sb.append("<div id=versionDetailDiv>");
	sb.append(getTagVersionDetail(conn,session, application_id, member_id, current_tag, "LATEST" ));
	sb.append("</div>");
	sb.append("</td>");
	sb.append("</tr>");
	
	
	sb.append("</table>");
		
	return sb.toString();
}

//*************************************************************************
String searchTagList(Connection conn, ServletContext application, HttpSession session, String application_id, String member_id, String current_tag, String search_val) {
	StringBuilder sb=new StringBuilder();
	
	
	
	ArrayList<String> arr=(ArrayList<String>) application.getAttribute("TAG_LIST_OF_"+application_id);
	
	if (arr==null) return "no list found";
	
	ArrayList<String[]> arrCombo=new ArrayList<String[]>();
	
	for (int i=0;i<arr.size();i++) {

		if (arr.get(i).contains(search_val))
			arrCombo.add(new String[]{arr.get(i)});
	}
		
			
	sb.append(makeComboArr(arrCombo, "", "size=8 id=tag_list_of_"+member_id+ " onDblClick=placeTag(); onclick=clickTag('"+application_id+"','"+member_id+"','VERSION'); ", current_tag, 0));

	
	return sb.toString();
}



//*************************************************************************
String makeMadAttachmentDialog(Connection conn, HttpSession session, String request_id, String flex_field_id) {
	StringBuilder sb=new StringBuilder();
	
	String sql="select id from mad_request_attachment where request_id=? and flex_field_id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	bindlist.add(new String[]{"INTEGER",request_id});
	bindlist.add(new String[]{"INTEGER",flex_field_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	session.setAttribute("attachment_attachment_id", "");
	
	if (arr.size()==1) {
		session.setAttribute("attachment_attachment_id", arr.get(0)[0]);
	} else {
		
		sql="SELECT AUTO_INCREMENT FROM information_schema.tables WHERE table_name = 'mad_request_attachment' AND table_schema = DATABASE()";
		bindlist.clear();
		arr=getDbArrayConf(conn, sql, 1, bindlist);
		session.setAttribute("attachment_attachment_id", arr.get(0)[0]);
		
		
		sql="insert into mad_request_attachment (request_id, flex_field_id) values (?, ?)";
    	bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
    	bindlist.add(new String[]{"INTEGER",flex_field_id});
    	
    	execDBConf(conn, sql, bindlist);
    	
	}
	
	sb.append(
		//"<div class=\"bootbox-body\">"+
		"<form action=\"uploadRequestFile.jsp\" method=\"post\" target=\"hiddenframe\" enctype=\"multipart/form-data\">"+
		"<center> \n" +
		"<h3>Select File To Upload</h3> \n" +
		"	<div class=\"form-group\">"+
		"		<input id=\"file\" name=\"file\" type=\"file\" multiple=true data-preview-file-type=\"any\">"+
		"	</div>"+
		" <hr>" +
		" <input type=submit class=\"btn btn-success\" value=\"Upload File\" onclick=closeAttachmentWindow('"+request_id+"','"+flex_field_id+"')>" +
		"</center> \n" +
		"</form>"+
		""+
		"<script>\n"+
		"$(\"#file\").fileinput({ \n"+
		"maxFileSize: 100000, \n"+
		"maxFilesNum: 1, \n"+
		"});"+
		"</script>"//+
		//"</div>"
	);
	
	return sb.toString();
}

//*************************************************************************
void deleteMadAttachment(Connection conn, HttpSession session, String request_id, String flex_field_id) {
	
	String sql="update mad_request_attachment set file_name=null, file_size=0, file_blob=null, entuser=null,entdate=null " +
				" where request_id=? and flex_field_id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	bindlist.add(new String[]{"INTEGER",request_id});
	bindlist.add(new String[]{"INTEGER",flex_field_id});
	
	
  	execDBConf(conn, sql, bindlist);
  	
}

//*************************************************************************
String getMadAttachmentId(Connection conn, HttpSession session, String request_id, String flex_field_id) {
	
	String sql="select id from mad_request_attachment where request_id=? and flex_field_id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	bindlist.add(new String[]{"INTEGER",request_id});
	bindlist.add(new String[]{"INTEGER",flex_field_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==0)  return "0";
	
	
	return arr.get(0)[0];
}

//*************************************************************************
String getTagVersionDetail(Connection conn, HttpSession session, String application_id, String member_id, String tag, String version) {
	StringBuilder sb=new StringBuilder();
	
	ArrayList<String[]> verArr=new ArrayList<String[]>();
	
	if (tag.length()==0) return "";
	
	
	
	String sql=" select " +
			" class_name, par_hostname, par_username, "+
			" par_password, app_repo_policy, app_repo_tag_path, app_repo_tag_filter "+
			" from  mad_application a, mad_repository r "+
			" where a.repository_id=r.id "+
			" and a.id=?";		
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",application_id});
	ArrayList<String[]> repoparams=getDbArrayConf(conn, sql, 1, bindlist);
	
	String className=repoparams.get(0)[0];
	String repo_url=repoparams.get(0)[1];
	String username=repoparams.get(0)[2];
	String password=repoparams.get(0)[3];
	String app_repo_tag_policy=repoparams.get(0)[4];
	String tag_root_path=repoparams.get(0)[5];
	String tag_filter=repoparams.get(0)[6];
	
	sql="select member_path from mad_request_application_member where id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",member_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);

	String member_path="";
	
	try{member_path=arr.get(0)[0];} catch(Exception e) {member_path=tag_root_path+"/"+tag; e.printStackTrace();}
	String version_path=tag_root_path+"/"+tag;
	
	if (app_repo_tag_policy.equals("PACKAGE_MEMBER")) {
		version_path=member_path;
	}
	
	RepoExplorer re=new RepoExplorer();
	
	
	verArr=re.getVersioningInfo(className,repo_url,username,password, version_path);
	
	
	int ID_VER=0;
	int ID_BY=1;
	int ID_DATE=2;
	int ID_COMMENT=3;
	String version_comment="" ;
	
	if (verArr!=null)
	for (int i=0;i<verArr.size();i++) {
		String[] a=verArr.get(i);
		String[] b=new String[]{a[ID_VER],a[ID_VER] + " ["+a[ID_BY]+"] @" + a[ID_DATE] };
		verArr.set(i,b);
		if (a[ID_VER].equals(version)) version_comment=nvl(a[ID_COMMENT],"[no comment!]");
		if (version.equals("LATEST") && i==0) version_comment=nvl(a[ID_COMMENT],"[no comment!]");
	}

	
	sb.append("<table>");
	
	
	sb.append("<tr>");
	sb.append("<td align=right><span class=\"label label-info\">Version</span></td>");
	sb.append("<td>");
	sb.append(makeComboArr(verArr, "", " size=1 id=tag_version_list onchange=clickTag('"+application_id+"','"+member_id+"')", version, 0));
	sb.append("</td>");
	sb.append("</tr>");
	
	sb.append("<tr>");
	sb.append("<td><span class=\"label label-info\">Comment</span></td>");
	sb.append("<td>");
	sb.append(version_comment);
	sb.append("</td>");
	sb.append("</tr>");
	
	sb.append("</table>");
	
	return sb.toString();
}



//*************************************************************************
void setTagInfo(Connection conn, HttpSession session,  String member_id, String tag_to_set, String version_to_set, String set_all_application_items) {
	String sql="update mad_request_application_member set member_tag_info=? where id=?";
		
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	
	if (set_all_application_items.equals("YES")) {
		
		sql="select request_id, application_id from mad_request_application_member where id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",member_id});
		ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
		if (arr==null | arr.size()==0) return;
		
		String request_id=arr.get(0)[0];
		String application_id=arr.get(0)[1];
		
		sql="update mad_request_application_member set member_tag_info=?, member_version=?"+
			" where request_id=? and application_id=?";
		
		bindlist.clear();
		bindlist.add(new String[]{"STRING",tag_to_set});
		bindlist.add(new String[]{"STRING",version_to_set});
		bindlist.add(new String[]{"INTEGER",request_id});
		bindlist.add(new String[]{"INTEGER",application_id});
		
		execDBConf(conn, sql, bindlist);
		
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		bindlist.add(new String[]{"INTEGER",application_id});
		
		String del_sql="select id from mad_request_application_member "+
				" where request_id=? and application_id=?";
		ArrayList<String[]> delArr=getDbArrayConf(conn, del_sql, Integer.MAX_VALUE, bindlist);
		for (int h=0;h<delArr.size();h++) {
			String upd_id=delArr.get(h)[0];
			createHistory(conn, session, "UPDATE", "mad_request_application_member", upd_id);
		}
		
	} else {
		sql="update mad_request_application_member set member_tag_info=?, member_version=? where id=?";
		bindlist.clear();
		bindlist.add(new String[]{"STRING",tag_to_set});
		bindlist.add(new String[]{"STRING",version_to_set});
		bindlist.add(new String[]{"INTEGER",member_id});
		
		execDBConf(conn, sql, bindlist);
		
		createHistory(conn, session, "UPDATE", "mad_request_application_member", member_id);
	}
	
	
	
}

//*************************************************************************
void clearMadSearchAllFilters(HttpSession session, String search_mode) {
	
	session.setAttribute(search_mode+"_FILTER_KEYWORD", null);
	session.setAttribute(search_mode+"_filter_request_group", null);
	session.setAttribute(search_mode+"_filter_request_type", null);
	session.setAttribute(search_mode+"_FILTER_MEMBER_PATH", null);
	session.setAttribute(search_mode+"_FILTER_APPLICATIONS", null);
	session.setAttribute(search_mode+"_FILTER_ENVIRONMENTS", null);
	
	
	session.setAttribute(search_mode+"_search_request_by_text", null);
	session.setAttribute(search_mode+"_filter_request_group", null);
	session.setAttribute(search_mode+"_filter_request_type", null);
	session.setAttribute(search_mode+"_filter_request_status", null);
	session.setAttribute(search_mode+"_filter_request_created_by", null);
	session.setAttribute(search_mode+"_filter_request_date", null);
	session.setAttribute(search_mode+"_filter_deployment_date", null);
	
	
	
}
 
//*************************************************************************
void setMadSearchFilter(HttpSession session, String filter_key, String filter_value, String search_mode) {
	session.setAttribute(search_mode+"_"+filter_key, filter_value);
}


//*************************************************************************
String getMadSearchFilter(HttpSession session, String filter_key,  String search_mode) {
	return nvl((String) session.getAttribute(search_mode+"_"+filter_key),"");

}

ArrayList<String[]> filterbindlist=new ArrayList<String[]>();

//*****************************************************************************
String buildRequestFilter(Connection conn, HttpSession session, String search_mode, String skip_filters) {
	StringBuilder sb=new StringBuilder();
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	filterbindlist.clear();
	int curruser=(Integer) session.getAttribute("userid");
	
	ArrayList<String[]> arrQ=new ArrayList<String[]>();
	if (!skip_filters.equals("YES") ) {
		//********* Set Saved Filters
		sql="select id, query_statement from mad_query where query_user=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",""+curruser});
		arrQ=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		for (int i=0;i<arrQ.size();i++) {
			String query_id=arrQ.get(i)[0];
			String xml=arrQ.get(i)[1];

			String state=nvl((String) session.getAttribute("MAD_QUERY_"+query_id),"UNSET");
			
			if (state.equals("UNSET")) continue;
			if (xml.trim().length()==0) continue;
			//Paket Select modunda user filtreleri kullanma
			if (search_mode.equals("SELECT")) continue;
			
			
			setPrivateFiltersByXML(session,xml); 
		}
	}
	
	//---------------------------------- -----------------
	String FILTER_KEYWORD=getMadSearchFilter(session,"FILTER_KEYWORD",search_mode);
	
	if (FILTER_KEYWORD!=null && FILTER_KEYWORD.length()>0) {
		
		
		int id=0;
		try{id=Integer.parseInt(FILTER_KEYWORD);} catch(Exception e) {id=-1;}
		if (id>-1) {
			sb.append(""+
					" and \n" + 
					" ( \n"+
					"   r.id=? \n"+
					" 	OR \n"+
					" 	exists \n" +
					" 	( \n" +
					"	select 1 from mad_keywords \n" +
					"	where object_type='mad_request' \n" +
					"	and MATCH (keywords) AGAINST(?) \n" +
					"	and object_id=r.id \n" +
					"	) " +
					" ) "
					);
		
			filterbindlist.add(new String[]{"INTEGER",FILTER_KEYWORD});
			filterbindlist.add(new String[]{"INTEGER",FILTER_KEYWORD});
		
		} else {
			
			sb.append(""+
					" and " +
					"   exists  ( \n" +
					" 	select 1 from mad_keywords \n" +
					"	where object_type='mad_request' \n" +
					"	and  MATCH (keywords) AGAINST(?) \n" +
					"	and object_id=r.id \n" +
					"	) "  
					);
			filterbindlist.add(new String[]{"STRING",FILTER_KEYWORD});

		}
	}
	
	
	//---------------------------------- -----------------
	String FILTER_MEMBER_PATH=getMadSearchFilter(session,"FILTER_MEMBER_PATH",search_mode);
	
	
	if (FILTER_MEMBER_PATH!=null && !nvl(FILTER_MEMBER_PATH,"${null}").equals("${null}") ) {
		sb.append(""+
				" and " +
				"   exists (\n" + 
				"   select 1 from mad_request_application_member where request_id=r.id and upper(member_path) like upper(concat('%',?,'%')) \n" + 
				"   ) \n" 
				);
		filterbindlist.add(new String[]{"STRING",FILTER_MEMBER_PATH});
	}
		
	//---------------------------------- -----------------
	String FILTER_APPLICATIONS=getMadSearchFilter(session,"FILTER_APPLICATIONS",search_mode);
	
	
	if (FILTER_APPLICATIONS!=null && !nvl(FILTER_APPLICATIONS,"${null}").equals("${null}") ) {
		String app_sql=""+
				" and " +
				"   exists (\n" + 
				"   select 1 from mad_request_application_member where request_id=r.id and application_id in (#) and to_skip='NO' \n" + 
				"   ) \n";
		
		ArrayList<String[]> pickArr=string2PicklistArr(FILTER_APPLICATIONS, "\\|::\\|");
		String qrystr="";
		int cnt=0;
		for (int a=0;a<pickArr.size();a++) {
			int a_id=0;
			try {a_id=Integer.parseInt(pickArr.get(a)[0]);} catch(Exception e) {continue;}
			if (cnt>0) qrystr=qrystr+",";
			qrystr=qrystr+"?";
			cnt++;
			
			filterbindlist.add(new String[]{"INTEGER",""+a_id});
		}
		
		if (cnt>0) {
			app_sql=app_sql.replace("#", qrystr);
			sb.append(app_sql);
		}
		
	}
	
	
	//---------------------------------- -----------------
	String FILTER_ENVIRONMENTS=getMadSearchFilter(session,"FILTER_ENVIRONMENTS",search_mode);
	
	
	if (FILTER_ENVIRONMENTS!=null && !nvl(FILTER_ENVIRONMENTS,"${null}").equals("${null}") ) {
		String app_sql=""+
				" and " +
				"   exists (\n" + 
				"     select 1 from mad_request_app_env \n" +
				"     WHERE \n" +
				"	  request_id in (select request_id from mad_request_link where request_id=r.id or linked_request_id=r.id)  \n"+
				"     and environment_id in (#)  \n" + 
				"   ) \n";
		ArrayList<String[]> pickArr=string2PicklistArr(FILTER_ENVIRONMENTS, "\\|::\\|");
		String qrystr="";
		int cnt=0;
		for (int a=0;a<pickArr.size();a++) {
			int a_id=0;
			try {a_id=Integer.parseInt(pickArr.get(a)[0]);} catch(Exception e) {continue;}
			if (cnt>0) qrystr=qrystr+",";
			qrystr=qrystr+"?";
			cnt++;
			filterbindlist.add(new String[]{"INTEGER",""+a_id});
		}
		if (cnt>0) {
			app_sql=app_sql.replace("#", qrystr);
			sb.append(app_sql);
		}
		
	}
	
	//------------------------------------------------------------------------------------------
	String filter_request_group=nvl(getMadSearchFilter(session, "filter_request_group",search_mode),"0");
	
	if (!filter_request_group.equals("0")) {
	
			String query_statement=" and r.request_type_id in (select id from mad_request_type where request_group=?) ";
			filterbindlist.add(new String[]{"STRING",""+filter_request_group});
			sb.append( " \n" + query_statement + " \n");
		
	}
	
	//------------------------------------------------------------------------------------------
	String filter_request_type=nvl(getMadSearchFilter(session, "filter_request_type",search_mode),"0");
	if (!filter_request_type.equals("0")) {
			String query_statement=" and r.request_type_id=? ";
			filterbindlist.add(new String[]{"INTEGER",""+filter_request_type});
			sb.append( " \n" + query_statement + " \n");
		
	}
	
	//------------------------------------------------------------------------------------------
	String FILTER_REQUEST_STATUS=nvl(getMadSearchFilter(session, "filter_request_status",search_mode),"${empty}");
	if (!FILTER_REQUEST_STATUS.equals("${empty}")) {
		
		ArrayList<String> arr=new ArrayList<String>();
		String[] sarr=FILTER_REQUEST_STATUS.split("\\|::\\|");
		for (int p=0;p<sarr.length;p++) 
			if (sarr[p].trim().length()>0) arr.add(sarr[p]);
		
		String in_stmt="";
		for (int r=0;r<arr.size();r++) {
			String str=arr.get(r);
			if (r>0) in_stmt=in_stmt+", ";
			in_stmt=in_stmt+"?";
			filterbindlist.add(new String[]{"STRING",""+str});
		}
		if (arr.size()>0) {
			String query_statement=" and r.status in(${statusall})";
			query_statement=query_statement.replace("${statusall}", in_stmt);
			sb.append( " \n" + query_statement + " \n");
		}
		
	}
	
	//------------------------------------------------------------------------------------------
	String FILTER_REQUEST_CREATED_BY=nvl(getMadSearchFilter(session, "filter_request_created_by",search_mode),"${empty}");
	
	
	
	if (!FILTER_REQUEST_CREATED_BY.equals("${empty}")) {
		
		ArrayList<String> arr=new ArrayList<String>();
		String[] sarr=FILTER_REQUEST_CREATED_BY.split("\\|::\\|");
		for (int p=0;p<sarr.length;p++) 
			if (sarr[p].trim().length()>0) arr.add(sarr[p]);
		
		String in_stmt="-99999";
		
		
		ArrayList<String> userList=new ArrayList<String>();
		
		
		
		for (int r=0;r<arr.size();r++) {
			String str=arr.get(r);
			
			
			
			String cr_type=str.split("\\.")[0];
			String cr_id=str.split("\\.")[1];
			
			
			
			userList.clear();
			
			if (cr_type.equals("USR")) 	userList.add(cr_id);
			
			
			if (cr_type.equals("GRP")) {
				sql="select distinct member_id from mad_group_members gm, tdm_user u "+
					"	where member_type='USER' and gm.member_id=u.id "+
					"	and group_id=?";
				bindlist.clear();
				bindlist.add(new String[]{"INTEGER",cr_id});
				ArrayList<String[]> arrL=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
				
				for (int u=0;u<arrL.size();u++)  if (!userList.contains(arrL.get(u)[0])) userList.add(arrL.get(u)[0]);
				
			}
			
			
			for (int u=0;u<userList.size();u++) {
				
				in_stmt=in_stmt+", ?";
				filterbindlist.add(new String[]{"STRING",""+userList.get(u)});
			}
			
		}
		
		if (arr.size()>0) {
			String query_statement=" and r.entuser in(${entuserall})";
			query_statement=query_statement.replace("${entuserall}", in_stmt);
			sb.append( " \n" + query_statement + " \n");
		}
		
	}

	//------------------------------------------------------------------------------------------
	String FILTER_REQUEST_DATE=nvl(getMadSearchFilter(session, "filter_request_date",search_mode),"");
	
	
	
	if (!nvl(FILTER_REQUEST_DATE,"x").equals("x")) {
		
		ArrayList<String[]> datecondbindlist=new ArrayList<String[]>();
		String date_condition=makeDateCondition(FILTER_REQUEST_DATE, datecondbindlist);
		
		if (date_condition.length()>0) {
			String date_condition_tmp="\n and r.entdate #DATECONDITION# \n";
			date_condition_tmp=date_condition_tmp.replace("#DATECONDITION#", date_condition);
			filterbindlist.addAll(datecondbindlist);
			sb.append( date_condition_tmp);
		}
		
	}
	
	
	//------------------------------------------------------------------------------------------
	String FILTER_DEPLOYMENT_DATE=nvl(getMadSearchFilter(session, "filter_deployment_date",search_mode),"");
	
	
	
	if (!nvl(FILTER_DEPLOYMENT_DATE,"x").equals("x")) {
		
		ArrayList<String[]> datecondbindlist=new ArrayList<String[]>();
		String date_condition=makeDateCondition(FILTER_DEPLOYMENT_DATE, datecondbindlist);
		
		if (date_condition.length()>0) {
			String date_condition_tmp="";
			
			date_condition_tmp=""+
					" AND exists (\n" + 
					"	select 1 \n"+
					"	from  \n"+
					"	mad_request_flow_logs log , \n"+
					"	mad_flow_state fs1, \n"+
					"	mad_flow_state fs2 \n"+
					"	where request_id=r.id \n"+
					"	and status='CLOSED' \n"+
					"	and log.flow_state_id=fs1.id \n"+
					"	and log.next_state_id=fs2.id \n"+
					"	and fs1.state_stage='DEPLOY' \n"+
					"	and fs2.state_stage='DEPLOY_SUCCESS' \n"+
					"	and next_state_date #DATECONDITION# \n" +	
					"	limit 0,1 \n"+
					"	union all \n"+
					"	select 1  \n"+
					"	from  \n"+
					"	mad_request_flow_logs log , \n"+
					"	mad_flow_state fs1, \n"+
					"	mad_flow_state fs2, \n"+
					"	mad_request_link lnk \n"+
					"	where linked_request_id=r.id \n"+
					"	and log.request_id=lnk.request_id \n"+
					"	and status='CLOSED' \n"+
					"	and log.flow_state_id=fs1.id \n"+
					"	and log.next_state_id=fs2.id \n"+
					"	and fs1.state_stage='DEPLOY' \n"+
					"	and fs2.state_stage='DEPLOY_SUCCESS' \n"+
					"	and next_state_date #DATECONDITION# \n" +	
					"	limit 0,1 \n"+
					" ) ";
			
			
			date_condition_tmp=date_condition_tmp.replace("#DATECONDITION#", date_condition);
			filterbindlist.addAll(datecondbindlist);

			date_condition_tmp=date_condition_tmp.replace("#DATECONDITION#", date_condition);
			filterbindlist.addAll(datecondbindlist);

			sb.append( date_condition_tmp);
		}
		
	}
	
	//------------------------------------------------------------------------------------------
	ArrayList<String[]> flexFiltersArr=getFlexFieldFilters(session, search_mode);
	
	
	
	
	if (flexFiltersArr!=null) {
		for (int f=0;f<flexFiltersArr.size();f++) {
			String flex_field_type=flexFiltersArr.get(f)[0];
			String flex_field_id=flexFiltersArr.get(f)[1];
			String filter_value=flexFiltersArr.get(f)[2];
			
			
			
			String query_statement="";
			
			ArrayList<String> picklistArr=new ArrayList<String>();
			if (flex_field_type.equals("LIST") ) {
				String[] pickArr=filter_value.split("\\|::\\|");
				for (int p=0;p<pickArr.length;p++) 
					if (pickArr[p].trim().length()>0) picklistArr.add(pickArr[p]);
			}
			
			if (flex_field_type.equals("LIST") && picklistArr.size()>0) {
				query_statement=" and exists ( select 1 from mad_request_fields where request_id=r.id and flex_field_id=? and field_value in (${listvals}) ) ";
				filterbindlist.add(new String[]{"INTEGER",""+flex_field_id});
				String in_stmt="";
				for (int r=0;r<picklistArr.size();r++) {
					String list_id=picklistArr.get(r);
					if (r>0) in_stmt=in_stmt+", ";
					in_stmt=in_stmt+"?";
					filterbindlist.add(new String[]{"STRING",""+list_id});
				}
				query_statement=query_statement.replace("${listvals}", in_stmt);
			}
			
			if (flex_field_type.equals("CHECKBOX")) {
				if (filter_value.equals("ALL")) continue;
				
				query_statement=" and exists ( select 1 from mad_request_fields where request_id=r.id and flex_field_id=?  and field_value=?) ";
				filterbindlist.add(new String[]{"INTEGER",""+flex_field_id});
				filterbindlist.add(new String[]{"STRING",""+filter_value});
			}
			if (flex_field_type.equals("PICKLIST")) {
				
				String[] pick_list_items=filter_value.split(" ");
				for (int p=0;p<pick_list_items.length;p++) {
					String a_item=pick_list_items[p];
					if (a_item.trim().length()==0) continue;
					
					query_statement=query_statement+" and exists ( select 1 from mad_request_fields where request_id=r.id and flex_field_id=?  " +
							" and (field_value=? or field_value like ? or field_value like ? or field_value like ?) ) \n";
					filterbindlist.add(new String[]{"INTEGER",""+flex_field_id});
					filterbindlist.add(new String[]{"STRING",""+filter_value}); //equals
					filterbindlist.add(new String[]{"STRING",""+filter_value+"|::|%"}); //starts with
					filterbindlist.add(new String[]{"STRING","%|::|"+filter_value+"|::|%"}); //between
					filterbindlist.add(new String[]{"STRING","%|::|"+filter_value+""}); //ends with
					
				}
				
				
			}
			if (flex_field_type.equals("TEXT")) {
				query_statement=" and exists ( select 1 from mad_request_fields where request_id=r.id and flex_field_id=?  and field_value like ?) ";
				filterbindlist.add(new String[]{"INTEGER",""+flex_field_id});
				filterbindlist.add(new String[]{"STRING",""+filter_value});
			}
			
			
			
			if (flex_field_type.equals("DATE") || flex_field_type.equals("DATETIME")) {


				if (nvl(filter_value,"x").equals("x"))  continue;
				
				ArrayList<String[]> datecondbindlist=new ArrayList<String[]>();
				String date_condition=makeDateCondition(filter_value, datecondbindlist);
				
				//System.out.println("Flex field date_condition=" +date_condition + " for filter " + filter_value);
						
				if (date_condition.length()>0) {
					query_statement=" and exists ( select 1 from mad_request_fields where request_id=r.id and flex_field_id=?  and field_value_ts #DATECONDITION# ) ";
					query_statement=query_statement.replace("#DATECONDITION#", date_condition);
					filterbindlist.add(new String[]{"INTEGER",""+flex_field_id});
					filterbindlist.addAll(datecondbindlist);
				}
				
				
				
				
			}
			
			if (flex_field_type.equals("NUMBER")) {
				
				if (nvl(filter_value,"xtox").equals("xtox"))  continue;
				
				ArrayList<String[]> numbercondbindlist=new ArrayList<String[]>();
				String number_condition=makeNumberCondition(filter_value, numbercondbindlist);
				
						
				if (number_condition.length()>0) {
					query_statement=" and exists ( select 1 from mad_request_fields where request_id=r.id and flex_field_id=?  and field_value_num #NUMBERCONDITION# ) ";
					query_statement=query_statement.replace("#NUMBERCONDITION#", number_condition);
					filterbindlist.add(new String[]{"INTEGER",""+flex_field_id});
					filterbindlist.addAll(numbercondbindlist);
				}
				
				
				
				
			}
			
			if (query_statement.length()>0) sb.append( " \n" + query_statement + " \n");
			
		} // for f
	}
	
	//------------------------------------------------------------------------------------------
	String state_waiting_my_action=nvl((String) session.getAttribute("MAD_QUERY_WAITING_MY_ACTION"),"UNSET");
	if (state_waiting_my_action.equals("SET")) {
		session.setAttribute("MAD_QUERY_WAITING_MY_ACTION","UNSET");
		
		ArrayList<String[]> waitingArr=(ArrayList<String[]>) session.getAttribute("WAITING_ACTION_LIST");
		
		if (waitingArr!=null && waitingArr.size()>0) {
			String query_statement=" and r.id in (${actionrequestids}) ";
			String in_stmt="";
			for (int r=0;r<waitingArr.size();r++) {
				String request_id=waitingArr.get(r)[0];
				if (r>0) in_stmt=in_stmt+", ";
				in_stmt=in_stmt+"?";
				filterbindlist.add(new String[]{"INTEGER",""+request_id});
			}
			query_statement=query_statement.replace("${actionrequestids}", in_stmt);
			sb.append( query_statement + " \n");
		}
		
	}
	
	//------------------------------------------------------------------------------------------

	sql="select id, query_statement from mad_query where query_user=0";
	bindlist.clear();
	arrQ=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	for (int i=0;i<arrQ.size();i++) {
		String query_id=arrQ.get(i)[0];
		String query_statement=arrQ.get(i)[1];
		
		String state=nvl((String) session.getAttribute("MAD_QUERY_"+query_id),"UNSET");
		
		if (state.equals("UNSET")) continue;
		if (query_statement.trim().length()==0) continue;
		//Paket Select modunda global filtreleri kullanma
		if (search_mode.equals("SELECT")) continue;
		
		if (query_statement.contains("${curruser}")) {
			query_statement=query_statement.replace("${curruser}", "?");
			filterbindlist.add(new String[]{"INTEGER",""+curruser});
		}
		
		if (query_statement.contains("${actionrequestids}")) {
			
			
			ArrayList<String[]> waitingArr=(ArrayList<String[]>) session.getAttribute("WAITING_ACTION_LIST");
			
			String in_stmt="";
			
			if (waitingArr==null || waitingArr.size()==0)  in_stmt="-9999";
			else {
				
				for (int r=0;r<waitingArr.size();r++) {
					String request_id=waitingArr.get(r)[0];
					if (r>0) in_stmt=in_stmt+", ";
					in_stmt=in_stmt+"?";
					filterbindlist.add(new String[]{"INTEGER",""+request_id});
				}
			}
			
			
			query_statement=query_statement.replace("${actionrequestids}", in_stmt);

		}

		
		if (query_statement.contains("${currgroup}")) {
			
			ArrayList<String> group_members=getGroupMembers(conn, session, ""+curruser); 
			String bind_statement="";
			for (int g=0;g<group_members.size();g++) {
				if (g>0) bind_statement=bind_statement+", "; 
				bind_statement=bind_statement+"?";
			}
			
			query_statement=query_statement.replace("${currgroup}", bind_statement);
			
			for (int g=0;g<group_members.size();g++) 
				filterbindlist.add(new String[]{"INTEGER",""+group_members.get(g)});
		}
		
		
		
		sb.append( " and exists \n");
		sb.append(" (select 1 from mad_request x where x.id=r.id and  " + query_statement + " ) \n" );
	
		
		
		

		
	}
	
	
	return sb.toString();
}



//***********************************************
String getStateProperty(Connection conn, HttpSession session, int attempt_no, String flow_id, String state_name,String prop_name) {
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	String sql="select fs.flow_id, state_name, state_title, state_stage " +
		"	from mad_request_type rt, mad_flow_state fs " +
		"	where rt.flow_id=fs.flow_id ";
	bindlist.clear();
	
	ArrayList<String[]> stateArr=(ArrayList<String[]>) session.getAttribute("FLOW_STATE_LIST");
	
	if (stateArr==null || attempt_no==0) 
		stateArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	if (attempt_no==0) 
		session.setAttribute("FLOW_STATE_LIST", stateArr);
	
	for (int i=0;i<stateArr.size();i++) {
		if (stateArr.get(i)[0].equals(flow_id) && stateArr.get(i)[1].equals(state_name)) {
			if (prop_name.equals("TITLE")) return stateArr.get(i)[2];
			if (prop_name.equals("STAGE")) return stateArr.get(i)[3];
		}
			
	}
	
	return state_name;
}
 
//***********************************************
String loadRequestList(Connection conn, HttpSession session, String search_mode, String main_request_id, String skip_filters) {
	StringBuilder sb=new StringBuilder();
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	ArrayList<String> addedPackageArr=new ArrayList<String>();
	
	if (!nvl(main_request_id,"x").equals("x")) {
		sql="select linked_request_id from mad_request_link where request_id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",main_request_id});
		ArrayList<String[]> sarr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		if (sarr!=null)
			for (int i=0;i<sarr.size();i++)
				addedPackageArr.add(sarr.get(i)[0]);
	}
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	
	
	
	
	
	sql="select r.id, r.status, r.request_type_id, request_type, description, request_group, entdate, \n" + 
			"concat(ru.fname, ' ', ru.lname)  entuser, \n" +
			" flow_id \n" + 
			" from mad_request r, mad_request_type t, tdm_user ru \n" + 
			" where r.request_type_id=t.id and  r.entuser=ru.id and is_saved='YES' \n"+
			" #REQUESTFILTER# \n" + 
			" #ORDERBYSTATEMENT# \n";
	
	bindlist.clear();
	
	
	String filter=buildRequestFilter(conn, session, search_mode, skip_filters);
	sql=sql.replace("#REQUESTFILTER#", filter);
	
	
	
	
	String sort_statement=nvl((String) session.getAttribute("sort_statement"),"");
	
	if (sort_statement.trim().length()>0) {
		sql=sql.replace("#ORDERBYSTATEMENT#", "order by "+sort_statement);
	} else {
		sql=sql.replace("#ORDERBYSTATEMENT#", "order by r.id desc");
	}


	System.out.println(sql);

	
	
	
	for (int i=0;i<filterbindlist.size();i++) { 
		System.out.println(""+i+"\t"+filterbindlist.get(i)[1]);
		bindlist.add(filterbindlist.get(i));
	}
		
	
	int limit=100;
	if (search_mode.equals("SELECT")) limit=1000;
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, limit, bindlist);
	
	ArrayList<String[]> stateArr=new ArrayList<String[]>();
	if (arr!=null && arr.size()>0) {
		sql="select fs.flow_id, state_name, state_title " +
			"	from mad_request_type rt, mad_flow_state fs " +
			"	where rt.flow_id=fs.flow_id ";
		bindlist.clear();
		stateArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	}
	
	
	sb.append("<table class=\"table table-condensed table-striped table-bordered\">");
	
	sb.append("<tr class=info>");
	if (search_mode.equals("SELECT"))
	{
		sb.append("<td valign=bottom>");
		sb.append("<input type=checkbox id=select_packaged_ch_all onclick=packSelectDeselectAll()>");
		sb.append("</td>");
	}
	
	
	sb.append("<td nowrap align=right><b>"+makeFieldOrderBtn(conn, session, "r.id")+"</b></td>");
	sb.append("<td nowrap><b>"+makeFieldOrderBtn(conn, session, "r.description")+decodeStringTitle(conn, session, "Description", "SYS_REQ_LIST_TITLES_DESCRIPTION", false)+"</b></td>");
	sb.append("<td nowrap><b>"+makeFieldOrderBtn(conn, session, "request_type")+decodeStringTitle(conn, session, "Type", "SYS_REQ_LIST_TITLES_TYPE", false)+"</b></td>");
	sb.append("<td nowrap><b>"+makeFieldOrderBtn(conn, session, "r.status")+decodeStringTitle(conn, session, "Status", "SYS_REQ_LIST_TITLES_STATUS", false)+"</b></td>");
	sb.append("<td nowrap><b>"+makeFieldOrderBtn(conn, session, "r.entuser")+decodeStringTitle(conn, session, "Created By", "SYS_REQ_LIST_TITLES_CREATED_BY", false)+"</b></td>");
	sb.append("<td nowrap><b>"+makeFieldOrderBtn(conn, session, "r.entdate")+decodeStringTitle(conn, session, "Creation Time", "SYS_REQ_LIST_TITLES_CREATED_AT", false)+"</b></td>");
	sb.append("</tr>");
	
	
	ArrayList<String[]> typeArr=getPackageTypeList(conn, session, "ALL", false);
	ArrayList<String> typeArrString=new ArrayList<String>();
	for (int i=0;i<typeArr.size();i++) 
		typeArrString.add(typeArr.get(i)[0]);
	
		
	
	
	
	for (int i=0;i<arr.size();i++) {
		String request_id=arr.get(i)[0];
		String request_status=arr.get(i)[1];
		String request_type_id=arr.get(i)[2];
		String request_type=arr.get(i)[3];
		String description=arr.get(i)[4];
		String request_group=arr.get(i)[5];
		String entdate=arr.get(i)[6];
		String entuser=arr.get(i)[7];
		String flow_id=arr.get(i)[8];
		
		if (!request_group.equals("PACKAGE") && !request_group.equals("DEPLOYMENT")) 
			if (typeArrString.indexOf(request_type_id)==-1) {
				continue;
			}
			
		String request_status_title=request_status;
		String request_status_stage="";
		
		if (flow_id.length()>0) {
			request_status_title=getStateProperty(conn, session, i, flow_id, request_status,"TITLE");
			request_status_stage=getStateProperty(conn, session, i+1, flow_id, request_status,"STAGE");
		}
		
		String openscript=" onclick=\"javascript:openRequest('"+request_id+"','"+request_group+"')\"";
		
		sb.append("<tr>");

		
		if (search_mode.equals("SELECT")) {
			sb.append("<td nowrap>");
			boolean is_added=addedPackageArr.contains(request_id);
			String checked="";
			String disabled="";
			
			if (is_added) {
				checked="checked ";
				disabled="disabled ";
			}
			
			
			if (!nvl(request_status_stage,"APPROVED").equals("APPROVED")) 
				disabled="disabled ";
			
				 
			sb.append(" <input type=checkbox "+checked+disabled+" id=select_packaged_ch_"+i+" value="+request_id+">");
			sb.append("</td>");
		} 


		sb.append("<td align=right><font size=2><b>"+request_id+"</b></font> </td>");
		
		String shortage_desc=description;
		if (description.length()>80) shortage_desc=description.substring(0,79)+"...";
		
		sb.append("<td nowrap><span data-toggle=\"tooltip\" data-placement=\"top\" title=\""+codehtml(description)+"\" data-original-title=\"Tooltip on top\"><small>");
		sb.append("<a href=\"javascript:openRequest('"+request_id+"','"+request_group+"')\">"+codehtml(clearHtml(shortage_desc))+"</a>");
		sb.append("</small></span></td>");

		sb.append("<td nowrap><small><img width=18 height=18 src=\"img/mad/"+request_group+".png\"> "+request_type+"</small></td>");
		sb.append("<td nowrap><small>"+request_status_title+"</small></td>");
		sb.append("<td nowrap><small>"+entuser+"</small></td>");
		sb.append("<td nowrap><small>"+entdate+"</small></td>");

		sb.append("</tr>");
	}
	
	
	
	sb.append("</table>");
	
	sb.append("</div>"); //col-md-12
	sb.append("</div>"); //row
	
	
	return sb.toString();

}

//***********************************************************
String makeFieldOrderBtn(Connection conn, HttpSession session, String field_name) {
	StringBuilder sb=new  StringBuilder();
	
	
	
	
	String order_direction="";
	
	String sort_statement=nvl((String) session.getAttribute("sort_statement"),"");
	
	
	
	
	String[] sortParts=sort_statement.split(",");
	for (int i=0;i<sortParts.length;i++) {
		if (sortParts[i].trim().length()==0) continue;
		int ind=sortParts[i].indexOf(" ");
		if (ind==-1) continue;
		if (ind==0) continue;
		String x_field_name=sortParts[i].substring(0, ind);
		String x_asc_desc="asc";
		try{x_asc_desc=sortParts[i].substring(ind+1);} catch(Exception e) {}
		
		if (x_field_name.equals(field_name)) {
			order_direction=x_asc_desc;
			break;
		}
		
		
	}
	
	String asc_color="gray";
	String desc_color="gray";
	
	String asc_script= "setSortFieldDirectionAndReloadList('"+field_name+"','asc')";
	String desc_script="setSortFieldDirectionAndReloadList('"+field_name+"','desc')";
	
	if (order_direction.equals("asc")) {
		asc_color="red";
		asc_script="removeSortField('"+field_name+"')";
	}
	
	if (order_direction.equals("desc")) {
		desc_color="red";
		desc_script="removeSortField('"+field_name+"')";
	}
	
	sb.append("<font color="+asc_color+"><span class=\"glyphicon glyphicon-chevron-down\" onclick=\""+asc_script+"\"></span></font>");
	
	sb.append("<font color="+desc_color+"><span class=\"glyphicon glyphicon-chevron-up\" onclick=\""+desc_script+"\"></span></font>");
	sb.append("&nbsp;");
	
	return sb.toString();
}

//***********************************************************
void indexRequestSearchText(Connection conn, HttpSession session, String request_id) {
	
	String sql="";
	
	ArrayList<String[]> arr=new ArrayList<String[]>();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",request_id});
	sql="select description, request_type from mad_request  r, mad_request_type rt where request_type_id=rt.id and r.id=?";
	
	arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr==null ||  arr.size()==0) return;
	
	String request_description=arr.get(0)[0];
	String request_type_name=arr.get(0)[1];
	
	sql="select id from mad_keywords where object_type='mad_request' and object_id=?";
	
	arr=getDbArrayConf(conn, sql, 1, bindlist);
	int keyword_id=0;
	try {keyword_id=Integer.parseInt(arr.get(0)[0]);} catch(Exception e) {}
	
	
	String keyword_text=""+ request_id+" "+ request_description + " "+ request_type_name +" ";
	
	sql="select field_value  from mad_request_fields rf, mad_flex_field f " +
		"	where request_id=? " +
		"	and rf.flex_field_id=f.id and f.entry_type not in ('DATE','DATETIME')";
	
	arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	for (int i=0;i<arr.size();i++) {
		String aline=arr.get(i)[0];
		if (aline.trim().length()<3) continue;
		if (keyword_text.length()>0)  keyword_text=keyword_text+" ";
		keyword_text=keyword_text+aline;
	}

	
	sql="select action_note  from mad_request_flow_logs  where request_id=? ";
		
	arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	for (int i=0;i<arr.size();i++) {
		String aline=arr.get(i)[0];
		if (aline.trim().length()<3) continue;
		if (keyword_text.length()>0)  keyword_text=keyword_text+" ";
		keyword_text=keyword_text+aline;
	}
		
	
	sql="insert into mad_keywords (object_type, object_id, keywords) values ('mad_request',?,?)";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	bindlist.add(new String[]{"STRING",keyword_text});
	
	if (keyword_id>0) {
		bindlist.clear();
		bindlist.add(new String[]{"STRING",keyword_text});
		bindlist.add(new String[]{"INTEGER",""+keyword_id});
		sql="update mad_keywords set keywords=? where id=?";
	}
	
	execDBConf(conn, sql, bindlist);
	
}


//*********************************************************
String makeRequesTypeFilterCombo(Connection conn, HttpSession session, String request_group, String search_mode) {
	StringBuilder sb=new StringBuilder();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	ArrayList<String[]> arr=new ArrayList<String[]>();
	String sql="select id, request_type from mad_request_type where request_group=?";
	bindlist.clear();
	bindlist.add(new String[]{"STRING",request_group});
	arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	String FILTER_REQUEST_TYPE=nvl(getMadSearchFilter(session, "filter_request_type", search_mode),"0");
			
	sb.append(makeComboArr(arr, "", "id=filter_request_type onchange=filterRequestTypeChanged(); ", FILTER_REQUEST_TYPE, 0));
	return sb.toString();
}




//*********************************************************
String makeRequesTypeStatusFilter(Connection conn, HttpSession session, String request_group, String request_type_id, String search_mode) {
	StringBuilder sb=new StringBuilder();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String FILTER_REQUEST_GROUP=nvl(request_group,nvl(getMadSearchFilter(session, "filter_request_group", search_mode),"${empty}"));
	String FILTER_REQUEST_TYPE=nvl(request_type_id,nvl(getMadSearchFilter(session, "filter_request_type", search_mode),"0"));
	String FILTER_REQUEST_STATUS=nvl(getMadSearchFilter(session, "filter_request_status", search_mode),"");
	if (FILTER_REQUEST_STATUS.equals("${empty}"))  FILTER_REQUEST_STATUS="";

	

	String sql="select state_name, state_title " +
				" from mad_flow_state " + 
				" where flow_id in (select flow_id from mad_request_type where id=?) "+
				" order by 2";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",FILTER_REQUEST_TYPE});
	
	if (FILTER_REQUEST_TYPE.equals("0") && !FILTER_REQUEST_GROUP.equals("${empty}")) {
		sql="select distinct state_name, state_title " +
				" from mad_flow_state " + 
				" where flow_id in (select flow_id from mad_request_type where request_group=?) "+
				" order by 2";
		
		bindlist.clear();
		bindlist.add(new String[]{"STRING",FILTER_REQUEST_GROUP});
	}
 
		
	
	ArrayList<String[]> stateArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	ArrayList<String[]> pickedArr=new ArrayList<String[]>();
	
	String[] arrs=FILTER_REQUEST_STATUS.split("\\|::\\|");
	for (int i=0;i<arrs.length;i++)
		if (arrs[i].trim().length()>0)
			pickedArr.add(new String[]{arrs[i],arrs[i]});

	sb.append(makePickList("0","filter_request_status", stateArr, pickedArr, "Status", "","SEARCH"));
	

	return sb.toString();
}

//*********************************************************
String makeRequesTypeFlexFieldsFilterList(Connection conn, HttpSession session, String search_mode) {
	StringBuilder sb=new StringBuilder();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	ArrayList<String[]> arr=new ArrayList<String[]>();
	
	String FILTER_REQUEST_TYPE=nvl(getMadSearchFilter(session, "filter_request_type", search_mode),"0");
	
	String sql="select fx.id flex_field_id, title, entry_type, field_parameter_name "+
			" from mad_request_type_field rtf, mad_flex_field fx " +
			" where rtf.flex_field_id=fx.id and rtf.request_type_id=? and is_visible='YES' "+
			" and fx.entry_type not in('MEMO','PASSWORD','ATTACHMENT','TABLE') " + 
			" order by field_order";
	
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",FILTER_REQUEST_TYPE});
		arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		if (arr.size()==0)  {
			return "<span>No detailed search option for this request type...</span>";
		}
		
		ArrayList<String[]> fexValsArr=new ArrayList<String[]>();
		
		ArrayList<String[]> darr=getFlexFieldFilters(session, search_mode);
		
		if (darr!=null)
			for (int i=0;i<darr.size();i++) {
				String flex_field_type=darr.get(i)[0];
				String flex_field_id=darr.get(i)[1];
				String filter_value=darr.get(i)[2];
				 
				
				
				fexValsArr.add(new String[]{flex_field_id,filter_value });
				
			}
		
		
		boolean in_accordion=false;
		
		for (int i=0;i<arr.size();i++) {
			String flex_field_id=arr.get(i)[0];
			String flex_field_title=arr.get(i)[1];
			String entry_type=arr.get(i)[2];
			String field_parameter_name=arr.get(i)[3];
			
			if (entry_type.equals("ACCORDION")) {
				if (in_accordion) 
					if (in_accordion) sb.append(makeAccordion(conn, session, "0", "","","","","END",""));
			
				in_accordion=true;
			}
			
			sb.append(makeFlexField(conn, session, "search", i, "0",flex_field_id, field_parameter_name, fexValsArr, "NO", "YES", "YES", "", ""));

		}
		
		if (in_accordion) 
			if (in_accordion) sb.append(makeAccordion(conn, session, "0", "","","","","END",""));
		


	return sb.toString();
}

//*********************************************************
String makeMADSearchBox(
		Connection conn, 
		HttpSession session, 
		String search_mode, 
		String query_id, 
		String main_request_id
		) {
	StringBuilder sb=new StringBuilder();
	
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	ArrayList<String[]> arr=new ArrayList<String[]>();
	
	
	
	
	if (!query_id.equals("x")) {
		String xml="";
		sql="select query_statement from mad_query where id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",query_id});
		arr=getDbArrayConf(conn, sql, 1, bindlist);
		try { xml=arr.get(0)[0]; } catch(Exception e) {e.printStackTrace();}
		
		if (xml.length()>0)
			setPrivateFiltersByXML(session,xml);
	}
	
	StringBuilder sbMainSearch=new StringBuilder();
	
	
	String FILTER_KEYWORD=(String) session.getAttribute(search_mode+"_FILTER_KEYWORD");
	String FILTER_REQUEST_GROUP=nvl(getMadSearchFilter(session, "filter_request_group", search_mode),"0");
	String request_group_size_1="";
	
	sql="select distinct request_group from mad_request_type";
	if (search_mode.equals("SELECT")) {
		sql=sql+" where request_group='PACKAGE'";
		FILTER_REQUEST_GROUP="PACKAGE";
		request_group_size_1="size=1 disabled";
	}
	
	bindlist.clear();
	ArrayList<String[]> arrGrp=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	sbMainSearch.append("<input type=hidden id=mad_search_box_mode value=\""+search_mode+"\">");
	sbMainSearch.append("<input type=hidden id=mad_search_query_id value=\""+query_id+"\">");
	sbMainSearch.append("<input type=hidden id=mad_search_box_id value=\""+main_request_id+"\">");
	
	

	sbMainSearch.append("<div class=row>");
	sbMainSearch.append("<div class=\"col-md-5\" align=right><b><small>Free Text Search / ID : </small></b></div>");
	sbMainSearch.append("<div class=\"col-md-7\">");
	sbMainSearch.append(makeText("filter_keyword", codehtml(FILTER_KEYWORD), "onkeypress=onFreeTextSearchEnterDLG(event) class=\"form-control\" placeholder=\"Search for...\" ", 0));
	sbMainSearch.append("</div>");
	sbMainSearch.append("</div>");	
	
	
	sbMainSearch.append("<div class=row>");
	sbMainSearch.append("<div class=\"col-md-5\" align=right><b><small>Request Group : </small></b></div>");
	sbMainSearch.append("<div class=\"col-md-7\">");
	sbMainSearch.append(makeComboArr(arrGrp, "", request_group_size_1+" id=filter_request_group onchange=makeRequesTypeFilterCombo(); ", FILTER_REQUEST_GROUP, 0));
	sbMainSearch.append("</div>");
	sbMainSearch.append("</div>");
	
	sbMainSearch.append("<div class=row>");
	sbMainSearch.append("<div class=\"col-md-5\" align=right><b><small>Request Type : </small></b></div>");	
	sbMainSearch.append("<div class=\"col-md-7\">");
	sbMainSearch.append("<div id=RequesTypeFilterComboDiv>");
	sbMainSearch.append(makeRequesTypeFilterCombo(conn, session, FILTER_REQUEST_GROUP, search_mode));
	sbMainSearch.append("</div>");
	sbMainSearch.append("</div>");
	sbMainSearch.append("</div>");
	
	
	
	
	
	
	
	//------------------------------------------------------------------------------------
	StringBuilder sbDetailSearch=new StringBuilder();
	
	
	
	sbDetailSearch.append("<div class=row>");
	sbDetailSearch.append("<div class=\"col-md-12\">");
	String FILTER_ENVIRONMENTS=nvl(getMadSearchFilter(session, "FILTER_ENVIRONMENTS", search_mode),"");
	if (FILTER_ENVIRONMENTS.equals("${null}")) FILTER_ENVIRONMENTS="";
	String env_event_listener="";
	sql="select id, environment_name from mad_environment order by 2";
	bindlist.clear();
	ArrayList<String[]> allEnvs=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	ArrayList<String[]> pickedEnvs=string2PicklistArr(FILTER_ENVIRONMENTS,"\\|::\\|");
	sbDetailSearch.append(makePickList("0", "FILTER_ENVIRONMENTS", allEnvs, pickedEnvs, "Environment :", env_event_listener));
	sbDetailSearch.append("</div>");
	sbDetailSearch.append("</div>");
	
	sbDetailSearch.append("<div class=row>");
	sbDetailSearch.append("<div class=\"col-md-12\">");
	String FILTER_APPLICATIONS=nvl(getMadSearchFilter(session, "FILTER_APPLICATIONS", search_mode),"");
	if (FILTER_APPLICATIONS.equals("${null}")) FILTER_APPLICATIONS="";
	String app_event_listener="";
	sql="select id, application_name from mad_application order by 2";
	bindlist.clear();
	ArrayList<String[]> allApps=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	ArrayList<String[]> pickedApps=string2PicklistArr(FILTER_APPLICATIONS,"\\|::\\|");
	sbDetailSearch.append(makePickList("0", "FILTER_APPLICATIONS", allApps, pickedApps, "Application :", app_event_listener));
	sbDetailSearch.append("</div>");
	sbDetailSearch.append("</div>");
	
	sbDetailSearch.append("<div class=row>");
	sbDetailSearch.append("<div class=\"col-md-12\" align=left><span class=\"label label-info\"><b>Item To Deploy : </b></span></div>");
	sbDetailSearch.append("</div>");
	sbDetailSearch.append("<div class=row>");
	sbDetailSearch.append("<div class=\"col-md-12\">");
	String FILTER_MEMBER_PATH=nvl(getMadSearchFilter(session, "FILTER_MEMBER_PATH", search_mode),"");
	if (FILTER_MEMBER_PATH.equals("${null}")) FILTER_MEMBER_PATH="";
	sbDetailSearch.append(makeText("FILTER_MEMBER_PATH", codehtml(FILTER_MEMBER_PATH), "onkeypress=onMemberPathEnterDLG(event) class=\"form-control\" placeholder=\"Search for...\" ", 0));
	sbDetailSearch.append("</div>");
	sbDetailSearch.append("</div>");
	
	
	
	
	sbDetailSearch.append("<div class=row>");
	sbDetailSearch.append("<div class=\"col-md-12\">");
	sbDetailSearch.append("<div id=RequesTypeStatusFilterDiv>");
	sbDetailSearch.append(makeRequesTypeStatusFilter(conn,session,"", "", search_mode));
	sbDetailSearch.append("</div>");
	sbDetailSearch.append("</div>");
	sbDetailSearch.append("</div>");
	
	sbDetailSearch.append("<div class=row>");
	sbDetailSearch.append("<div class=\"col-md-12\">");
	sbDetailSearch.append(makeRequestCreatedByList(conn,session, search_mode));
	sbDetailSearch.append("</div>");
	sbDetailSearch.append("</div>");
	
	
	
	sbDetailSearch.append("<div class=row>");
	sbDetailSearch.append("<div class=\"col-md-12\" align=left><span class=\"label label-info\"><b>Creation Date : </b></span></div>");
	sbDetailSearch.append("</div>");
	sbDetailSearch.append("<div class=row>");
	sbDetailSearch.append("<div class=\"col-md-12\">");
	String FILTER_REQUEST_DATE=nvl(getMadSearchFilter(session, "filter_request_date", search_mode),"");
	sbDetailSearch.append(makeDate("0","filter_request_date", FILTER_REQUEST_DATE, "", "SEARCH"));
	sbDetailSearch.append("</div>");
	sbDetailSearch.append("</div>");
	
	sbDetailSearch.append("<div class=row>");
	sbDetailSearch.append("<div class=\"col-md-12\" align=left><span class=\"label label-info\"><b>Deployment Date : </b></span></div>");
	sbDetailSearch.append("</div>");
	sbDetailSearch.append("<div class=row>");
	sbDetailSearch.append("<div class=\"col-md-12\">");
	String FILTER_DEPLOYMENT_DATE=nvl(getMadSearchFilter(session, "filter_deployment_date", search_mode),"");
	sbDetailSearch.append(makeDate("0","filter_deployment_date", FILTER_DEPLOYMENT_DATE, "", "SEARCH"));
	sbDetailSearch.append("</div>");
	sbDetailSearch.append("</div>");
	
	
	


	//------------------------------------------------------------------------------------
	
	StringBuilder sbFlexSearch=new StringBuilder();
	sbFlexSearch.append("<div id=RequesTypeFlexFieldsFilterListDiv  >");
	sbFlexSearch.append(makeRequesTypeFlexFieldsFilterList(conn, session, search_mode));
	sbFlexSearch.append("</div>");
	
	
	//------------------------------------------------------------------------------------
	StringBuilder sbFlexFieldsAndSort=new StringBuilder();

	
	sbFlexFieldsAndSort.append("<div id=RequesTypeFieldsToShowDiv  >");
	sbFlexFieldsAndSort.append(makeRequesFieldList(conn, session));
	sbFlexFieldsAndSort.append("</div>");
	
	
	sbFlexFieldsAndSort.append("<div id=RequesTypeSortDiv  >");
	sbFlexFieldsAndSort.append(makeRequesSortList(conn, session));
	sbFlexFieldsAndSort.append("</div>");
	
	
	
	
	
	//------------------------------------------------------------------------------------
	
	
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();
	collapseItems.add(new String[]{"col_search_detail_div","Search",sbDetailSearch.toString(),"search.png"});
	collapseItems.add(new String[]{"col_search_detail_flexfields_div","Detailed Search",sbFlexSearch.toString(),"detailed.png"});
	collapseItems.add(new String[]{"col_search_order_by","Fields&Sort",sbFlexFieldsAndSort.toString(),"sort.png"});
	
	StringBuilder sbCollapse=new StringBuilder();
	sbCollapse.append(addTab("search_CollapseReqListDiv", collapseItems));
	
	
	//------------------------------------------------------------------------------------


	StringBuilder sbAddAppButton=new StringBuilder();

	if (search_mode.equals("SELECT")) {
		
		
		sbAddAppButton.append("<div class=row>");
		sbAddAppButton.append("<div class=\"col-md-12\">");
		sbAddAppButton.append("<button type=button class=\"btn btn-sm btn-success\" onclick=addPackageToRequestPerform(\""+main_request_id+"\"); >");
		sbAddAppButton.append("<span class=\"glyphicon glyphicon-plus\"></span> Add Selected Packages To Deployment");
		sbAddAppButton.append("</button>");
		sbAddAppButton.append("</div>");
		sbAddAppButton.append("</div>");
		
		
	}
	
	StringBuilder sbReqList=new StringBuilder();
	sbReqList.append(loadRequestList(conn, session, search_mode, main_request_id,"YES"));
	
	
	
	//******************************************************************************************
	
	
	//sb.append("<br>");
	
	sb.append("<div class=row>");
	
	sb.append("<div class=\"col-md-5 active\" style=\"background-color:#DADAC8; min-height: 500px; max-height: 500px; overflow-x: scroll; overflow-y: scroll;\">");
	sb.append(sbMainSearch.toString());
	
	
	
	
	sb.append(sbCollapse.toString());
	
	
	sb.append("</div>");
	
	sb.append("<div class=\"col-md-7\" align=center>");
	
	if (sbAddAppButton.length()>0) {
		//sb.append("<div class=row>");
		//sb.append("<div class=\"col-md-12\">");
		sb.append(sbAddAppButton.toString());
		//sb.append("</div>");
		//sb.append("</div>");
	}
	
	sb.append("<div class=row>");
	sb.append("<div id=searchBoxResultsDiv class=\"col-md-12\"  style=\"min-height: 480px; max-height: 480px; overflow-x: scroll; overflow-y: scroll;\">");
	sb.append(sbReqList.toString());
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("</div>");
	
	sb.append("</div>");
	
	
	
	
	
	

	
	return sb.toString();
}


//***********************************************************************
ArrayList<String[]> string2PicklistArr(String instr,String delimiter) {
	String[] arr=instr.split(delimiter);
	ArrayList<String[]> ret1=new ArrayList<String[]>();
	for (int i=0;i<arr.length;i++) {
		if (arr[i].trim().length()==0) continue;
		ret1.add(new String[]{arr[i]});
	}
	return ret1;
}

//***********************************************************************
String makeRequesSortList(Connection conn, HttpSession session) {
	
	StringBuilder sb=new StringBuilder();
	
	String sort_statement=(String) session.getAttribute("sort_statement");
	
	if (sort_statement==null || sort_statement.length()==0) {
		sort_statement="r.id desc";
		session.setAttribute("sort_statement", sort_statement);
	}
	
	ArrayList<String[]> sortAllFields=new ArrayList<String[]>();

	sortAllFields.add(new String[]{"r.id","Request Id"});
	sortAllFields.add(new String[]{"r.description","Description"});
	sortAllFields.add(new String[]{"request_type","Request Type"});
	sortAllFields.add(new String[]{"r.status","Status"});
	sortAllFields.add(new String[]{"r.entuser","Created By"});
	sortAllFields.add(new String[]{"r.entdate","Creation Date"});
	
	ArrayList<String[]> sortedArr=new ArrayList<String[]>();
	ArrayList<String[]> pickedFieldsArr=new ArrayList<String[]>();
	
	String[] sortParts=sort_statement.split(",");
	for (int i=0;i<sortParts.length;i++) {
		if (sortParts[i].trim().length()==0) continue;
		int ind=sortParts[i].indexOf(" ");
		if (ind==-1) continue;
		if (ind==0) continue;
		String field_name=sortParts[i].substring(0, ind);
		String asc_desc="asc";
		try{asc_desc=sortParts[i].substring(ind+1);} catch(Exception e) {}
		
		sortedArr.add(new String[]{field_name,asc_desc});
		
		pickedFieldsArr.add(new String[]{field_name});
	}
	
	
	
	sb.append("<div class=row>");
	ArrayList<String[]> sortPickableFields=new ArrayList<String[]>();
	sortPickableFields.addAll(sortAllFields);
	sb.append("<div class=\"col-md-12\">");
	String event_js="javascript:addRemoveSortField(\"#\");";
	sb.append(makePickList("", "all_order_by_fields", sortPickableFields, pickedFieldsArr, "Select Fields To Sort", event_js));
	sb.append("</div>");
	
	sb.append("</div>");

	sb.append("<hr>");
		
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=sortFieldsConfigurationDiv>");
	
	sb.append(makeSortFieldsConfiguration(conn,session));
	
	sb.append("</div>");	
	sb.append("</div>");
	
	
	return sb.toString();
}



//***********************************************************************
String makeRequesFieldList(Connection conn, HttpSession session) {
	
	StringBuilder sb=new StringBuilder();
	
	String fields_to_show=(String) session.getAttribute("fields_to_show");
	
	if (fields_to_show==null || fields_to_show.length()==0) {
		fields_to_show="r.id,r.description,request_type,r.status,r.entuser,r.entdate";
		session.setAttribute("fields_to_show", fields_to_show);
	}

	ArrayList<String[]> allFields=new ArrayList<String[]>();

	allFields.add(new String[]{"r.id","Request Id"});
	allFields.add(new String[]{"r.description","Description"});
	allFields.add(new String[]{"request_type","Request Type"});
	allFields.add(new String[]{"r.status","Status"});
	allFields.add(new String[]{"r.entuser","Created By"});
	allFields.add(new String[]{"r.entdate","Creation Date"});
	
	ArrayList<String[]> sortedArr=new ArrayList<String[]>();
	ArrayList<String[]> pickedFieldsArr=new ArrayList<String[]>();
	
	String[] fieldParts=fields_to_show.split(",");
	for (int i=0;i<fieldParts.length;i++) {
		if (fieldParts[i].trim().length()==0) continue;		
		System.out.println(fieldParts[i]+"="+fieldParts[i]);
		String field_name=fieldParts[i];
		pickedFieldsArr.add(new String[]{field_name});
	}
	
	
	
	sb.append("<div class=row>");
	ArrayList<String[]> pickableFields=new ArrayList<String[]>();
	pickableFields.addAll(allFields);
	sb.append("<div class=\"col-md-12\">");
	String event_js="javascript:addRemoveSortField(\"#\");";
	sb.append(makePickList("", "fields_to_show", pickableFields, pickedFieldsArr, "Fields To Show", event_js));
	sb.append("</div>");
	
	sb.append("</div>");

	sb.append("<hr>");
		
	
	
	
	return sb.toString();
}


//***********************************************************************
String makeSortFieldsConfiguration(Connection conn, HttpSession session) {
	StringBuilder sb=new StringBuilder();
	
	ArrayList<String[]> sortAllFields=new ArrayList<String[]>();

	sortAllFields.add(new String[]{"r.id","Request Id"});
	sortAllFields.add(new String[]{"r.description","Description"});
	sortAllFields.add(new String[]{"request_type","Request Type"});
	sortAllFields.add(new String[]{"r.status","Status"});
	sortAllFields.add(new String[]{"r.entuser","Created By"});
	sortAllFields.add(new String[]{"r.entdate","Creation Date"});
	
	ArrayList<String[]> ascDescArr=new ArrayList<String[]>();
	
	ascDescArr.add(new String[]{"asc","Ascending"});
	ascDescArr.add(new String[]{"desc","Desceding"});
	
	String sort_statement=nvl((String) session.getAttribute("sort_statement"),"");
	
	
	ArrayList<String[]> sortedArr=new ArrayList<String[]>();
	
	String[] sortParts=sort_statement.split(",");
	for (int i=0;i<sortParts.length;i++) {
		if (sortParts[i].trim().length()==0) continue;
		int ind=sortParts[i].indexOf(" ");
		if (ind==-1) continue;
		if (ind==0) continue;
		String field_name=sortParts[i].substring(0, ind);
		String asc_desc="asc";
		try{asc_desc=sortParts[i].substring(ind+1);} catch(Exception e) {}
		
		sortedArr.add(new String[]{field_name,asc_desc});
		
		
	}
	
	for (int i=0;i<sortedArr.size();i++) {
		String field_name=sortedArr.get(i)[0];
		String asc_desc=sortedArr.get(i)[1];
		
		sb.append("<div class=row>");

		sb.append("<div class=\"col-md-2\" align=center>");
		sb.append("<font color=blue><span class=\"glyphicon glyphicon-arrow-up\"></span></font>");
		sb.append("&nbsp;");
		sb.append("<font color=blue><span class=\"glyphicon glyphicon-arrow-down\"></span></font>");
		sb.append("</div>");
		
		sb.append("<div class=\"col-md-7\">");
		sb.append(makeComboArr(sortAllFields, "", "disabled size=1 id=sort_field_name_"+i, field_name, 0));
		sb.append("</div>");
		
		sb.append("<div class=\"col-md-3\">");
		sb.append(makeComboArr(ascDescArr, "", "size=1 id=sort_ascdesc_"+i+ " onchange=setSortFieldDirection('"+i+"'); ", asc_desc, 0));
		sb.append("</div>");
		
		
		
		sb.append("</div>");
	}
	
	return sb.toString();
}


//***********************************************************************
void addRemoveUpdateSortField(Connection conn, HttpSession session, String addremove,String field_name, String new_ascdesc) {
	String sort_statement=nvl((String) session.getAttribute("sort_statement"),"");
	
	if (addremove.equals("ADD")) {
		if (sort_statement.length()>0) sort_statement=sort_statement+",";
		sort_statement=sort_statement+field_name+" "+new_ascdesc;
		session.setAttribute("sort_statement", sort_statement);
		return;
	}
	
	String new_sort_statement="";
	
	String[] sortParts=sort_statement.split(",");
	boolean found=false;
	for (int i=0;i<sortParts.length;i++) {
	
		if (sortParts[i].trim().length()==0) continue;
		int ind=sortParts[i].indexOf(" ");
		if (ind==-1) continue;
		if (ind==0) continue;
		String x_field_name=sortParts[i].substring(0, ind);
		String x_asc_desc="asc";
		try{x_asc_desc=sortParts[i].substring(ind+1);} catch(Exception e) {}
		
		if (x_field_name.equals(field_name)) {
			found=true;
			if (addremove.equals("REMOVE")) continue;
			else x_asc_desc=new_ascdesc; //UPDATE
		}
		
		if (new_sort_statement.length()>0) new_sort_statement=new_sort_statement+",";
		new_sort_statement=new_sort_statement+x_field_name+" "+x_asc_desc;
	}
	
	if (addremove.equals("UPDATE") & !found) {
		if (new_sort_statement.length()>0) new_sort_statement=new_sort_statement+",";
		new_sort_statement=new_sort_statement+ field_name+" "+new_ascdesc;
	}
	
	session.setAttribute("sort_statement", new_sort_statement);
}

//***********************************************************************
String makeRequestCreatedByList(Connection conn, HttpSession session, String search_mode) {
	StringBuilder sb=new StringBuilder();
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String curruser=""+((Integer) session.getAttribute("userid"));
	
	sql="select concat('USR.',id) id, concat('(me) ',fname, ' ' , lname)  from tdm_user where id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",curruser});
	ArrayList<String[]> myuserArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	sql="select concat('USR.',id) id, concat(fname, ' ' , lname)  from tdm_user where id!=? order by 1";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",curruser});
	ArrayList<String[]> userArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	sql="select concat('GRP.',id) id,  concat('Group ',group_name) from mad_group where group_type='USER' order by 1";
	bindlist.clear();
	ArrayList<String[]> grpArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	
	ArrayList<String[]> allArr=new ArrayList<String[]>();
	
	if (myuserArr!=null) allArr.addAll(myuserArr);
	if (userArr!=null) allArr.addAll(userArr);
	if (grpArr!=null) allArr.addAll(grpArr);
	
	ArrayList<String[]> pickedArr=new ArrayList<String[]>();
	String FILTER_REQUEST_CREATED_BY=nvl(getMadSearchFilter(session, "filter_request_created_by", search_mode),"");
	if (FILTER_REQUEST_CREATED_BY.equals("${empty}"))  FILTER_REQUEST_CREATED_BY="";


	String[] arrs=FILTER_REQUEST_CREATED_BY.split("\\|::\\|");
	for (int i=0;i<arrs.length;i++)
		if (arrs[i].trim().length()>0)
			pickedArr.add(new String[]{arrs[i],arrs[i]});
	
	
	sb.append(makePickList("0", "filter_request_created_by", allArr, pickedArr, "Created By", ""));
	
	return sb.toString();
}

//***********************************************************************
void clearFlexFieldFilters(HttpSession session, String search_mode) {
	ArrayList<String[]> filters=(ArrayList<String[]>) session.getAttribute(search_mode+"_FLEX_FIELD_FILTERS");
	if (filters==null) filters=new ArrayList<String[]>();
	filters.clear(); 
	session.setAttribute(search_mode+"_FLEX_FIELD_FILTERS", filters); 
}

//***********************************************************************
void setFlexFieldFilter(HttpSession session, 
		String flex_field_type, String flex_field_id, String filter_value, String search_mode) {
	ArrayList<String[]> filters=(ArrayList<String[]>) session.getAttribute(search_mode+"_FLEX_FIELD_FILTERS");
	if (filters==null) filters=new ArrayList<String[]>();
	
	int found_id=-1;
	for (int i=0;i<filters.size();i++) {
		if (filters.get(i)[0].equals(flex_field_type) && filters.get(i)[1].equals(flex_field_id)) {
			found_id=i;
			break;
		}
	}
	
	
	
	if (found_id>-1)
		filters.set(found_id, new String[]{flex_field_type,flex_field_id,filter_value});
	else 
		filters.add(new String[]{flex_field_type,flex_field_id,filter_value});
	

	
	session.setAttribute(search_mode+"_FLEX_FIELD_FILTERS", filters);
}


//***********************************************************************
ArrayList<String[]> getFlexFieldFilters(HttpSession session,String search_mode) {
	ArrayList<String[]> filters=(ArrayList<String[]>) session.getAttribute(search_mode+"_FLEX_FIELD_FILTERS");
	if (filters==null) filters=new ArrayList<String[]>();
	return filters;

}
//***********************************************************************
void setPlatformParameter(
		Connection conn,
		HttpSession session,
		String request_id,
		String platform_id, 
		String application_id, 
		String flex_field_id, 
		String field_value) {
	
	String sql="update mad_request_env_fields set "+
			" field_value=? "+
			" where " +
			" request_id=? "+
			" and platform_id=? "+
			" and application_id=? "+
			" and flex_field_id=?" ;
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"STRING",field_value});
	bindlist.add(new String[]{"INTEGER",request_id});
	bindlist.add(new String[]{"INTEGER",platform_id});
	bindlist.add(new String[]{"INTEGER",application_id});
	bindlist.add(new String[]{"INTEGER",flex_field_id});

	execDBConf(conn, sql, bindlist);
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	bindlist.add(new String[]{"INTEGER",platform_id});
	bindlist.add(new String[]{"INTEGER",application_id});
	bindlist.add(new String[]{"INTEGER",flex_field_id});
	
	String hist_sql="select id from mad_request_env_fields "+
			" where " +
			" request_id=? "+
			" and platform_id=? "+
			" and application_id=? "+
			" and flex_field_id=?" ;
	
	ArrayList<String[]> delArr=getDbArrayConf(conn, hist_sql, Integer.MAX_VALUE, bindlist);
	for (int h=0;h<delArr.size();h++) {
		String hist_id=delArr.get(h)[0];
		createHistory(conn, session, "UPDATE", "mad_request_env_fields", hist_id);
	}
	
}
//********************************************************************************
String addCollapseItem(String accordion_id, String accordion_item_id, String title,String body, String icon, String onclick) {
	
	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=\"panel-heading\" role=\"tab\" id=\"heading_"+accordion_item_id+"\" >");
	
	sb.append("<h4 class=\"panel-title\">");
	
	String jsonclick="";
	if (onclick.length()>0) 
		jsonclick=" onclick=\""+onclick+"\" ";
	
	sb.append("<a data-toggle=\"collapse\" "+jsonclick+" data-parent=\"#"+accordion_id+"\" href=\"#"+accordion_item_id+"\" aria-expanded=\"true\" aria-controls=\""+accordion_item_id+"\">");
	sb.append("<img width=18 height=18 src=\"img/mad/"+icon+"\"> <b> "+title + "</b>");
	sb.append("</a>");
	
	
	sb.append("</h4>");
	
	
	sb.append("<div id=\""+accordion_item_id+"\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"heading_"+accordion_item_id+"\">");
	
	sb.append("<div class=\"panel-body\" id=\""+accordion_item_id+"Body\">");
	sb.append(body);
	sb.append("</div>"); // panel-body
	
	sb.append("</div>"); // panel-collapse collapse in
	
	sb.append("</div>"); //"panel-heading
	
	return sb.toString();
}




//********************************************************************************
String addCollapse(String id,ArrayList<String[]> collapseItems) {
	
	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=\"panel-group\" id=\""+id+"\" role=\"tablist\" aria-multiselectable=\"false\">");
	
	sb.append("<div class=\"panel panel-default\">");
	
	for (int i=0;i<collapseItems.size();i++) {
		String collapse_item_id=collapseItems.get(i)[0];
		String collapse_item_title=collapseItems.get(i)[1];
		String collapse_item_body=collapseItems.get(i)[2];
		String collapse_item_icon=collapseItems.get(i)[3];
		String collapse_item_additional="";
		if (collapseItems.get(i).length==5) collapse_item_additional=collapseItems.get(i)[4];
		
		sb.append(addCollapseItem(id,collapse_item_id,collapse_item_title, collapse_item_body, collapse_item_icon, collapse_item_additional));
		
	}
	
	sb.append("</div>"); //"panel panel-default
	
	sb.append("</div>"); // panel-group
	
	
	return sb.toString();
}




//********************************************************************************
String addTab(String id,ArrayList<String[]> tabItems) {
	
	StringBuilder sb=new StringBuilder();
	StringBuilder sbTitle=new StringBuilder();
	StringBuilder sbBody=new StringBuilder();

	for (int i=0;i<tabItems.size();i++) {
		String tab_item_id=tabItems.get(i)[0];
		String tab_item_title=tabItems.get(i)[1];
		String tab_item_body=tabItems.get(i)[2];
		String tab_item_icon=tabItems.get(i)[3];
		String tab_item_additional="";
		if (tabItems.get(i).length==5) tab_item_additional=tabItems.get(i)[4];
		String active="";
		if (i==0) active="active";
		
		
		String jsonclick="";
		if (tab_item_additional.length()>0) 
			jsonclick=" onclick=\""+tab_item_additional+"\" ";
		
		sbTitle.append("<li  role=\"presentation\" class=\""+active+"\">");
		sbTitle.append("<a href=\"#"+tab_item_id+"\"  "+jsonclick+"  aria-controls=\""+tab_item_id+"\" role=\"tab\" data-toggle=\"tab\">");
		sbTitle.append("<img src=\"img/mad/"+tab_item_icon+"\" width=24 height=24>");
		sbTitle.append("<small>"+tab_item_title+"</small>");
		sbTitle.append("</a>");
		sbTitle.append("</li>");
		
		
		sbBody.append("<div class=\"tab-pane "+active+"\" role=\"tabpanel\" id=\""+tab_item_id+"\" >"); 
		sbBody.append("<div id=\""+tab_item_id+"Body\">");
		sbBody.append(tab_item_body); 
		sbBody.append("</div>"); 
		sbBody.append("</div>");
		
	}
	
	
	sb.append("<ul class=\"nav nav-pills\" id=\""+id+"\" role=\"tablist\" >");
	sb.append(sbTitle.toString());
	
	sb.append("<div class=\"tab-content\">");
	sb.append("<br>");
	sb.append("<br>");
	sb.append("<br>");
	sb.append(sbBody.toString());
	sb.append("</div>");
	
	sb.append("</ul>"); 
	
	
	return sb.toString();
}


//********************************************************************************
String makeEnvHeader() {
	StringBuilder sb=new StringBuilder();
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	

	sb.append(" ");
	
	
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addNewMadEnvironment();\">");
	sb.append("<span class=\"glyphicon glyphicon-plus\">");
	sb.append(" Add New Environment");
	sb.append("</span>");
	sb.append("</button>");
	
	sb.append("</div>");
	sb.append("</div>");

	return sb.toString();
}

//********************************************************************************
String makeAppHeader() {
	StringBuilder sb=new StringBuilder();
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addNewMadApplication();\">");
	sb.append("<span class=\"glyphicon glyphicon-plus\">");
	sb.append(" Add New Application");
	sb.append("</span>");
	sb.append("</button>");
	
	sb.append("</div>");
	sb.append("</div>");

	return sb.toString();
}

//********************************************************************************
String makePermissionHeader() {
	StringBuilder sb=new StringBuilder();
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addNewMadPermission();\">");
	sb.append("<span class=\"glyphicon glyphicon-plus\">");
	sb.append(" Add New Permission");
	sb.append("</span>");
	sb.append("</button>");
	
	sb.append("</div>");
	sb.append("</div>");

	return sb.toString();
}


//********************************************************************************
String makeMethodHeader() {
	StringBuilder sb=new StringBuilder();
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addNewMadMethod();\">");
	sb.append("<span class=\"glyphicon glyphicon-plus\">");
	sb.append(" Add New Method");
	sb.append("</span>");
	sb.append("</button>");
	
	sb.append("</div>");
	sb.append("</div>");

	return sb.toString();
}

//********************************************************************************
String makeFlowHeader() {
	StringBuilder sb=new StringBuilder();
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addNewMadFlow();\">");
	sb.append("<span class=\"glyphicon glyphicon-plus\">");
	sb.append(" Add New Flow");
	sb.append("</span>");
	sb.append("</button>");
	
	sb.append("</div>");
	sb.append("</div>");

	return sb.toString();
}

//********************************************************************************
String makeDeploymentSlotHeader() {
	StringBuilder sb=new StringBuilder();
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addNewMadDeploymentSlot();\">");
	sb.append("<span class=\"glyphicon glyphicon-plus\">");
	sb.append(" Add New Deployment Plan");
	sb.append("</span>");
	sb.append("</button>");
	
	sb.append("</div>");
	sb.append("</div>");

	return sb.toString();
}

//********************************************************************************
String makeDashSqlHeader() {
	StringBuilder sb=new StringBuilder();
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addNewMadDashSql();\">");
	sb.append("<span class=\"glyphicon glyphicon-plus\">");
	sb.append(" Add New Sql");
	sb.append("</span>");
	sb.append("</button>");
	
	sb.append("</div>");
	sb.append("</div>");

	return sb.toString();
}

//********************************************************************************
String makeDashParameterHeader() {
	StringBuilder sb=new StringBuilder();
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addNewMadDashParameter();\">");
	sb.append("<span class=\"glyphicon glyphicon-plus\">");
	sb.append(" Add New Parameter");
	sb.append("</span>");
	sb.append("</button>");
	
	sb.append("</div>");
	sb.append("</div>");

	return sb.toString();
}
//********************************************************************************
String makeDashViewHeader() {
	StringBuilder sb=new StringBuilder();
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addNewMadDashView();\">");
	sb.append("<span class=\"glyphicon glyphicon-plus\">");
	sb.append(" Add New View");
	sb.append("</span>");
	sb.append("</button>");
	
	sb.append("</div>");
	sb.append("</div>");

	return sb.toString();
}
//********************************************************************************
String makeFlowStateActionHeader(String flow_state_id) {
	StringBuilder sb=new StringBuilder();
	sb.append("<hr>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addNewMadFlowStateAction('"+flow_state_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-plus\">");
	sb.append(" Add New Action");
	sb.append("</span>");
	sb.append("</button>");
	
	sb.append("</div>");
	sb.append("</div>");

	return sb.toString();
}
//********************************************************************************
String makeUserHeader(HttpSession session) {
	StringBuilder sb=new StringBuilder();
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	
	if (checkrole(session, "ADMIN")) { 
		sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addNewMadUser();\">");
		sb.append("<span class=\"glyphicon glyphicon-plus\">");
		sb.append(" Add New User");
		sb.append("</span>");
		sb.append("</button>");
	}
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" >");
	String search_value=nvl((String) session.getAttribute("search_for_users"),"");
	sb.append(makeText("search_for_users", search_value, "placeHolder=\"Search for ...\"; onkeyup=onConfigSearchUsers(event) style=\"background-color:yellow;\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("</div>");
	sb.append("</div>");

	return sb.toString();
}

//********************************************************************************
String makeGroupHeader() {
	StringBuilder sb=new StringBuilder();
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addNewMadGroup();\">");
	sb.append("<span class=\"glyphicon glyphicon-plus\">");
	sb.append(" Add New Group");
	sb.append("</span>");
	sb.append("</button>");
	
	sb.append("</div>");
	sb.append("</div>");

	return sb.toString();
}


//********************************************************************************
String makeEmailTemplateHeader() {
	StringBuilder sb=new StringBuilder();
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addNewMadEmailTemplate();\">");
	sb.append("<span class=\"glyphicon glyphicon-plus\">");
	sb.append(" Add New Temokate");
	sb.append("</span>");
	sb.append("</button>");
	
	sb.append("</div>");
	sb.append("</div>");

	return sb.toString();
}


//********************************************************************************
String makeRepositoryHeader() {
	StringBuilder sb=new StringBuilder();
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addNewMadRepository();\">");
	sb.append("<span class=\"glyphicon glyphicon-plus\">");
	sb.append(" Add New Repository");
	sb.append("</span>");
	sb.append("</button>");
	
	sb.append("</div>");
	sb.append("</div>");

	return sb.toString();
}

//********************************************************************************
String makeStringHeader(HttpSession session) {
	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addNewMadString();\">");
	sb.append("<span class=\"glyphicon glyphicon-plus\">");
	sb.append(" Add New String");
	sb.append("</span>");
	sb.append("</button>");
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" >");
	String search_value=nvl((String) session.getAttribute("search_for_strings"),"");
	sb.append(makeText("search_for_strings", search_value, "placeHolder=\"Search for ...\"; onkeyup=onConfigSearchEnterStrings(event) style=\"background-color:yellow;\"", 0));
	sb.append("</div>");
	sb.append("</div>");

	return sb.toString();
}


//********************************************************************************
String makeLangHeader() {
	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addNewMadLang();\">");
	sb.append("<span class=\"glyphicon glyphicon-plus\">");
	sb.append(" Add New Language");
	sb.append("</span>");
	sb.append("</button>");
	sb.append("</div>");
	sb.append("</div>");
	
	return sb.toString();
}

//********************************************************************************
String makeClassHeader() {
	StringBuilder sb=new StringBuilder();
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addNewMadClass();\">");
	sb.append("<span class=\"glyphicon glyphicon-plus\">");
	sb.append(" Add New Class");
	sb.append("</span>");
	sb.append("</button>");
	
	sb.append("</div>");
	sb.append("</div>");

	return sb.toString();
}
//********************************************************************************
String makeDriverHeader() {
	StringBuilder sb=new StringBuilder();
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addNewMadDriver();\">");
	sb.append("<span class=\"glyphicon glyphicon-plus\">");
	sb.append(" Add New Driver");
	sb.append("</span>");
	sb.append("</button>");
	
	sb.append("</div>");
	sb.append("</div>");

	return sb.toString();
}

//********************************************************************************
String makePlatformHeader() {
	StringBuilder sb=new StringBuilder();
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addNewMadPlatform();\">");
	sb.append("<span class=\"glyphicon glyphicon-plus\">");
	sb.append(" Add New Platform");
	sb.append("</span>");
	sb.append("</button>");
	
	sb.append("</div>");
	sb.append("</div>");

	return sb.toString();
}

//********************************************************************************
String makeModifierGroupHeader() {
	StringBuilder sb=new StringBuilder();
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addNewMadModifierGroup();\">");
	sb.append("<span class=\"glyphicon glyphicon-plus\">");
	sb.append(" Add New Checker & Modifier Group");
	sb.append("</span>");
	sb.append("</button>");
	
	sb.append("</div>");
	sb.append("</div>");

	return sb.toString();
}

//********************************************************************************
String makeModifierRuleHeader(String modifier_group_id) {
	StringBuilder sb=new StringBuilder();
	sb.append("<div class=row>");
	
	sb.append("<div class=\"col-md-6\">");
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addNewMadModifierRule('"+modifier_group_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-plus\">");
	sb.append(" Add New Rule");
	sb.append("</span>");
	sb.append("</button>");
	sb.append("</div>");
	sb.append("</div>");

	return sb.toString();
}




//********************************************************************************
String makeFlexFieldHeader(HttpSession session) {
	
	StringBuilder sb=new StringBuilder();

	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addNewMadFlexField();\">");
	sb.append("<span class=\"glyphicon glyphicon-plus\">");
	sb.append(" Add New Flexible Field");
	sb.append("</span>");
	sb.append("</button>");
	sb.append("</div>");
	sb.append("</div>");

	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" >");
	String search_value=nvl((String) session.getAttribute("search_for_flexible_fields"),"");
	sb.append(makeText("search_for_flexible_fields", search_value, "placeHolder=\"Search for ...\"; onkeyup=onConfigSearchEnterFlexFields(event) style=\"background-color:yellow;\"", 0));
	sb.append("</div>");
	sb.append("</div>");

	
	return sb.toString();
}

//********************************************************************************
String makeRequestTypeHeader() {
	StringBuilder sb=new StringBuilder();
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addNewMadRequestType();\">");
	sb.append("<span class=\"glyphicon glyphicon-plus\">");
	sb.append(" Add New Request Type");
	sb.append("</span>");
	sb.append("</button>");
	
	sb.append("</div>");
	sb.append("</div>");

	return sb.toString();
}


//********************************************************************************
String makePlatformTypeHeader() {
	StringBuilder sb=new StringBuilder();
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addNewMadPlatformType();\">");
	sb.append("<span class=\"glyphicon glyphicon-plus\">");
	sb.append(" Add New Platform Type");
	sb.append("</span>");
	sb.append("</button>");
	
	sb.append("</div>");
	sb.append("</div>");

	return sb.toString();
}


//********************************************************************************
String makePlatformHeader(String environment_id) {
	StringBuilder sb=new StringBuilder();
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" align=right>");
		
	
	sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:deleteMadEnvironment('"+environment_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-minus\">");
	sb.append(" Delete Environment" );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");
	

	sb.append("</div>");
	sb.append("</div>");
	
	return sb.toString();
}


//********************************************************************************
String decodeLovSql(String lov_type) {
	String sql="";
	
	if (lov_type.equals("method"))
		sql="select id, concat(method_type, ' [',method_name,']') from mad_method where is_valid='YES' order by  method_type,method_name ";
	
	if (lov_type.equals("method_type"))
		sql="select 'JAVASCRIPT', 'JavaScript' from dual "+
				" union all "+
				"select 'DATABASE','Database JDBC Call' from dual"+
				" union all "+
				"select 'SHELL','Shell Command' from dual "+
				" union all "+
				"select 'JAVA','Java by Reflection' from dual";
	if (lov_type.equals("view_type"))
		sql=
			"select 'TABLE','Tabular Table' from dual union all " +
			"select 'PIVOT','Pivot Table' from dual union all " +
			"select 'GRAPH_H_BAR','Horizontal Bar Chart' from dual union all " +
			"select 'GRAPH_V_BAR','Vertical Bar Chart' from dual union all " +
			"select 'GRAPH_LINE','Line Chart' from dual union all " +
			"select 'GRAPH_PIE','Pie Chart' from dual ";
	if (lov_type.equals("dashboard_filter"))
		sql="select id, concat(parameter_title, ' ${', field_parameter_name,'}') from mad_dashboard_parameter order by 2";
	if (lov_type.equals("dashboard_view"))
		sql="select id, view_name from mad_dashboard_view order by 2";
	if (lov_type.equals("lang_list"))
		sql="select lang, lang_desc from mad_lang order by 2";
	if (lov_type.equals("flex_field_for_mad_request_type_field"))
		sql="select id, title from mad_flex_field order by 2";
	if (lov_type.equals("flex_field_for_mad_application_flex_fields"))
		sql="select id, title from mad_flex_field where entry_type in ('TEXT','NUMBER','MEMO','LIST','CHECKBOX','PICKLIST','DATE','DATETIME','PASSWORD') order by 2";
	if (lov_type.equals("flex_field_for_mad_platform_type_flex_fields"))
		sql="select id, title from mad_flex_field where entry_type in ('TEXT','NUMBER','MEMO','LIST','CHECKBOX','PICKLIST','DATE','DATETIME','PASSWORD') order by 2";
	if (lov_type.equals("request_group"))
		sql="select 'REQUEST','Request' from dual union all  select 'PACKAGE','Package' from dual union all select 'DEPLOYMENT','Deployment' from dual";
	if (lov_type.equals("modifier_group"))
		sql="select id, modifier_group_name from mad_modifier_group order by 2";
	if (lov_type.equals("platform_type"))
		sql="select id, platform_type_name from mad_platform_type order by 2";
	if (lov_type.equals("flex_field_type"))
		sql="select 'TEXT','Single Line Text Box' from dual union all " + 
			"select 'NUMBER','Number / Currency' from dual union all " +
			"select 'MEMO','Multi Line Text' from dual union all " +
			"select 'LIST','Static List Box' from dual union all " +
			"select 'DYN_LIST','Dynamic List Box' from dual union all " +
			"select 'LOV','List of Value (LOV) ' from dual union all " +
			"select 'CHECKBOX','Single Checkbox' from dual union all " +
			"select 'CHECKBOX_GRP','Group Checkbox' from dual union all " +
			"select 'PICKLIST','Pick List' from dual union all " +
			"select 'DATE','Date Picker' from dual union all " +
			"select 'DATETIME','Date Time Picker' from dual union all " +
			"select 'ATTACHMENT','File Attachment' from dual union all " +
			"select 'TABLE','Table' from dual union all " +
			"select 'ACCORDION','Accordion/Group' from dual union all " +
			"select 'CALCULATED','Calculated Field' from dual union all " +
			"select 'REPORT','Report Widget (Dashboard)' from dual union all " +
			"select 'REPORT','Custom Widget (Javascript)' from dual union all " +
			"select 'PASSWORD','Password' from dual";
	if (lov_type.equals("driver_type"))
		sql="select 'BUILD','Build Driver' from dual union all select 'DEPLOY','Deploy Driver' from dual";
	if (lov_type.equals("class_type"))
		sql="select 'BUILD','Build Class' from dual union all "+
			" select 'DEPLOY','Deploy Class' from dual union all  "+
			" select 'REPO','Repository Class' from dual union all " +
			" select 'CHECK','Custom Check Class' from dual  ";
			;
	if (lov_type.equals("group_type"))
		sql="select 'USER', 'User Group' from dual union all select 'NOTIFICATION','Notification Group' from dual";
	if (lov_type.equals("slot_type"))
		sql="select 'DAILY', 'Daily Plan' from dual union all " +
			" select 'HOURLY','Hourly Plan' from dual union all "+
			" select 'FREE','Upon Request(Free) Plan' from dual ";
	if (lov_type.equals("role"))
		sql="select id, description from tdm_role order by 2";
	if (lov_type.equals("skip_reason"))
		sql="select 'CANCELLED', 'Cancelled' from dual union all " +
			 " select 'SUCCESSFULL','Consider Successfull' from dual  ";
	return sql;
	
}

//***********************

ArrayList<String[]> getLovArrayList(Connection conn, HttpSession session, String lov_type, String lov_parameters, String to_refresh) {
	String sql= "";
	
	ArrayList<String[]> lovArr=new ArrayList<String[]>();
	
	//ArrayList<String[]> lovArr=(ArrayList<String[]>) session.getAttribute(lov_type);
	//if (lovArr!=null) return lovArr;
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	boolean use_cache=true;
	if (to_refresh.equals("YES"))  use_cache=false;
	
	
	if (lov_type.indexOf("lov:")==0) {
		String lov_id=lov_type.split(":")[1];
		int lov_id_int=0;
		try{lov_id_int=Integer.parseInt(lov_id);} catch(Exception e) {lov_id_int=0;}
		if (lov_id_int==0) return lovArr;
		
		sql="select validation_sql, validation_env_id from mad_flex_field where id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",lov_id});
		ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
		if (arr==null || arr.size()==0) return lovArr;
		
		
		String[] arrPar=lov_parameters.split(":");
		String request_id=arrPar[0];
		String form_field_values="";
		
		try{form_field_values=arrPar[1];} catch(Exception e) {}
		
		arrPar=form_field_values.split("\n|\r");
		
		ArrayList<String[]> formParams=new ArrayList<String[]>();
		
		for (int i=0;i<arrPar.length;i++) {
			int loc=arrPar[i].indexOf("=");
			if (loc==-1) break;
			String param_name=arrPar[i].substring(0,loc);
			String param_value="";
			try{param_value=arrPar[i].substring(loc+1);} catch(Exception e) {}
			formParams.add(new String[]{param_name,param_value});
		}
		
		ArrayList<String[]> paramArr=getRequestParameters(conn, session, request_id);
		
		
		//override form vaues
		int len=paramArr.size();
		
		for (int i=0;i<formParams.size();i++) {
			String form_param_name=formParams.get(i)[0];
			
			boolean is_found=false;
			
			for (int j=0;j<len;j++) {
				String persisted_param_name=paramArr.get(j)[0];
				
				if (!form_param_name.equals(persisted_param_name)) continue;
				
				is_found=true;
				paramArr.set(j,formParams.get(i));
			}
			
			if (!is_found)
				paramArr.add(formParams.get(i));
		}
		
	
		
		String validation_sql=replaceAllParams(arr.get(0)[0],paramArr);
		String validation_env_id=arr.get(0)[1];
		
		
		
		lovArr=getArrayForList(conn, session, lov_type, validation_sql, validation_env_id, use_cache);
		
		session.putValue(lov_type, lovArr);
		
		return lovArr;
		
	}
		
	 
	sql=decodeLovSql(lov_type);
	
	bindlist.clear();
	
	lovArr=(ArrayList<String[]>) session.getAttribute(lov_type);
	
	if (lovArr==null || !use_cache) {
		lovArr=getDbArrayConf(conn, sql, 10000, bindlist);
		session.putValue(lov_type, lovArr);
	}
			
		
	
	return lovArr;
}

//********************************************************************************
String makeLov(
		Connection conn,
		HttpSession session,
		String lov_title,
		String lov_type, 
		String lov_parameters, 
		String curr_value,
		String fireEvent) {
	
	ArrayList<String[]> lovArr=getLovArrayList(conn, session, lov_type, lov_parameters, "YES");
	
	StringBuilder sb=new StringBuilder();
	
	sb.append("<h4><span class=\"label label-danger\">"+lov_title+"</span></h4>");
	sb.append("<table class=table>");
	sb.append("<tr>");
	sb.append("<td width=\"100%\">");
	sb.append(makeText("filter_lov_box", "", "placeholder=\"Search for ...\" onkeypress=\"filterLovOnEnter(event)\"", 0));
	sb.append("</td>");
	sb.append("<td nowrap >");
	sb.append("<big><big><font color=blue><span class=\"glyphicon glyphicon-filter\" onclick=\"filterLov(false)\"></span></font></big></big>");
	sb.append(" ");
	sb.append("<big><big><font color=green><span class=\"glyphicon glyphicon-refresh\" onclick=\"filterLov(true)\"></span></font></big></big>");
	sb.append("</td>");
	sb.append("</tr>");
	sb.append("</table>");
	
	sb.append("<input type=hidden id=lov_fireEvent value=\""+fireEvent+"\">");
	sb.append("<input type=hidden id=lov_type value=\""+lov_type+"\">");
	sb.append("<input type=hidden id=lov_parameters value=\""+clearHtml(lov_parameters)+"\">");

	sb.append("<input type=hidden id=lov_selected_value value=\""+curr_value+"\">");
	sb.append("<div id=lovListItemsDiv>");
	sb.append(fillLovList(conn, lovArr, curr_value,""));
	sb.append("</div>");
	
	
	
	return sb.toString();
}

//********************************************************************************
String setLovFilter(Connection conn, HttpSession session, String lov_type, String curr_value, String filter_value, String lov_params, String to_refresh) {
	
	ArrayList<String[]> lovArr=getLovArrayList(conn, session, lov_type, lov_params, to_refresh);
	
	StringBuilder sb=new StringBuilder();

	sb.append(fillLovList(conn, lovArr, curr_value,filter_value));
	
	return sb.toString();
	
}
//********************************************************************************
String fillLovList(Connection conn, ArrayList<String[]> arr, String curr_value, String filter_value) {
	StringBuilder sb=new StringBuilder();
	
	if (arr==null) arr=new ArrayList<String[]>();
	
	StringBuilder cells=new StringBuilder();
	StringBuilder values=new StringBuilder();
	
	sb.append("<table class=\"table table-condensed table-bordered table-striped\">");
	
	int matched_count=0;
	
	for (int i=0;i<arr.size();i++) {
		String val=""; 

		values.setLength(0);
		cells.setLength(0);
		
		try{val=arr.get(i)[0];} catch(Exception e) {};
		
		int start_c=0;
		if (arr.get(i).length>1) start_c=1;
		
		for (int c=start_c;c<arr.get(i).length;c++) {
			values.append(arr.get(i)[c]);
			cells.append("<td nowrap>"+arr.get(i)[c]+"</td>");
		}
		
		
		
		
		if (filter_value.length()>0 && !values.toString().toUpperCase().contains(filter_value.toUpperCase())) continue;
		matched_count++;
		
		String style="";
		boolean selected=false;
		if (curr_value.equals(val)) selected=true;
			
		if (selected) 
			sb.append("<tr class=danger>");
		else 
			sb.append("<tr>");
		
		sb.append("<td align=right>");
		
		if (selected)
			sb.append("<input name=lovradiogroup type=radio checked onclick=\"setLovSelection('"+i+"','"+codehtml(val)+"');\" ondblclick=\"selectLOV();\">");
		else 
			sb.append("<input name=lovradiogroup type=radio  onclick=\"setLovSelection('"+i+"','"+codehtml(val)+"');\" ondblclick=\"selectLOV();\">");

		sb.append("</td>");
		sb.append(cells.toString());
		sb.append("</tr>");
			


	}
	
	
	
	if (matched_count==0) 
		return "<font color=red>No item is matching.</font>";
	
	
	return sb.toString();
}

//********************************************************************************
int addNewMadPlatformTypeModifierGroup(
		Connection conn,
		HttpSession session,
		String platform_type_id,
		String modifier_group
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	
	sql="insert into  mad_platform_type_modifier_group (platform_type_id,modifier_group_id) values(?,?) ";
	bindlist.add(new String[]{"INTEGER",platform_type_id});
	bindlist.add(new String[]{"STRING",modifier_group});
	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	
	return 0;
}


//********************************************************************************
int addNewMadGroup(
		Connection conn,
		HttpSession session,
		String group_type,
		String group_name
		) {
	
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select 1 from mad_group where group_name=? and group_type=?";
	bindlist.add(new String[]{"STRING",group_name});
	bindlist.add(new String[]{"STRING",group_type});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	sql="insert into  mad_group (group_name, group_type) values(?,?) ";
	bindlist.clear();
	bindlist.add(new String[]{"STRING",group_name});
	bindlist.add(new String[]{"STRING",group_type});
	
	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	
	return 0;
}


//********************************************************************************
int addNewMadEmailTemplate(
		Connection conn,
		HttpSession session,
		String template_name
		) {
	
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select 1 from mad_email_template where template_name=?";
	bindlist.add(new String[]{"STRING",template_name});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	sql="insert into  mad_email_template (template_name) values(?) ";
	bindlist.clear();
	bindlist.add(new String[]{"STRING",template_name});
	
	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	
	return 0;
}
//********************************************************************************
int addNewMadFlexField(
		Connection conn,
		HttpSession session,
		String flex_field_type,
		String field_title
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select 1 from mad_flex_field where title=?";
	bindlist.add(new String[]{"STRING",field_title});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	sql="insert into  mad_flex_field (entry_type, title, field_size) values(?,?,?) ";
	bindlist.clear();
	bindlist.add(new String[]{"STRING",flex_field_type});
	bindlist.add(new String[]{"STRING",field_title});
	bindlist.add(new String[]{"INTEGER","0"});
	
	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	
	return 0;
}



//********************************************************************************
int addNewMadModifierRule(
		Connection conn,
		HttpSession session,
		String modifier_group_id,
		String modifier_name
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select max(modifier_order)+1 from mad_modifier_rule where modifier_group_id=?";
	bindlist.add(new String[]{"INTEGER",modifier_group_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	String modifier_order="1";
	if (arr.size()==1) modifier_order=nvl(arr.get(0)[0],"1");
	

	sql="insert into  mad_modifier_rule (modifier_group_id,modifier_name,modifier_order) values(?,?,?) ";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",modifier_group_id});
	bindlist.add(new String[]{"STRING",modifier_name});
	bindlist.add(new String[]{"INTEGER",modifier_order});

	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	
	return 0;
}

//********************************************************************************
int addNewMadEnvironment(
		Connection conn,
		HttpSession session,
		String environment_name
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select 1 from mad_environment where environment_name=?";
	bindlist.add(new String[]{"STRING",environment_name});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	sql="insert into  mad_environment (environment_name) values(?) ";
	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	
	return 0;
}

//********************************************************************************
void savePrivateFilterParameters(
		Connection conn,
		HttpSession session,
		String filter_id
		) {
	String sql="";
	StringBuilder xml=new StringBuilder();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String curruser=""+((Integer) session.getAttribute("userid"));
	
	ArrayList<String> filters=new ArrayList<String>();
	filters.add("FILTER_KEYWORD");
	filters.add("filter_request_group");
	filters.add("filter_request_type");
	filters.add("filter_request_status");
	filters.add("filter_request_created_by");
	filters.add("filter_request_date");
	filters.add("filter_deployment_date");
	filters.add("FILTER_MEMBER_PATH");
	filters.add("FILTER_APPLICATIONS");
	filters.add("FILTER_ENVIRONMENTS");
	
	
	
	xml.append("<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n");
	xml.append("<filter>\n");
	
	for (int i=0;i<filters.size();i++) {
		String filter_name=filters.get(i);
		xml.append("\t<FILTER name=\""+filter_name+"\">"+getMadSearchFilter(session,filter_name,"FILTER")+"</FILTER>\n");
	}
	
	xml.append("\t<flex_fields>\n");
	ArrayList<String[]> darr=getFlexFieldFilters(session, "FILTER");
	
	if (darr!=null)
		for (int i=0;i<darr.size();i++) {
			String flex_field_type=darr.get(i)[0];
			String flex_field_id=darr.get(i)[1];
			String filter_value=darr.get(i)[2];
			
			xml.append("\t\t<FLEX type=\""+flex_field_type+"\" id=\""+flex_field_id+"\">"+filter_value+"</FLEX>\n");

			
		}
	xml.append("\t</flex_fields>\n");
	
	String fields_to_show=nvl((String) session.getAttribute("fields_to_show"),"");
	String sort_statement=nvl((String) session.getAttribute("sort_statement"),"");
	
	xml.append("\n<fields_to_show>"+fields_to_show+"</fields_to_show>\n");
	xml.append("\n<order_by>"+sort_statement+"</order_by>\n");
	
	xml.append("</filter>\n");
	

	
	sql="update mad_query set query_statement=? where id=?";
	bindlist.clear();
	bindlist.add(new String[]{"STRING",xml.toString()});
	bindlist.add(new String[]{"INTEGER",filter_id});
	
	execDBConf(conn, sql, bindlist);
	

}


//*****************************************************************************
void setPrivateFiltersByXML(HttpSession session, String xml) {
	DocumentBuilderFactory dbf =null;
	DocumentBuilder db =null;
	Document doc = null;

	try {
		dbf = DocumentBuilderFactory.newInstance();
		db = dbf.newDocumentBuilder();
		doc=db.parse(new InputSource(new StringReader(xml)));
		
		NodeList filterList = doc.getElementsByTagName("FILTER");
		for (int i=0;i<filterList.getLength();i++) {
			Node n=filterList.item(i);
			
			String filter_name=n.getAttributes().getNamedItem("name").getTextContent();
			String filter_val=n.getTextContent();
			
			setMadSearchFilter(session, filter_name,filter_val, "FILTER");

		}
		
		
		NodeList flexList = doc.getElementsByTagName("FLEX");
		for (int i=0;i<flexList.getLength();i++) {
			Node n=flexList.item(i);
			
			String flex_field_type=n.getAttributes().getNamedItem("type").getTextContent();
			String flex_field_id=n.getAttributes().getNamedItem("id").getTextContent();
			String filter_val=n.getTextContent();
			
			setFlexFieldFilter(session,flex_field_type,flex_field_id,filter_val,"FILTER");
			
				
		}
		
		session.setAttribute("sort_statement","");
		
		NodeList sortList = doc.getElementsByTagName("order_by");
		
		if (sortList!=null)
			for (int i=0;i<sortList.getLength();i++) {
				Node n=sortList.item(i);
				session.setAttribute("sort_statement",n.getTextContent());
			}
		
		session.setAttribute("fields_to_show","");
		
		NodeList fieldList = doc.getElementsByTagName("fields_to_show");
		
		if (fieldList!=null)
			for (int i=0;i<fieldList.getLength();i++) {
				Node n=fieldList.item(i);
				session.setAttribute("fields_to_show",n.getTextContent());
			}
		
		
	} catch(Exception e) {
		e.printStackTrace();
	} 

	
	
	
}


//********************************************************************************
String makeSaveAsPrivateFilterDlg(
		Connection conn,
		HttpSession session,
		String current_query_id
		) {
	String sql="";
	StringBuilder sb=new StringBuilder();
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select id, query_name   from mad_query where query_user=?   order by  query_name";
	
	
	String curruser=""+((Integer) session.getAttribute("userid"));
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",curruser});
	
	ArrayList<String[]> filterArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	filterArr.add(0, new String[]{"","[Save as a New Filter]"});
	String text_disabled="";
	
	String query_name="New Filter";
	
	if (current_query_id.length()>0) {
		text_disabled="disabled";
		sql="select query_name from mad_query where id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",current_query_id});
		ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
		try{query_name=arr.get(0)[0];} catch(Exception e) {}
	}
	
	sb.append("<div class=\"row\">");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<b>Filters :</b> ");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeComboArr(filterArr, "", "size=1 id=saving_query_list onchange=\"changedSavingQueryList();\"  ", current_query_id, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	
	
	sb.append("<div class=\"row\">");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<b>Filter Name :</b> ");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("saving_query_name", query_name, text_disabled, 0));
	sb.append("</div>");
	sb.append("</div>");


	
	return sb.toString();
}

//********************************************************************************
int addNewPrivateFilter(
		Connection conn,
		HttpSession session,
		String filter_name
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String curruser=""+((Integer) session.getAttribute("userid"));
	
	sql="select 1 from mad_query where query_name=? and query_user=? ";
	bindlist.clear();
	bindlist.add(new String[]{"STRING",filter_name});
	bindlist.add(new String[]{"INTEGER",curruser});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	sql="SELECT auto_increment from information_schema.tables where table_name = 'mad_query' AND table_schema = DATABASE()";
	String filter_id=getDBSingleVal(conn, sql);
	
	sql="insert into  mad_query (id, query_name, created_user, query_user) values (?, ?, ?, ?) ";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",filter_id});
	bindlist.add(new String[]{"STRING",filter_name});
	bindlist.add(new String[]{"INTEGER",curruser});
	bindlist.add(new String[]{"INTEGER",curruser});
	
	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	savePrivateFilterParameters(conn, session, filter_id);
	
	return 0;
}



//********************************************************************************
String makePrivateFilterEditor(
		Connection conn,
		HttpSession session,
		String query_id
		) {
	String sql="";
	StringBuilder sb=new StringBuilder();
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String curruser=""+((Integer) session.getAttribute("userid"));
	
	sql="select query_name from mad_query where id=? and query_user=?";
	bindlist.clear();
	bindlist.add(new String[]{"STRING",query_id});
	bindlist.add(new String[]{"INTEGER",curruser});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==0)  return "no query to edit";
	
	String query_name=arr.get(0)[0];
	
	sb.append("<input type=hidden id=editing_query_id value="+query_id+">");
	
	sb.append("<div class=\"row\">");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<b>Query Name :</b> ");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("editing_query_name", codehtml(clearHtml(query_name)), "onchange=renameMadQueryName()", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	return sb.toString();
}


//********************************************************************************
int renamePrivateFilter(
		Connection conn,
		HttpSession session,
		String filter_id,
		String filter_name
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String curruser=""+((Integer) session.getAttribute("userid"));
	
	sql="select 1 from mad_query where query_name=? and query_user=?  and id<>? ";
	bindlist.clear();
	bindlist.add(new String[]{"STRING",filter_name});
	bindlist.add(new String[]{"INTEGER",curruser});
	bindlist.add(new String[]{"INTEGER",filter_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	sql="update mad_query set query_name=? where id=? and query_user=?";
	bindlist.clear();
	bindlist.add(new String[]{"STRING",filter_name});
	bindlist.add(new String[]{"INTEGER",filter_id});
	bindlist.add(new String[]{"INTEGER",curruser});

	
	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	
	return 0;
}
//********************************************************************************
void removePrivateFilter(
		Connection conn,
		HttpSession session,
		String filter_id
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String curruser=""+((Integer) session.getAttribute("userid"));
	
	sql="delete from mad_query where query_user=? and id=? and query_user=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",curruser});
	bindlist.add(new String[]{"INTEGER",filter_id});
	bindlist.add(new String[]{"INTEGER",curruser});

	
	execDBConf(conn, sql, bindlist);
}
//********************************************************************************
int addNewMadRequestType(
		Connection conn,
		HttpSession session,
		String request_group,
		String request_type_name
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select 1 from mad_request_type where request_type=? and request_group=?";
	bindlist.add(new String[]{"STRING",request_type_name});
	bindlist.add(new String[]{"STRING",request_group});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	sql="insert into  mad_request_type (request_type,request_group) values(?,?) ";
	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	
	return 0;
}

//********************************************************************************
int addNewMadPlatform(
		Connection conn,
		HttpSession session,
		String platform_type_id,
		String platform_name
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select 1 from mad_platform where platform_name=?";
	bindlist.add(new String[]{"STRING",platform_name});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	sql="insert into  mad_platform (platform_type_id,platform_name) values(?,?) ";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",platform_type_id});
	bindlist.add(new String[]{"STRING",platform_name});

	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	
	return 0;
}

//********************************************************************************
int addNewMadRepository(
		Connection conn,
		HttpSession session,
		String repository_name
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select 1 from mad_repository where repository_name=?";
	bindlist.add(new String[]{"STRING",repository_name});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	sql="insert into  mad_repository (repository_name) values(?) ";
	bindlist.clear();
	bindlist.add(new String[]{"STRING",repository_name});

	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	
	return 0;
}



//********************************************************************************
int addNewMadString(
		Connection conn,
		HttpSession session,
		String string_name,
		String lang
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select 1 from mad_string where string_name=? and lang=?";
	bindlist.add(new String[]{"STRING",string_name});
	bindlist.add(new String[]{"STRING",lang});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	sql="insert into  mad_string (string_name, lang) values(?, ?) ";
	bindlist.clear();
	bindlist.add(new String[]{"STRING",string_name});
	bindlist.add(new String[]{"STRING",lang});
	

	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	
	return 0;
}


//********************************************************************************
int addNewMadLang(
		Connection conn,
		HttpSession session,
		String lang_desc
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select 1 from mad_lang where lang_desc=? and lang=?";
	bindlist.add(new String[]{"STRING",lang_desc});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	sql="insert into  mad_lang (lang_desc) values(?) ";
	bindlist.clear();
	bindlist.add(new String[]{"STRING",lang_desc});

	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	
	return 0;
}

//********************************************************************************
int addNewMadClass(
		Connection conn,
		HttpSession session,
		String class_type,
		String class_name
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select 1 from mad_class where driver_name=?";
	bindlist.add(new String[]{"STRING",class_name});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	sql="insert into  mad_class (class_name, class_desc, class_type) values(?,?,?) ";
	bindlist.clear();
	bindlist.add(new String[]{"STRING",class_name});
	bindlist.add(new String[]{"STRING",class_name});
	bindlist.add(new String[]{"STRING",class_type});

	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	
	return 0;
}

//********************************************************************************
int addNewMadDriver(
		Connection conn,
		HttpSession session,
		String driver_type,
		String driver_name
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select 1 from mad_driver where driver_name=?";
	bindlist.add(new String[]{"STRING",driver_name});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	sql="insert into  mad_driver (driver_name, driver_type) values(?,?) ";
	bindlist.clear();
	bindlist.add(new String[]{"STRING",driver_name});
	bindlist.add(new String[]{"STRING",driver_type});

	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	
	return 0;
}

//********************************************************************************
int addNewMadModifierGroup(
		Connection conn,
		HttpSession session,
		String modifier_group_name
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select 1 from mad_modifier_group where modifier_group_name=?";
	bindlist.add(new String[]{"STRING",modifier_group_name});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	sql="insert into  mad_modifier_group (modifier_group_name) values(?) ";
	bindlist.clear();
	bindlist.add(new String[]{"STRING",modifier_group_name});

	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	
	return 0;
}
//********************************************************************************
int addNewMadPlatformType(
		Connection conn,
		HttpSession session,
		String platform_type_name
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select 1 from mad_platform_type where platform_type_name=?";
	bindlist.add(new String[]{"STRING",platform_type_name});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	sql="insert into  mad_platform_type (platform_type_name) values(?) ";
	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	
	return 0;
}

//********************************************************************************
int addNewMadUser(
		Connection conn,
		HttpSession session,
		String username
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select 1 from tdm_user where lower(username)=?";
	bindlist.add(new String[]{"STRING",username.toLowerCase()});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	sql="insert into  tdm_user (username,fname, lname) values(?,'undefined','') ";
	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	
	return 0;
}

//********************************************************************************
int addNewMadAppication(
		Connection conn,
		HttpSession session,
		String application_name
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select 1 from mad_application where application_name=?";
	bindlist.add(new String[]{"STRING",application_name});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	sql="insert into  mad_application (application_name) values(?) ";
	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	
	return 0;
}
//********************************************************************************
int addNewMadPermission(
		Connection conn,
		HttpSession session,
		String permission_name
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select 1 from mad_permission where permission_name=?";
	bindlist.add(new String[]{"STRING",permission_name});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	sql="insert into  mad_permission (permission_name) values(?) ";
	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	
	return 0;
}


//********************************************************************************
int addNewMadMethod(
		Connection conn,
		HttpSession session,
		String method_name,
		String method_type
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select 1 from mad_method where method_name=?";
	bindlist.add(new String[]{"STRING",method_name});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	sql="insert into  mad_method (method_name, method_type) values(?,?) ";
	bindlist.clear();
	bindlist.add(new String[]{"STRING",method_name});
	bindlist.add(new String[]{"STRING",method_type});
	
	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	
	
	
	return 0;
}


//********************************************************************************
int addNewMadActionMethod(
		Connection conn,
		HttpSession session,
		String action_id,
		String method_id
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String execution_order="1";
	
	sql="select max(execution_order) from mad_flow_state_action_methods where flow_state_action_id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",action_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==1) 
		try{execution_order=""+(Integer.parseInt(arr.get(0)[0])+1);} catch(Exception e) {execution_order="1";}
	
	sql="select "+
		" param_default_val_1, "+
		" param_default_val_2, "+
		" param_default_val_3, "+
		" param_default_val_4, "+
		" param_default_val_5, "+
		" param_default_val_6, "+
		" param_default_val_7, "+
		" param_default_val_8, "+
		" param_default_val_9, "+
		" param_default_val_10 "+
		" from mad_method where id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",method_id});
	ArrayList<String[]> parArr=getDbArrayConf(conn, sql, 1, bindlist);

	
	sql="insert into  mad_flow_state_action_methods (flow_state_action_id, method_id, execution_order, "+
				" value_1, value_2, value_3, value_4, value_5, value_6, value_7, value_8, value_9, value_10 " +
				"	) "+
		" values( ?, ?, ?,"+
				" ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) ";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",action_id});
	bindlist.add(new String[]{"INTEGER",method_id});
	bindlist.add(new String[]{"INTEGER",execution_order});
	
	for (int v=0;v<parArr.get(0).length;v++) 
		bindlist.add(new String[]{"STRING",parArr.get(0)[v]});

	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	
	
	
	return 0;
}

//********************************************************************************
int addNewMadFlow(
		Connection conn,
		HttpSession session,
		String flow_name
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select 1 from mad_flow where flow_name=?";
	bindlist.add(new String[]{"STRING",flow_name});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	sql="insert into  mad_flow (flow_name) values(?) ";
	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	String[] initial_states=new String[]{"NEW","CLOSED"};
	sql="select id from mad_flow where flow_name=?";
	arr=getDbArrayConf(conn, sql, 1, bindlist);
	String flow_id=arr.get(0)[0];
	
	for (int i=0;i<initial_states.length;i++) {
		String states=initial_states[i];
		sql="insert into mad_flow_state (flow_id, state_type, state_name, state_title) values (?, ?, ?, ?)";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",flow_id});
		bindlist.add(new String[]{"STRING","SYSTEM"});
		bindlist.add(new String[]{"STRING",states});
		bindlist.add(new String[]{"STRING",states});
		
		execDBConf(conn, sql, bindlist);
	}
	
	
	return 0;
}

//********************************************************************************
int addNewMadDeploymentSlot(
		Connection conn,
		HttpSession session,
		String slot_type,
		String slot_name
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select 1 from mad_deployment_slot where slot_name=?";
	bindlist.add(new String[]{"STRING",slot_name});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	bindlist.clear();
	bindlist.add(new String[]{"STRING",slot_type});
	bindlist.add(new String[]{"STRING",slot_name});
	
	sql="insert into  mad_deployment_slot (slot_type, slot_name) values(?, ?)";
	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	return 0;
}

//********************************************************************************
int addNewMadDashSql(
		Connection conn,
		HttpSession session,
		String sql_name
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select 1 from mad_dashboard_sql where sql_name=?";
	bindlist.add(new String[]{"STRING",sql_name});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	bindlist.clear();
	bindlist.add(new String[]{"STRING",sql_name});

	
	sql="insert into  mad_dashboard_sql (sql_name) values(?)";
	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	return 0;
}

//********************************************************************************
int addNewMadDashParameter(
		Connection conn,
		HttpSession session,
		String parameter_name
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select 1 from mad_dashboard_parameter where parameter_title=?";
	bindlist.add(new String[]{"STRING",parameter_name});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	bindlist.clear();
	bindlist.add(new String[]{"STRING",parameter_name});

	
	sql="insert into  mad_dashboard_parameter (parameter_title) values(?)";
	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	return 0;
}


//********************************************************************************
int addNewMadDashView(
		Connection conn,
		HttpSession session,
		String view_name,
		String view_type
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select 1 from mad_dashboard_view where view_name=?";
	bindlist.add(new String[]{"STRING",view_name});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	sql="insert into  mad_dashboard_view (view_name, view_type) values(?,?)";

	bindlist.clear();
	bindlist.add(new String[]{"STRING",view_name});
	bindlist.add(new String[]{"STRING",view_type});
	
	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	return 0;
}

//********************************************************************************
int addNewMadDashViewFilter(
		Connection conn,
		HttpSession session,
		String view_id,
		String parameter_id
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select 1 from mad_dashboard_view_parameter where view_id=? and parameter_id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",view_id});
	bindlist.add(new String[]{"INTEGER",parameter_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	sql="insert into  mad_dashboard_view_parameter (view_id, parameter_id) values(?,?)";

	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",view_id});
	bindlist.add(new String[]{"INTEGER",parameter_id});
	
	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	return 0;
}

//********************************************************************************
int addNewMadDeploymentSlotDetail(
		Connection conn,
		HttpSession session,
		String slot_id,
		String slot_detail_name
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select 1 from mad_deployment_slot_detail where slot_id=? and slot_name=? ";
	bindlist.add(new String[]{"INTEGER",slot_id});
	bindlist.add(new String[]{"STRING",slot_detail_name});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	bindlist.clear();
	bindlist.add(new String[]{"STRING",slot_id});
	bindlist.add(new String[]{"STRING",slot_detail_name});
	
	sql="insert into  mad_deployment_slot_detail (slot_id, slot_name, daily_time) values(?, ?, now())";
	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;
	
	return 0;
}


//********************************************************************************
void removeMadDeploymentSlotDetail(
		Connection conn,
		HttpSession session,
		String slot_id,
		String slot_detail_id
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="delete from mad_deployment_slot_detail where slot_id=? and id=? ";
	bindlist.add(new String[]{"INTEGER",slot_id});
	bindlist.add(new String[]{"INTEGER",slot_detail_id});
	execDBConf(conn, sql, bindlist);
}


//********************************************************************************
void updateMadDeploymentSlotDetailHourly(
		Connection conn,
		HttpSession session,
		String slot_id,
		String day_id,
		String minute_id,
		String state
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",slot_id});
	bindlist.add(new String[]{"INTEGER",day_id});
	bindlist.add(new String[]{"INTEGER",minute_id});
	
	if (state.equals("UNSET")) {
		sql="update mad_deployment_slot_detail set is_valid='NO' where slot_id=? and hourly_day_id=? and hourly_minute_id=?";
		execDBConf(conn, sql, bindlist);
	} else {
		
		sql="select 1 from mad_deployment_slot_detail where slot_id=? and hourly_day_id=? and hourly_minute_id=?";
		ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
		
		if (arr.size()==0) {
			sql="insert into mad_deployment_slot_detail (slot_id, hourly_day_id, hourly_minute_id) values(?, ?, ?)";
			execDBConf(conn, sql, bindlist);
		}
		else {
			sql="update mad_deployment_slot_detail set is_valid='YES' where slot_id=? and hourly_day_id=? and hourly_minute_id=?";
			execDBConf(conn, sql, bindlist);
		}
		
	}
		
}

//********************************************************************************
int addNewMadFlowState(
		Connection conn,
		HttpSession session,
		String flow_id,
		String state_name
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select 1 from mad_flow_state where state_name=? and flow_id=?";
	bindlist.add(new String[]{"STRING",state_name});
	bindlist.add(new String[]{"INTEGER",flow_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	sql="select 1 from mad_flow_state where state_title=? and flow_id=?";
	arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	sql="insert into  mad_flow_state (state_name, state_title, flow_id) values(?, ?, ?) ";
	bindlist.clear();
	bindlist.add(new String[]{"STRING",state_name});
	bindlist.add(new String[]{"STRING",state_name});
	bindlist.add(new String[]{"INTEGER",flow_id});
	
	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;

	
	return 0;
}

//********************************************************************************
int addNewMadFlowStateAction(
		Connection conn,
		HttpSession session,
		String flow_state_id,
		String action_name
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select 1 from mad_flow_state_action where action_name=? and flow_state_id=?";
	bindlist.add(new String[]{"STRING",action_name});
	bindlist.add(new String[]{"INTEGER",flow_state_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) return -1;
	
	sql="insert into  mad_flow_state_action (action_name, flow_state_id, action_type) values(?, ?, 'HUMAN') ";
	boolean is_success=execDBConf(conn, sql, bindlist);
	if (!is_success) return -2;

	
	return 0;
}

//********************************************************************************
void updateMadTableField(
		Connection conn,
		HttpSession session,
		String table_name,
		String table_id,
		String field_name,
		String field_value
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	
	if (field_value.length()==0) {
		sql="update  "+table_name+" set  "+field_name+"=null  where id=? ";
		
		bindlist.add(new String[]{"INTEGER",table_id});
	}
	else {
		sql="update  "+table_name+" set  "+field_name+"=?  where id=? ";
		
		bindlist.add(new String[]{"STRING",field_value});
		bindlist.add(new String[]{"INTEGER",table_id});
	}
	
	
	
	execDBConf(conn, sql, bindlist);
	
	createGenericHistory(conn, session, "UPDATE", table_name, table_id, field_name);
	
}


//********************************************************************************
void deleteMadPlatformTypeModifierGroup(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	sql="delete from  mad_platform_type_modifier_group where id=? ";
	
	createGenericHistory(conn, session, "DELETE", "mad_platform_type_modifier_group", id, "ALL"); 
	
	execDBConf(conn, sql, bindlist);
	
	
}

//********************************************************************************
String deleteMadEnvironment(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select 1 from mad_request_app_env where environment_id=?";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) {
		return "This record is being used. Cannot be removed.";
	}
	
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	sql="delete from  mad_platform_env where environment_id=? ";
	execDBConf(conn, sql, bindlist);
	
	sql="delete from  mad_environment where id=? ";
	
	createGenericHistory(conn, session, "DELETE", "mad_environment", id, "ALL"); 
	
	execDBConf(conn, sql, bindlist);

	return "";

}


//********************************************************************************
String deleteMadRequestType(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select 1 from mad_request where request_type_id=?";
			
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==1) {
		return "This record is being used. Cannot be removed.";
	}
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	sql="delete from mad_request_type_state_field_override where request_type_id=?";
	execDBConf(conn, sql, bindlist);
	
	sql="delete from  mad_request_type_field where request_type_id=? ";
	execDBConf(conn, sql, bindlist);
	
	sql="delete from  mad_request_type where id=? ";
	
	createGenericHistory(conn, session, "DELETE", "mad_request_type", id, "ALL"); 
	
	execDBConf(conn, sql, bindlist);
	
	return "";
	
}

//********************************************************************************
String deleteMadFlexField(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select 1 from mad_request_fields where flex_field_id=? "+
		" union all " +
		" select 1 from mad_request_attachment where flex_field_id=? "+
		" union all " + 
		" select 1 from mad_request_env_fields where flex_field_id=? "+
		" union all " + 
		" select 1 from mad_request_type_field where flex_field_id=? "	+
		" union all "+ 
		" select 1 from  mad_request_type_state_field_override where flex_field_id=? "+
		" union all " + 
		" select 1 from mad_application_flex_fields where flex_field_id=? "		+
		" union all " + 
		" select 1 from mad_platform_type_flex_fields where flex_field_id=? ";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	bindlist.add(new String[]{"INTEGER",id});
	bindlist.add(new String[]{"INTEGER",id});
	bindlist.add(new String[]{"INTEGER",id});
	bindlist.add(new String[]{"INTEGER",id});
	bindlist.add(new String[]{"INTEGER",id});
	bindlist.add(new String[]{"INTEGER",id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) {
		return "This record is being used. Cannot be removed.";
	}
	
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	sql="delete from  mad_request_type_state_field_override where flex_field_id=? ";
	execDBConf(conn, sql, bindlist);
	
	sql="delete from  mad_flex_field where id=? ";
	
	createGenericHistory(conn, session, "DELETE", "mad_flex_field", id, "ALL"); 
	
	execDBConf(conn, sql, bindlist);
	
	return "";
	
}

//********************************************************************************
String deleteMadPlatformType(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select 1 from mad_platform where platform_type_id=? "+
		" union all "+
		" select 1 from mad_application where platform_type_id=? ";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	bindlist.add(new String[]{"INTEGER",id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==1) {
		return "This record is being used . Cannot be removed.";
	}
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	
	
	sql="delete from  mad_platform_type_modifier_group where platform_type_id=? ";
	execDBConf(conn, sql, bindlist);
	
	sql="delete from  mad_platform_type_flex_fields where platform_type_id=? ";
	execDBConf(conn, sql, bindlist);
	
	sql="delete from  mad_platform_type where id=? ";
	
	createGenericHistory(conn, session, "DELETE", "mad_platform_type", id, "ALL"); 
	
	execDBConf(conn, sql, bindlist);
	
	return "";
	
}

//********************************************************************************
String deleteMadPlatform(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select 1 from mad_platform_env where platform_id=? "+
		" union all "+
		"select 1 from mad_request_env_fields where platform_id=?";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	bindlist.add(new String[]{"INTEGER",id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) {
		return "This record is being used. Cannot be removed.";
	}
	
	
	
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	sql="delete from  mad_platform_fields where platform_id=? ";
	execDBConf(conn, sql, bindlist);
	
	sql="delete from  mad_platform where id=? ";
	
	createGenericHistory(conn, session, "DELETE", "mad_platform", id, "ALL"); 
	
	execDBConf(conn, sql, bindlist);
	
	return "";
	
}

//********************************************************************************
String deleteMadRepository(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	sql="select 1 from mad_application where repository_id=?";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==1) {
		return "This repository is used by application(s). Cannot be removed.";
	}
	
	
	
	sql="delete from  mad_repository where id=? ";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	
	
	createGenericHistory(conn, session, "DELETE", "mad_repository", id, "ALL"); 
	execDBConf(conn, sql, bindlist);
	
	return "";
	

	
}


//********************************************************************************
String deleteMadString(
		Connection conn,
		HttpSession session,
		String id
		) {
	

	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	String sql="delete from  mad_string where id=? ";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	execDBConf(conn, sql, bindlist);
	
	return "";
	

	
}


//********************************************************************************
String deleteMadLang(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select 1 from mad_string where lang in (select lang from mad_lang where id=?)";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==1) {
		return "This language is used by strings.Cannot be deleted.";
	}
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	createGenericHistory(conn, session, "DELETE", "mad_lang", id, "ALL"); 
	
	sql="delete from  mad_lang where id=? ";
	execDBConf(conn, sql, bindlist);
	
	return "";

}

//********************************************************************************
String deleteMadDriver(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select 1 from mad_application where build_driver_id=? or deploy_driver_id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	bindlist.add(new String[]{"INTEGER",id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==1) {
		return "This driver is used by application(s).Cannot be deleted.";
	}
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	
	sql="delete from  mad_driver where id=? ";
	
	createGenericHistory(conn, session, "DELETE", "mad_driver", id, "ALL"); 
	
	execDBConf(conn, sql, bindlist);
	
	return "";

}

//********************************************************************************
String deleteMadClass(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	sql="delete from  mad_class where id=? ";
	
	createGenericHistory(conn, session, "DELETE", "mad_class", id, "ALL"); 
	
	execDBConf(conn, sql, bindlist);
	
	return "";

}
//********************************************************************************
String deleteMadModifierGroup(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select 1 from mad_platform_type_modifier_group where modifier_group_id=?";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) {
		return "This record is being used. Cannot be removed.";
	}
	
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	sql="delete from  mad_modifier_rule where modifier_group_id=? ";
	execDBConf(conn, sql, bindlist);
	
	sql="delete from  mad_modifier_group where id=? ";
	
	createGenericHistory(conn, session, "DELETE", "mad_modifier_group", id, "ALL"); 
	
	execDBConf(conn, sql, bindlist);
	
	return "";
		
}

//********************************************************************************
void deleteMadModifierRule(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",id});
	
	sql="delete from  mad_modifier_rule where id=? ";
	
	createGenericHistory(conn, session, "DELETE", "mad_modifier_rule", id, "ALL"); 
	
	execDBConf(conn, sql, bindlist);
	
		
}

//********************************************************************************
String deleteMadApplication(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select 1 from mad_request_application where application_id=? "+
		" union all " + 
		" select 1 from mad_application_dependency where depended_application_id=?";
				
				
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	bindlist.add(new String[]{"INTEGER",id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==1) {
		return "This record is being used. Cannot be removed.";
	}
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	sql="delete from  mad_application_flex_fields where application_id=? ";
	execDBConf(conn, sql, bindlist);
	
	sql="delete from  mad_application_dependency where application_id=? ";
	execDBConf(conn, sql, bindlist);
	
	sql="delete from  mad_application where id=? ";
	
	createGenericHistory(conn, session, "DELETE", "mad_application", id, "ALL"); 
	
	execDBConf(conn, sql, bindlist);

	return "";

}


//********************************************************************************
String deleteMadPermission(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select 1 from mad_flow_state_edit_permissions where permission_id=? "+
		" union all "+
		" select 1 from mad_flow_state_action_permissions where permission_id=?  ";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	bindlist.add(new String[]{"INTEGER",id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==1) {
		return "This record is being used. Cannot be removed.";
	}
	
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	sql="delete from  mad_group_permission where permission_id=? ";
	execDBConf(conn, sql, bindlist);
	
	sql="delete from  mad_permission where id=? ";
	
	createGenericHistory(conn, session, "DELETE", "mad_permission", id, "ALL"); 
	
	execDBConf(conn, sql, bindlist);
	
	return "";
	
}


//********************************************************************************
String deleteMadMethod(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql=" select 1 from mad_flow_state_action_methods where method_id=? "+
		" union all " + 
		" select 1 from mad_flex_field where validation_env_id=-1*?"+
		" union all " +
		" select 1 from mad_application where pre_deploy_method_id=?"+
		" union all " +
		" select 1 from mad_application where post_deploy_method_id=?"
		;
	
		
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	bindlist.add(new String[]{"INTEGER",id});
	bindlist.add(new String[]{"INTEGER",id});
	bindlist.add(new String[]{"INTEGER",id});

	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==1) {
		return "This record is being used. Cannot be removed.";
	}
	
		
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});

	sql="delete from  mad_method where id=? ";
	
	createGenericHistory(conn, session, "DELETE", "mad_method", id, "ALL"); 
	
	execDBConf(conn, sql, bindlist);
	
	return "";
}
//********************************************************************************
String deleteMadFlow(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select 1 from mad_request_type where flow_id=? "+
		" union all "+
		" select 1 from mad_request_flow_logs where flow_id=? limit 0,1 ";
	
		
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	bindlist.add(new String[]{"INTEGER",id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==1) {
		return "This record is being used. Cannot be removed.";
	}
	
		
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	
	sql="delete from mad_flow_state_action_permissions where flow_state_action_id in (select id from mad_flow_state_action where flow_state_id in (select id from mad_flow_state where flow_id=?))";
	execDBConf(conn, sql, bindlist);
	
	sql="delete from mad_flow_state_action_groups where flow_state_action_id in (select id from mad_flow_state_action where flow_state_id in (select id from mad_flow_state where flow_id=?))";
	execDBConf(conn, sql, bindlist);
	
	sql="delete from mad_flow_state_edit_permissions where flow_state_id in (select id from mad_flow_state where flow_id=?)";
	execDBConf(conn, sql, bindlist);
	
	sql="delete from mad_flow_state_action where flow_state_id in (select id from mad_flow_state where flow_id=?)";
	execDBConf(conn, sql, bindlist);
	
	
	
	sql="delete from mad_flow_state where flow_id=?";
	execDBConf(conn, sql, bindlist);
	
	sql="delete from  mad_flow where id=? ";
	
	createGenericHistory(conn, session, "DELETE", "mad_flow", id, "ALL"); 
	
	execDBConf(conn, sql, bindlist);
	
	return "";
}


//********************************************************************************
void deleteMadDeploymentSlot(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	sql="select 1 from mad_environment where deployment_slot_id=? "+
		" union all "+
		" select 1 from mad_request_type where deployment_slot_id=? "+
		" union all " +
		" select 1 from mad_request where deployment_slot_id=? limit 0,1";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	bindlist.add(new String[]{"INTEGER",id});
	bindlist.add(new String[]{"INTEGER",id});
	
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr!=null && arr.size()>0) {
		System.out.println("Deployment slot was used. Cannot be removed.");
		return;
	}
	
	if (arr.size()==0) {
		
		System.out.println("Removing deployment slot.");
		
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",id});
		
		sql="delete from  mad_deployment_slot_detail where slot_id=? ";
		execDBConf(conn, sql, bindlist);
		
		
		sql="delete from  mad_deployment_slot where id=? ";
		
		createGenericHistory(conn, session, "DELETE", "mad_deployment_slot", id, "ALL"); 
		
		execDBConf(conn, sql, bindlist);
	}
	
	
}




//********************************************************************************
String deleteMadDashSql(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	sql="select 1 from mad_dashboard_view where sql_id=? ";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr!=null && arr.size()>0) {
		return "Sql was used. Cannot be removed.";
	}
	
	
		
		
		
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	sql="delete from  mad_dashboard_sql where id=? ";
	
	createGenericHistory(conn, session, "DELETE", "mad_dashboard_sql", id, "ALL"); 
	
	execDBConf(conn, sql, bindlist);
	

	return "";
	
	
	
}

//********************************************************************************
String deleteMadDashParameter(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	sql="select 1 from mad_dashboard_view_parameter where parameter_id=? ";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr!=null && arr.size()>0) {
		return "Filter was used. Cannot be removed.";
	}
	
	
		
		
		
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	sql="delete from  mad_dashboard_parameter where id=? ";
	
	createGenericHistory(conn, session, "DELETE", "mad_dashboard_parameter", id, "ALL"); 
	
	execDBConf(conn, sql, bindlist);
	

	return "";
	
	
	
}


//********************************************************************************
String deleteMadDashView(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();

	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	sql="delete from  mad_dashboard_view where id=? ";
	
	createGenericHistory(conn, session, "DELETE", "mad_dashboard_view", id, "ALL"); 
	
	execDBConf(conn, sql, bindlist);
	

	return "";
	
	
	
}


//********************************************************************************
String deleteMadDashViewParameter(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();

	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	sql="delete from  mad_dashboard_view_parameter where id=? ";
	execDBConf(conn, sql, bindlist);
	

	return "";
	
	
	
}


//********************************************************************************
void deleteMadFlowState(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",id});
	
	sql="delete from  mad_flow_state_action where flow_state_id in (select id from mad_flow_state where id=?)  ";
	execDBConf(conn, sql, bindlist);
	
	sql="delete from  mad_flow_state where id=? ";
	
	createGenericHistory(conn, session, "DELETE", "mad_flow_state", id, "ALL"); 
	
	execDBConf(conn, sql, bindlist);
	
}

//********************************************************************************
void deleteMadFlowStateAction(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",id});
	
	
	sql="delete from  mad_flow_state_action where id=? ";
	
	createGenericHistory(conn, session, "DELETE", "mad_flow_state_action", id, "ALL"); 
	
	execDBConf(conn, sql, bindlist);
	

	
}


//********************************************************************************
void deleteMadFlowStateActionMethod(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",id});
	
	
	sql="delete from  mad_flow_state_action_methods where id=? ";
	
	
	createGenericHistory(conn, session, "DELETE", "mad_flow_state_action_methods", id, "ALL"); 
	
	execDBConf(conn, sql, bindlist);
	

	
}

//********************************************************************************
String deleteMadUser(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select 1 from mad_request where entuser=? " + 
			" union all "+
		"select 1 from tdm_user_role  where user_id=? "+
			" union all "+
		"select 1 from mad_group_members  where member_id=? and member_type='USER'"+
			"";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	bindlist.add(new String[]{"INTEGER",id});
	bindlist.add(new String[]{"INTEGER",id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) {
		return "This record is being used. Cannot be removed.";
	}

		
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	sql="delete from mad_group_members where member_id=? and member_type='USER' ";
	execDBConf(conn, sql, bindlist);
	
	sql="delete from tdm_user_role where user_id=?";
	execDBConf(conn, sql, bindlist);
	
	sql="delete from tdm_user where id=? ";
	
	createGenericHistory(conn, session, "DELETE", "tdm_user", id, "ALL"); 
	
	execDBConf(conn, sql, bindlist);
	
	return "";
	
}
//********************************************************************************
String deleteMadGroup(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select 1 from mad_group_members where member_type='GROUP' and member_id=? "+
		" union all"+
		" select 1 from mad_flow_state_action_groups where group_id=?";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	bindlist.add(new String[]{"INTEGER",id});
	
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==1) {
		return "This record is being used. Cannot be removed.";
	}
	
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	
	
	sql="delete from mad_group_permission where group_id=?";
	execDBConf(conn, sql, bindlist);
	
	sql="delete from mad_group where id=? ";
	
	createGenericHistory(conn, session, "DELETE", "mad_group", id, "ALL"); 
	
	execDBConf(conn, sql, bindlist);
	
	return "";

	
}

//********************************************************************************
String deleteMadEmailTemplate(
		Connection conn,
		HttpSession session,
		String id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select 1 from mad_flow where email_template_id=? "+
		" union all "+
		" select 1 from mad_flow_state_action where email_template_id=? ";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	bindlist.add(new String[]{"INTEGER",id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==1) {
		return "This record is being used. Cannot be removed.";
	}
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	sql="delete from mad_email_template where id=? ";
	
	createGenericHistory(conn, session, "DELETE", "mad_email_template", id, "ALL"); 
	
	execDBConf(conn, sql, bindlist);
	
	return "";
	

	
}
//********************************************************************************
int  addFlexField(
		Connection conn,
		HttpSession session,
		String parent_table,
		String parent_table_id,
		String flex_field_id
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String parent_field_name="application_id";
	if (parent_table.equals("mad_request_type_field")) parent_field_name="request_type_id";
	if (parent_table.equals("mad_platform_type_flex_fields")) parent_field_name="platform_type_id";
	
	sql="select 1 from "+parent_table+" where "+parent_field_name+"=? and flex_field_id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",parent_table_id});
	bindlist.add(new String[]{"INTEGER",flex_field_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==1) return -1;
	
	sql="select max(field_order)+1 from "+parent_table+" where "+parent_field_name+"=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",parent_table_id});
	arr=getDbArrayConf(conn, sql, 1, bindlist);
	String field_order="1";
	if (arr.size()==1) field_order=nvl(arr.get(0)[0],"1");
	
	
	sql="insert into "+parent_table+"  ("+parent_field_name+", flex_field_id, field_order )  values (?, ?, ? )";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",parent_table_id});
	bindlist.add(new String[]{"INTEGER",flex_field_id});
	bindlist.add(new String[]{"INTEGER",field_order});
	
	
	boolean is_success=execDBConf(conn, sql, bindlist);
	if(!is_success) return -2;
	
	//add new added field to each platforms, which are already exists
	if ( parent_table.equals("mad_platform_type_flex_fields")) {
		sql="select id from mad_platform where platform_type_id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",parent_table_id});
		ArrayList<String[]> platArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		
		
		for (int i=0;i<platArr.size();i++) {
			String platform_id=platArr.get(i)[0];
			
			sql="select 1 from mad_platform_fields where platform_id=? and flex_field_id=?";

			bindlist.clear();
			bindlist.add(new String[]{"INTEGER",platform_id});
			bindlist.add(new String[]{"INTEGER",flex_field_id});
			
			arr=getDbArrayConf(conn, sql, 1, bindlist);
			
			if (arr.size()==1) continue;
			
			sql="insert into mad_platform_fields (platform_id, flex_field_id) values (?, ?)";

			bindlist.clear();
			bindlist.add(new String[]{"INTEGER",platform_id});
			bindlist.add(new String[]{"INTEGER",flex_field_id});

			
			execDBConf(conn, sql, bindlist);
		}
	}
	
	return 0;
	
}


//********************************************************************************
void removeFlexField(
		Connection conn,
		HttpSession session,
		String parent_table,
		String id
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",id});
	
		//delete flexible field from all platforms which are in same type
		if ( parent_table.equals("mad_platform_type_flex_fields")) {
			
			sql="delete from mad_platform_fields " + 
				"	where  " + 
				"	(flex_field_id, platform_id) in ( " + 
				"	select ptf.flex_field_id, p.id  " + 
				"	from mad_platform_type_flex_fields ptf, mad_platform p " + 
				"	where ptf.platform_type_id=p.platform_type_id " + 
				"	and ptf.id=?)";
			
			
			
			execDBConf(conn, sql, bindlist);
		}
	
	sql="delete from  "+parent_table+" where id=? ";
	
	createGenericHistory(conn, session, "DELETE", parent_table, id, "ALL"); 
	
	execDBConf(conn, sql, bindlist);
	
	
	
	
}


//********************************************************************************
String makeFlexFieldEditor(
		Connection conn,
		HttpSession session,
		String flex_field_id
		) {
	
	String sql="";
	sql="select title, entry_type, entry_validation_regex,  " +
		" is_validated, validation_sql, validation_env_id, field_size, " + 
		" tab_request_type_id, tab_delete_allowed, " +
		" num_fixed_length, num_decimal_length, num_grouping_char, num_decimal_char, num_currency_symbol, num_min_val, num_max_val, " +
		" string_name, " + 
		" calc_data_type, calc_display_type, calc_display_format, calc_statement "+
		" from mad_flex_field where id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",flex_field_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String field_title=arr.get(0)[0];
	String entry_type=arr.get(0)[1];
	String entry_validation_regex=arr.get(0)[2];
	String is_validated=arr.get(0)[3];
	String validation_sql=arr.get(0)[4];
	String validation_env_id=arr.get(0)[5];
	String field_size=arr.get(0)[6];
	String tab_request_type_id=arr.get(0)[7];
	String tab_delete_allowed=arr.get(0)[8];
	
	String num_fixed_length=arr.get(0)[9];
	String num_decimal_length=arr.get(0)[10];
	String num_grouping_char=arr.get(0)[11];
	String num_decimal_char=arr.get(0)[12];
	String num_currency_symbol=arr.get(0)[13];
	String num_min_val=arr.get(0)[14];
	String num_max_val=arr.get(0)[15];

	String string_name=arr.get(0)[16];
	
	String calc_data_type=arr.get(0)[17];
	String calc_display_type=arr.get(0)[18];
	String calc_display_format=arr.get(0)[19];
	String calc_statement=arr.get(0)[20];

	
	
	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=request_type_editor_"+flex_field_id+">");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" align=right>");
	sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:deleteMadFlexField('"+flex_field_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-remove\">");
	sb.append(" Delete Flexible Field" );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Title : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("title", field_title, " onchange=\"saveMadFlexField(this, '"+flex_field_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sql="select distinct string_name from mad_string order by 1";
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">String : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeCombo(conn, sql, "", "id=string_name onchange=\"saveMadFlexField(this, '"+flex_field_id+"');\"", string_name, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	String lov_sql=decodeLovSql("flex_field_type");
	ArrayList<String[]> fieldTypArr=getDbArrayConf(conn, lov_sql, Integer.MAX_VALUE, null);
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Field Type : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeComboArr(fieldTypArr, "", "size=1 disabled id=entry_type onchange=\"saveMadFlexField(this, '"+flex_field_id+"');\" " , entry_type, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	if (entry_type.equals("LIST") || entry_type.equals("LOV") || entry_type.equals("PICKLIST")) {
		
		
		sql=	"select id, concat('{Database} ',name) from tdm_envs "+
				" UNION ALL "+
				"select -id, concat('{Javascript} ',method_name) from mad_method where method_type='JAVASCRIPT' order by 2";
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Data Source : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sb.append(makeCombo(conn, sql, "", "id=validation_env_id onchange=\"saveMadFlexField(this, '"+flex_field_id+"');\" " , validation_env_id, 0));
		sb.append("</div>");
		sb.append("</div>");
		
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">List Items/SQL : </label>");
		sb.append("<br>");
		sb.append("<b>Item1:Item Title 1</b><br>");
		sb.append("<b>Item2:Item Title 2</b><br>");
		sb.append("<b>Item3:Item Title 3</b>");
		
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sb.append(
				"<textarea id=validation_sql rows=4 style=\"width:100%;\" onchange=\"saveMadFlexField(this, '"+flex_field_id+"');\" >"+
					validation_sql+
				"</textarea>"
				);
		sb.append("</div>");
		sb.append("</div>");
	}
	
	
	if (entry_type.equals("TEXT")) {
		
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Regular Expression : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sb.append(makeText("entry_validation_regex", entry_validation_regex, "name=entry_validation_regex_"+flex_field_id+" onchange=\"saveMadFlexField(this, '"+flex_field_id+"');\"", 0));
		sb.append("</div>");
		sb.append("</div>");
		
		
		String regex_test_value=(String) session.getAttribute("entry_validation_regex_tester_"+flex_field_id);
		if (regex_test_value==null) regex_test_value="";
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Regex Tester : </label>");
		sb.append("</div>");
		
		sb.append("<div class=\"col-md-6\">");
		sb.append(makeText("entry_validation_regex_tester_"+flex_field_id, regex_test_value, " style=\"background-color:#FAFAFA;\" onchange=\"testFlexFieldRegex('"+flex_field_id+"');\"", 0));
		sb.append("</div>");
		
		sb.append("<div class=\"col-md-3\" align=left>");
		sb.append("<button type=button class=\"btn btn-md btn-warning\"  onclick=\"testFlexFieldRegex('"+flex_field_id+"');\">");
		sb.append("<span class=\"glyphicon glyphicon-fire\"> Test </span>");
		sb.append("</button>");
		sb.append("</div>");
		
		sb.append("</div>");
		
		
		ArrayList<String[]> yesnoArr=new ArrayList<String[]>();
		yesnoArr.add(new String[]{"YES","Yes"});
		yesnoArr.add(new String[]{"NO","No"});
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Validated by SQL : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sb.append(makeComboArr(yesnoArr, "", "size=1 id=is_validated onchange=\"saveMadFlexField(this, '"+flex_field_id+"');\" " , is_validated, 0));
		sb.append("</div>");
		sb.append("</div>");
		
		
		if (is_validated.equals("YES")) {
			sql="select id, name from tdm_envs order by 2";
					
					
			
			sb.append("<div class=row>");
			sb.append("<div class=\"col-md-3\" align=right>");
			sb.append("<label class=\"label label-info\">Database : </label>");
			sb.append("</div>");
			sb.append("<div class=\"col-md-9\">");
			sb.append(makeCombo(conn, sql, "", "size=1 id=validation_env_id onchange=\"saveMadFlexField(this, '"+flex_field_id+"');\" " , validation_env_id, 0));
			sb.append("</div>");
			sb.append("</div>");
			
			
			sb.append("<div class=row>");
			sb.append("<div class=\"col-md-3\" align=right>");
			sb.append("<label class=\"label label-info\">Validion SQL : </label>");
			sb.append("</div>");
			sb.append("<div class=\"col-md-9\">");
			sb.append(
					"<textarea id=validation_sql rows=3 style=\"width:100%;\" onchange=\"saveMadFlexField(this, '"+flex_field_id+"');\" >"+
						validation_sql+
					"</textarea>"
					);
			sb.append("</div>");
			sb.append("</div>");
		}
		
		
	}
	
if (entry_type.equals("TABLE")) {
		sql="select id, request_type from mad_request_type where request_group='REQUEST' and is_visible='NO' order by 2";	
				
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Based on request type : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sb.append(makeCombo(conn, sql, "", "id=tab_request_type_id onchange=\"saveMadFlexField(this, '"+flex_field_id+"');\" ", tab_request_type_id, 0));
		sb.append("</div>");
		sb.append("</div>");
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Delete alloved : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		ArrayList<String[]> yesNoArr=new ArrayList<String[]>();
		yesNoArr.add(new String[]{"YES","Yes"});
		yesNoArr.add(new String[]{"NO","No"});
		sb.append(makeComboArr(yesNoArr, "", "id=tab_delete_allowed onchange=\"saveMadFlexField(this, '"+flex_field_id+"');\" ", tab_delete_allowed, 0));
		sb.append("</div>");
		sb.append("</div>");
		
	}
	
	if (entry_type.equals("NUMBER")) {
		
		
		//String onchange_script="";
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Fixed Part Size : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sb.append(makeNumber(flex_field_id, "num_fixed_length_"+flex_field_id, num_fixed_length, "saveMadFlexFieldByFieldID('num_fixed_length', '"+flex_field_id+"')", "EDITABLE",
				"2", //num_fixed_length
				"0", //num_decimal_length
				"", //num_grouping_char
				"", //num_decimal_char
				"Digit", //num_currency_symbol
				"1", //num_min_val
				"24" //num_max_val
				));
		sb.append("</div>");
		sb.append("</div>");
		
		
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Decimal Part Size : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sb.append(makeNumber(flex_field_id, "num_decimal_length_"+flex_field_id, num_decimal_length, "saveMadFlexFieldByFieldID('num_decimal_length', '"+flex_field_id+"')", "EDITABLE",
				"2", //num_fixed_length
				"0", //num_decimal_length
				"", //num_grouping_char
				"", //num_decimal_char
				"Digit", //num_currency_symbol
				"0", //num_min_val
				"8" //num_max_val
				));
		sb.append("</div>");
		sb.append("</div>");
		
		

		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Fixed part Grouping symbol : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sb.append(makeText("num_grouping_char", num_grouping_char, "size=1 maxlength=1  onchange=\"saveMadFlexField(this, '"+flex_field_id+"');\" style=\"font-style: bold; font-size: 20px; \" ", 100));
		sb.append("</div>");
		sb.append("</div>");
		
		

		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Decmial part sepearation symbol : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sb.append(makeText("num_decimal_char", num_decimal_char, "size=1 maxlength=1 onchange=\"saveMadFlexField(this, '"+flex_field_id+"');\" style=\"font-style: bold; font-size: 20px; \" ", 100));
		sb.append("</div>");
		sb.append("</div>");
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\"> Amount or Currency symbol : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sb.append(makeText("num_currency_symbol", num_currency_symbol, "size=3 maxlength=10  onchange=\"saveMadFlexField(this, '"+flex_field_id+"');\" style=\"font-style: bold; font-size: 20px; \" ", 100));
		sb.append("</div>");
		sb.append("</div>");
		
		
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Minimum Value : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sb.append(makeNumber(flex_field_id, "num_min_val_"+flex_field_id, nvl(num_min_val,"0"), "saveMadFlexFieldByFieldID('num_min_val', '"+flex_field_id+"')", "EDITABLE",
				"24", //num_fixed_length
				"8", //num_decimal_length
				",", //num_grouping_char
				".", //num_decimal_char
				"", //num_currency_symbol
				"0", //num_min_val
				""+Integer.MAX_VALUE //num_max_val
				));
		sb.append("</div>");
		sb.append("</div>");
		
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Minimum Value : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sb.append(makeNumber(flex_field_id, "num_max_val_"+flex_field_id, nvl(num_max_val,""+Integer.MAX_VALUE), "saveMadFlexFieldByFieldID('num_max_val', '"+flex_field_id+"')", "EDITABLE",
				"24", //num_fixed_length
				"8", //num_decimal_length
				",", //num_grouping_char
				".", //num_decimal_char
				"", //num_currency_symbol
				"0", //num_min_val
				""+Integer.MAX_VALUE //num_max_val
				));
		sb.append("</div>");
		sb.append("</div>");
		
	
	}
	
	
	if (entry_type.equals("CALCULATED")) {
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Data Type : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		ArrayList<String[]> dataTypeArr=new ArrayList<String[]>();
		dataTypeArr.add(new String[]{"STRING","String"});
		dataTypeArr.add(new String[]{"NUMBER","Number"});
		dataTypeArr.add(new String[]{"YESNO","Yes/No (True/False)"});
		dataTypeArr.add(new String[]{"DATETIME","Date & Time"});
		sb.append(makeComboArr(dataTypeArr, "", "id=calc_data_type onchange=\"saveMadFlexField(this, '"+flex_field_id+"');\" ", calc_data_type, 0));
		sb.append("</div>");
		sb.append("</div>");
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Display Type : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		ArrayList<String[]> displayTypeArr=new ArrayList<String[]>();
		
		displayTypeArr.add(new String[]{"TEXT","Single Line Text Box"});
		displayTypeArr.add(new String[]{"LABEL","Label"});
		displayTypeArr.add(new String[]{"MEMO","Memo"});

		if (calc_data_type.equals("YESNO")) {
			displayTypeArr.add(new String[]{"CHECKBOX","Checkbox"});
			displayTypeArr.add(new String[]{"COMBOBOX","Yes/No Combobox"});
		}
		
		sb.append(makeComboArr(displayTypeArr, "", "id=calc_display_type onchange=\"saveMadFlexField(this, '"+flex_field_id+"');\" ", calc_display_type, 0));
		sb.append("</div>");
		sb.append("</div>");
		
		if (calc_data_type.equals("DATETIME") || calc_data_type.equals("NUMBER") ) {
			sb.append("<div class=row>");
			sb.append("<div class=\"col-md-3\" align=right>");
			sb.append("<label class=\"label label-info\"> Display Format for Date&Time: </label>");
			sb.append("<br>");
			sb.append("<a href=\"https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html\" target=_new>SimpleDateFormat</a>");
			sb.append("</div>");
			sb.append("<div class=\"col-md-9\">");
			sb.append(makeText("calc_display_format", calc_display_format, "size=3 maxlength=10  onchange=\"saveMadFlexField(this, '"+flex_field_id+"');\" style=\"font-style: bold; font-size: 20px; \" ", 0));
			sb.append("</div>");
			sb.append("</div>");
		}
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Calculation Statement: </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sb.append("<span class=badge onclick=showSampleAppScript()> Show Base Code Snippet </span>");
		sb.append("<br>");
		sb.append("<textarea id=calc_statement   rows=8 style=\"width:100%; background-color:#FAFAFA; font-family: monospace; \" onchange=\"saveMadFlexField(this, '"+flex_field_id+"');\" >"+calc_statement+"</textarea>");
		sb.append("<br>");
		sb.append("<span class=\"glyphicon glyphicon-question-sign\"></span>");
		sb.append("<a href=\"javascript:testJsCode('mad_flex_field','calc_statement','"+flex_field_id+"')\"> Test Js Code </a>");
		sb.append("</div>");
		sb.append("</div>");
		
		
	}
		
	sb.append("</div>");
	sb.append("</div>");
	
	



	
	
	return sb.toString();
}

//********************************************************************************
String makeRequestTypeEditor(
		Connection conn,
		HttpSession session,
		String request_type_id
		) {
	
	
	String sql="";
	sql="select request_type, request_group, permission, flow_id, is_visible, deployment_slot_id "+
		" from mad_request_type where id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_type_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String request_type=arr.get(0)[0];
	String request_group=arr.get(0)[1];
	String permission_id=arr.get(0)[2];
	String flow_id=arr.get(0)[3];
	String is_visible=arr.get(0)[4];
	String deployment_slot_id=arr.get(0)[5];

	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=request_type_editor_"+request_type_id+">");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" align=right>");
	
	sb.append("<button type=button class=\"btn btn-sm btn-primary\" onclick=\"javascript:duplicateMadRequestType('"+request_type_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-copy\">");
	sb.append(" Duplicate \"" + request_type +"\"" );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");

	
	sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:deleteMadRequestType('"+request_type_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-remove\">");
	sb.append(" Delete Request Type \"" + request_type +"\"" );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");
	
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Request Type Name : </label>");
	sb.append("</div>");
	
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("request_type", request_type, " onchange=\"saveMadRequestTypeField(this, '"+request_type_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	
	
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Request Group : </label>");
	sb.append("</div>");

	sql="select 'REQUEST','Request' from dual union all select 'PACKAGE','Package' from dual union all select 'DEPLOYMENT','Deployment' from dual";
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeCombo(conn, sql, "", "disabled size=1 id=request_group onchange=\"saveMadRequestTypeField(this, '"+request_type_id+"');\"", request_group, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Main Request : </label>");
	sb.append("</div>");
	ArrayList<String[]> yesnoArr=new ArrayList<String[]>();
	yesnoArr.add(new String[]{"YES","Yes "});
	yesnoArr.add(new String[]{"NO","No (Sub request)"});
	
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeComboArr(yesnoArr, "", "size=1 id=is_visible onchange=\"saveMadRequestTypeField(this, '"+request_type_id+"');\"", is_visible, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Permissions Needed : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select id, concat(permission_name,' [',permission_level,']') from mad_permission  order by 2";
	bindlist.clear();
	ArrayList<String[]> permsAllArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	sb.append(makeComboArr(permsAllArr, "", "id=permission onchange=\"saveMadRequestTypeField(this, '"+request_type_id+"');\"", permission_id, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	if (!request_group.equals("REQUEST")) {
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Available Applications : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sql="select id, application_name from mad_application order by 2";
		bindlist.clear();
		ArrayList<String[]> appsAllArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		sql="select application_id, application_name " 
			+"	from mad_request_type_application rta, mad_application a  " 
			+"	where  request_type_id=? " 
			+"	and rta.application_id=a.id  " 
			+"	order by 2";
		
	
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_type_id});
		ArrayList<String[]> appsAvalableArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		String event_listener="javascript:addRemoveRequestTypeApplication(\""+request_type_id+"\",\"#\");";
		sb.append(makePickList("0", "request_type_application_"+request_type_id, appsAllArr, appsAvalableArr, "", event_listener));
		sb.append("</div>");
		sb.append("</div>");
	}
	
	if (request_group.equals("DEPLOYMENT")) {
			
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Available Environments : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sql="select id, environment_name from mad_environment order by 2";
		bindlist.clear();
		ArrayList<String[]> envsAllArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		sql="select environment_id, environment_name " 
			+"	from mad_request_type_environment rte, mad_environment e  " 
			+"	where  request_type_id=? " 
			+"	and rte.environment_id=e.id  " 
			+"	order by 2";
		
		System.out.println(sql);
		
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_type_id});
		ArrayList<String[]> envsAvalableArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		String event_listener="javascript:addRemoveRequestTypeEnvironment(\""+request_type_id+"\",\"#\");";
		sb.append(makePickList("0", "request_type_environment_"+request_type_id, envsAllArr, envsAvalableArr, "", event_listener));
		sb.append("</div>");
		sb.append("</div>");
		
		
	} //if (request_group.equals("DEPLOYMENT"))
	
	
	


	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Flow : </label>");
	sb.append("</div>");
	sql="select id, flow_name from mad_flow order by 2";
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeCombo(conn, sql, "", "id=flow_id onchange=\"saveMadRequestTypeField(this, '"+request_type_id+"');\"", flow_id, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	if (request_group.equals("DEPLOYMENT")) {
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Deployment Plan Override : </label>");
		sb.append("</div>");
		sql="select id, slot_name from mad_deployment_slot where is_valid='YES' order by 2";
		sb.append("<div class=\"col-md-9\">");
		sb.append(makeCombo(conn, sql, "", "id=deployment_slot_id onchange=\"saveMadRequestTypeField(this, '"+request_type_id+"');\"", deployment_slot_id, 0));
		sb.append("</div>");
		sb.append("</div>");
	}
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Flow State Field Overridings : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append("<button type=button class=\"btn btn-sm btn-default\" onclick=\"javascript:makeMadFieldSettingForm('"+request_type_id+"');\">");
	sb.append(" ... ");
	sb.append("<span class=\"glyphicon glyphicon-pencil\">");
	sb.append("</span>");
	sb.append("</button>");
	sb.append("</div>");
	sb.append("</div>");
		
		
	
	
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=NOFADE_flex_fields_mad_request_type_field_"+request_type_id+">"); 
	sb.append(makeFlexFieldTableEditor(conn,session,"mad_request_type_field",request_type_id));
	sb.append("</div>");
	sb.append("</div>");
	

	
	
	
	
		
	sb.append("</div>");
	sb.append("</div>");
	
	
	return sb.toString();
}


//********************************************************************************
String makeMadPlatformTypeModifierGroupEditor(
		Connection conn,
		HttpSession session,
		String platform_type_id) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	StringBuilder sb=new StringBuilder();
	
	sql="select " + 
		"	ptmg.id, file_name, modifier_group_id, modifier_group_name, application_id, include_sub_folders " + 
		"	from  " + 
		"	mad_platform_type_modifier_group ptmg, mad_modifier_group mg " + 
		"	where modifier_group_id=mg.id " + 
		"	and platform_type_id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",platform_type_id});
	ArrayList<String[]> modiArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);

	sb.append("<div class=row>");
	
	sb.append("<div class=\"col-md-12\">");
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=addNewPlatformTypeModifierGroup('"+platform_type_id+"');>");
	sb.append("<span class=\"glyphicon glyphicon-plus\"> Add New Modifier Group</span>");
	sb.append("</button>");
	
	sb.append("</div>");
	
	sb.append("</div>");
	
	sb.append("<table class=\"table table-condensed table-striped\">");
	
	sb.append("<tr class=active>");
	sb.append("<td><span class=\"label label-warning\">Checker & Modifier Group</span></td>");
	sb.append("<td><span class=\"label label-warning\">File to Modify "+makeHintButton(conn, session, "SYS_PLATFORM_TYPE_MODIFIER_FILE")+"</span></td>");
	sb.append("<td><span class=\"label label-warning\">Inc. Sub Folders"+makeHintButton(conn, session, "SYS_PLATFORM_TYPE_MODIFIER_INCL_SUB_FOLDERS")+"</span></td>");
	sb.append("<td><span class=\"label label-warning\">Application"+makeHintButton(conn, session, "SYS_PLATFORM_TYPE_MODIFIER_APP")+"</span></td>");
	sb.append("<td><span class=\"label label-warning\"></span></td>");
	sb.append("</tr>");
	
	for (int i=0;i<modiArr.size();i++) {
		String id=modiArr.get(i)[0];
		String file_name=modiArr.get(i)[1];
		String modifier_group_id=modiArr.get(i)[2];
		String modifier_group_name=modiArr.get(i)[3];
		String application_id=modiArr.get(i)[4];
		String include_sub_folders=modiArr.get(i)[5];
		
		sb.append("<tr>");
		
		
		sb.append("<td>");
		sb.append("<span class=badge>"+modifier_group_name+"<span>");
		sb.append("</td>");
		
		sb.append("<td>");
		sb.append(makeText("file_name", file_name, " onchange=\"saveMadPlatformTypeModifierGroupField(this, '"+id+"');\" ", 0));
		sb.append("</td>");
		
		ArrayList<String[]> yesnoArr=new ArrayList<String[]>();
		yesnoArr.add(new String[]{"YES","Yes"});
		yesnoArr.add(new String[]{"NO","No"});

		sb.append("<td>");
		sb.append(makeComboArr(yesnoArr, "", "id=include_sub_folders size=1 onchange=\"saveMadPlatformTypeModifierGroupField(this, '"+id+"');\"", include_sub_folders, 0));
		sb.append("</td>");
		
		sql="select id, application_name from mad_application where platform_type_id=? and is_valid='YES'";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",platform_type_id});
		ArrayList<String[]> appList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);

		sb.append("<td>");
		sb.append(makeComboArr(appList, "", "id=application_id onchange=\"saveMadPlatformTypeModifierGroupField(this, '"+id+"');\"", application_id, 0));
		sb.append("</td>");
		
		sb.append("<td>");
		sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"deletePlatformTypeModifierGroup('"+platform_type_id+"','"+id+"');\" >");
		sb.append("<span class=\"glyphicon glyphicon-remove\"></span>");
		sb.append("</button>");
		sb.append("</td>");
		

		sb.append("</tr>");
	}
	
	sb.append("</table>");
	
	
	return sb.toString();
}
//********************************************************************************
String makePlatformTypeEditor(
		Connection conn,
		HttpSession session,
		String platform_type_id
		) {
	
	
	String sql="";
	sql="select platform_type_name, deployment_type from mad_platform_type where id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",platform_type_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String platform_type_name=arr.get(0)[0];
	String deployment_type=arr.get(0)[1];
	
	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=platform_type_editor_"+platform_type_id+">");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" align=right>");
	
	sb.append("<button type=button class=\"btn btn-sm btn-primary\" onclick=\"javascript:duplicateMadPlatformType('"+platform_type_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-copy\">");
	sb.append(" Duplicate \"" + platform_type_name +"\"" );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");

	sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:deleteMadPlatformType('"+platform_type_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-remove\">");
	sb.append(" Delete Platform Type \"" + platform_type_name +"\"" );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");
	
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Platform Type : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("platform_type_name", platform_type_name, " onchange=\"saveMadPlatformTypeField(this, '"+platform_type_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<span class=\"label label-info\">Deployment Type : "+makeHintButton(conn, session, "SYS_PLATFORM_TYPE_DEPL_TYPE")+"</span>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	ArrayList<String[]> arrDepType=new ArrayList<String[]>();
	arrDepType.add(new String[]{"SERIAL","Serial"});
	arrDepType.add(new String[]{"PARALLEL","Parallel"});
	sb.append(makeComboArr(arrDepType, "", "size=1 id=deployment_type onchange=\"saveMadPlatformTypeField(this, '"+platform_type_id+"');\"", deployment_type, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<hr>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<span class=\"label label-info\">Modifiers "+makeHintButton(conn, session, "SYS_PLATFORM_TYPE_MODIFIERS")+": </span>");
	sb.append("</div>");
	
	sb.append("<div class=\"col-md-9\" id=modifier_group_Div_for_"+platform_type_id+">");
	
	sb.append(makeMadPlatformTypeModifierGroupEditor(conn, session, platform_type_id));
	
	sb.append("</div>");
	sb.append("</div>");
	
	
	

	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=NOFADE_flex_fields_mad_platform_type_flex_fields_"+platform_type_id+">"); 
	sb.append(makeFlexFieldTableEditor(conn,session,"mad_platform_type_flex_fields",platform_type_id));
	sb.append("</div>");
	sb.append("</div>");
	

	
	
	
	
		
	sb.append("</div>");
	sb.append("</div>");
	
	
	return sb.toString();
}


//*************************************************************************
String  makePlatformParameterList(Connection conn, HttpSession session, String platform_type_id, String platform_id) {
	
	StringBuilder sb=new StringBuilder();
	

	
	String sql="select flex_field_id, is_mandatory, is_editable, default_value,field_parameter_name "+
		" from mad_platform_type_flex_fields "+
		" where platform_type_id=? order by field_order";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",platform_type_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	ArrayList<String[]> fexValsArr=new ArrayList<String[]>();
	
	if (!platform_id.equals("0")) {
		sql="select  flex_field_id, field_value from mad_platform_fields where platform_id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",platform_id});
		fexValsArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	}
	
	
	sb.append("<table class=\"table table-condensed table-striped\">");
	
	for (int i=0;i<arr.size();i++) {
		
		String flex_field_id=arr.get(i)[0];
		String is_mandatory=arr.get(i)[1];
		String is_editable=arr.get(i)[2];

		String default_value=arr.get(i)[3];
		String field_parameter_name=arr.get(i)[4];
		
		sb.append("<tr>");
		sb.append("<td>");
		
		String fire_event="javascript:updateMadPlatformParameter("+platform_id+","+flex_field_id+",#) ";
		sb.append(makeFlexField(conn, session, "platform_parameter_"+platform_id, i, platform_id, flex_field_id, field_parameter_name, fexValsArr, is_mandatory,"YES","YES","",fire_event));
		
		sb.append("</td>");
		
		sb.append("</tr>");
		
	}
	
	sb.append("</table>");
	
	return sb.toString();
}
//********************************************************************************
String makePlatformEditor(
		Connection conn,
		HttpSession session,
		String platform_id
		) {
	
	
	String sql="";
	sql="select platform_name, platform_type_id,on_error_action, edit_permission_id from mad_platform where id=?";


	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",platform_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String platform_name=arr.get(0)[0];
	String platform_type_id=arr.get(0)[1];
	String on_error_action=arr.get(0)[2];
	String edit_permission_id=arr.get(0)[3];
	
	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=platform_editor_"+platform_id+">");
	
	if (checkrole(session, "MADRM") || checkrole(session, "ADMIN")) {
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-12\" align=right>");

		sb.append("<button type=button class=\"btn btn-sm btn-primary\" onclick=\"javascript:duplicateMadPlatform('"+platform_id+"');\">");
		sb.append("<span class=\"glyphicon glyphicon-copy\">");
		sb.append(" Duplicate \"" + platform_name +"\"" );
		sb.append("</span>");
		sb.append("</button>");
		sb.append(" ");
		
		sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:deleteMadPlatform('"+platform_id+"');\">");
		sb.append("<span class=\"glyphicon glyphicon-remove\">");
		sb.append(" Delete Platform \"" + platform_name +"\"" );
		sb.append("</span>");
		sb.append("</button>");
		sb.append(" ");
		
		sb.append("</div>");
		sb.append("</div>");
	}
		
	
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Platform Name : </label>");
	sb.append("</div>");
	
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("platform_name", platform_name, " onchange=\"saveMadPlatformField(this, '"+platform_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Platform Type : </label>");
	sb.append("</div>");

	sql="select id, platform_type_name from mad_platform_type order by 2";
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeCombo(conn, sql, "", "disabled size=1 id=platform_type_id", platform_type_id, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	if (checkrole(session, "MADRM") || checkrole(session, "ADMIN")) {
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Edit Permission : </label>");
		sb.append("</div>");

		sql="select id, permission_name from mad_permission where permission_level='USER' order by 2";
		sb.append("<div class=\"col-md-9\">");
		sb.append(makeCombo(conn, sql, "", " id=edit_permission_id onchange=\"saveMadPlatformField(this, '"+platform_id+"');\" ", edit_permission_id, 0));
		sb.append("</div>");
		sb.append("</div>");
		
		System.out.println("edit_permission_id="+edit_permission_id);
	}
	
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Action on Error : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	ArrayList<String[]> arrErrAct=new ArrayList<String[]>();
	arrErrAct.add(new String[]{"CONTINUE","> Continue next step"});
	arrErrAct.add(new String[]{"STOP","! Stop"});
	arrErrAct.add(new String[]{"ROLLBACK","< Rollback"});
	
	sb.append(makeComboArr(arrErrAct, "", " id=on_error_action size=1 onchange=\"saveMadPlatformField(this, '"+platform_id+"');\"", on_error_action, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Platform Parameters : </label>");
	sb.append("</div>");

	sb.append("<div class=\"col-md-9\">");
	sb.append(makePlatformParameterList(conn,session,platform_type_id,platform_id));
	sb.append("</div>");
	sb.append("</div>");

	
	sb.append("</div>");
	sb.append("</div>");
	
	
	return sb.toString();
}

//********************************************************************************
String makeRepositoryEditor(
		Connection conn,
		HttpSession session,
		String repository_id
		) {
	
	
	String sql="";


	sql="select repository_name, class_name, " +
			"	par_hostname , par_port, par_username, par_password,  " +
			"	par_flex_1, par_flex_2, par_flex_3 " +
			"	from mad_repository where id=?";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",repository_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String repository_name=arr.get(0)[0];
	String class_name=arr.get(0)[1];
	String par_hostname=arr.get(0)[2];
	String par_port=arr.get(0)[3];
	String par_username=arr.get(0)[4];
	String par_password=arr.get(0)[5];
	String par_flex_1=arr.get(0)[6];
	String par_flex_2=arr.get(0)[7];
	String par_flex_3=arr.get(0)[8];
	
	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=platform_editor_"+repository_id+">");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" align=right>");
	sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:deleteMadRepository('"+repository_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-remove\">");
	sb.append(" Delete Repository \"" + repository_name +"\"" );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");
	sb.append("</div>");
	sb.append("</div>");
	

	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Repository Name : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("repository_name", repository_name, " onchange=\"saveMadRepositoryField(this, '"+repository_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Repository Class : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	
	sql="select class_name, class_desc from mad_class where class_type='REPO'";
	sb.append(makeCombo(conn, sql, "", "id=class_name onchange=\"saveMadRepositoryField(this, '"+repository_id+"');\"", class_name, 0));
	
	//sb.append(makeText("class_name", class_name, " onchange=\"saveMadRepositoryField(this, '"+repository_id+"');\"", 0));
	
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Hostname : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("par_hostname", par_hostname, " onchange=\"saveMadRepositoryField(this, '"+repository_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Port : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("par_port", par_port, " onchange=\"saveMadRepositoryField(this, '"+repository_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");

	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Username : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("par_username", par_username, " onchange=\"saveMadRepositoryField(this, '"+repository_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");

	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Password : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makePassword("par_password", par_password, " onchange=\"saveMadRepositoryField(this, '"+repository_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");

	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Additional Field 1 : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("par_flex_1", par_flex_1, " onchange=\"saveMadRepositoryField(this, '"+repository_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Additional Field 2 : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("par_flex_2", par_flex_2, " onchange=\"saveMadRepositoryField(this, '"+repository_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Additional Field 3 : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("par_flex_3", par_flex_3, " onchange=\"saveMadRepositoryField(this, '"+repository_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	

	sb.append("</div>");
	sb.append("</div>");
	
	
	return sb.toString();
}


//********************************************************************************
String makeStringEditor(
		Connection conn,
		HttpSession session,
		String string_id
		) {
	
	
	String sql="";


	sql="select lang, string_name, " +
			"	short_desc , long_desc  " +
			"	from mad_string where id=?";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",string_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String lang=arr.get(0)[0];
	String string_name=arr.get(0)[1];
	String short_desc=arr.get(0)[2];
	String long_desc=arr.get(0)[3];
	

	
	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=string_editor_"+string_id+">");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" align=right>");
	sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:deleteMadString('"+string_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-remove\">");
	sb.append(" Delete String \"" + string_name +"\"" );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");
	sb.append("</div>");
	sb.append("</div>");
	

	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">String Name : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("string_name", string_name, " onchange=\"saveMadStringField(this, '"+string_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Language (Empty : Default) : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select lang, lang_desc from mad_lang";
	sb.append(makeCombo(conn, sql, "", "disabled id=lang onchange=\"saveMadStringField(this, '"+string_id+"');\"", lang, 0));	
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Short Content (Title) : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("short_desc", short_desc, " onchange=\"saveMadStringField(this, '"+string_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Long Content : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append("<textarea rows=10 style=\"width:100%;\" id=long_desc onchange=\"saveMadStringField(this, '"+string_id+"');\" >");
	sb.append(clearHtml(long_desc));
	sb.append("</textarea>");
	sb.append("<span class=\"badge\" onclick=\"viewHtmlContent('"+string_id+"');\">View Html Content</span>");
	sb.append("</div>");
	sb.append("</div>");


	

	sb.append("</div>");
	sb.append("</div>");
	
	
	return sb.toString();
}


//********************************************************************************
String makeLangEditor(
		Connection conn,
		HttpSession session,
		String lang_id
		) {
	
	
	String sql="";


	sql="select lang, lang_desc from mad_lang where id=?";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",lang_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String lang=arr.get(0)[0];
	String lang_desc=arr.get(0)[1];
	
	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=lang_editor_"+lang_id+">");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" align=right>");
	sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:deleteMadLang('"+lang_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-remove\">");
	sb.append(" Delete Language \"" + lang_desc +"\"" );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");
	sb.append("</div>");
	sb.append("</div>");
	

	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Language Code : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("lang", lang, " onchange=\"saveMadLangField(this, '"+lang_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Language Description : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("lang_desc", lang_desc, " onchange=\"saveMadLangField(this, '"+lang_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");

	sb.append("</div>");
	sb.append("</div>");
	
	
	return sb.toString();
}


//********************************************************************************
String makeClassEditor(
		Connection conn,
		HttpSession session,
		String class_id
		) {
	
	
	String sql="";


	sql="select class_name, class_desc, class_type  from mad_class where id=?";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",class_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String class_name=arr.get(0)[0];
	String class_desc=arr.get(0)[1];
	String class_type=arr.get(0)[2];
	
	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=class_editor_"+class_id+">");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" align=right>");
	sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:deleteMadClass('"+class_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-remove\">");
	sb.append(" Delete Driver \"" + class_name +"\"" );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");
	sb.append("</div>");
	sb.append("</div>");
	

	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Class Name : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("class_name", class_name, " onchange=\"saveMadClassField(this, '"+class_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Description : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append("<textarea cols=4 style=\"width:100%; \" id=class_desc onchange=\"saveMadClassField(this, '"+class_id+"');\">"+clearHtml(class_desc)+"</textarea>");
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<span class=\"label label-info\">Class Type : </span>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select 'REPO', 'Repository' from dual "+
		" union all "+
		"select 'BUILD', 'Build Driver' from dual "+
		" union all "+
		"select 'DEPLOY', 'Deployment Driver' from dual "+
		" union all "+
		" select 'CHECK', 'Custom Check Driver' from dual";
	sb.append(makeCombo(conn, sql, "", "disabled size=1 id=class_type onchange=\"saveMadClassField(this, '"+class_id+"');\"", class_type, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("</div>");
	sb.append("</div>");
	
	
	return sb.toString();
}

//********************************************************************************
String makeDriverEditor(
		Connection conn,
		HttpSession session,
		String driver_id
		) {
	
	
	String sql="";


	sql="select driver_name, class_name, driver_type, success_keyword  from mad_driver where id=?";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",driver_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String driver_name=arr.get(0)[0];
	String class_name=arr.get(0)[1];
	String driver_type=arr.get(0)[2];
	String success_keyword=arr.get(0)[3];
	
	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=driver_editor_"+driver_id+">");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" align=right>");
	sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:deleteMadDriver('"+driver_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-remove\">");
	sb.append(" Delete Driver \"" + driver_name +"\"" );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");
	sb.append("</div>");
	sb.append("</div>");
	

	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Driver Name : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("driver_name", driver_name, " onchange=\"saveMadDriverField(this, '"+driver_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Driver Type : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select 'BUILD','Builder' from dual union all select 'DEPLOY','Deployer' from dual";
	sb.append(makeCombo(conn, sql, "", "id=driver_type size=1 onchange=\"saveMadDriverField(this, '"+driver_id+"');\" ", driver_type, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<span class=\"label label-info\">Driver Class : </span>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select class_name, class_desc from mad_class where class_type='"+driver_type+"'";
	sb.append(makeCombo(conn, sql, "", "id=class_name onchange=\"saveMadDriverField(this, '"+driver_id+"');\"", class_name, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<span class=\"label label-info\">Success Test Keyword : "+makeHintButton(conn, session, "SYS_DRIVER_SUCCESS_KEYWORD")+" </span>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("success_keyword", success_keyword, " onchange=\"saveMadDriverField(this, '"+driver_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	

	sb.append("</div>");
	sb.append("</div>");
	
	
	return sb.toString();
}

//********************************************************************************
String makeMadModifierGroupEditor(
		Connection conn,
		HttpSession session,
		String modifier_group_id
		) {
	
	
	String sql="";
	sql="select modifier_group_name  from mad_modifier_group where id=?";


	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",modifier_group_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String modifier_group_name=arr.get(0)[0];
	
	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=platform_editor_"+modifier_group_id+">");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" align=right>");
	
	sb.append("<button type=button class=\"btn btn-sm btn-primary\" onclick=\"javascript:duplicateMadModifierGroup('"+modifier_group_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-copy\">");
	sb.append(" Duplicate \"" + modifier_group_name +"\"" );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");
	
	sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:deleteMadModifierGroup('"+modifier_group_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-remove\">");
	sb.append(" Delete Checker & Modifer Group \"" + modifier_group_name +"\"" );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");
	
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Group Name : </label>");
	sb.append("</div>");
	
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("modifier_group_name", modifier_group_name, " onchange=\"saveMadModifierGroupField(this, '"+modifier_group_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Rules : </label>");
	sb.append("</div>");
	
	sb.append("<div class=\"col-md-9\" id=modifier_rule_for_"+modifier_group_id+" >");
	sb.append(makeModifierRuleList(conn,session, modifier_group_id));
	sb.append("</div>");
	sb.append("</div>");
	
	


	
	sb.append("</div>");
	sb.append("</div>");
	
	
	return sb.toString();
}


//********************************************************************************
String makeMadSetPassword(
		Connection conn,
		HttpSession session,
		String user_id) {
	
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();

		
	StringBuilder sb=new StringBuilder();


	sb.append("<input type=hidden id=password_user_id value="+user_id+">");
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-5\" align=right>");
	sb.append("<label class=\"label label-info\">Enter new  password : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-7\">");
	sb.append(makePassword("password_field_1", "", "", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-5\" align=right>");
	sb.append("<label class=\"label label-info\">Enter new password again : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-7\">");
	sb.append(makePassword("password_field_2", "", "", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	return sb.toString();
}


//********************************************************************************
void setMadUserPassword(
		Connection conn,
		HttpSession session,
		String user_id, 
		String new_password) {
	
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="update tdm_user set  password=?   where id=?";
	bindlist.add(new String[]{"STRING",encrypt(new_password)});
	bindlist.add(new String[]{"INTEGER",""+user_id});
	
	execDBConf(conn, sql, bindlist);
}
//********************************************************************************
String makeMadModifierRuleEditor(
		Connection conn,
		HttpSession session,
		String modifie_rule_id) {
	String sql= "select " + 
				"	id, " + 
				"   modifier_group_id, "+
				"	modifier_name, " + 
				"	modifier_order, " + 
				"	rule_locator_type, " + 
				"	rule_locator_statement, " + 
				"	rule_locator_options, " + 
				"	rule_changer_action, " + 
				"	rule_changer_statement, " + 
				"	rule_changer_options, " + 
				"	when_value_to_check, "+	
				"	when_operand, "+
				"	when_values"+
				" from mad_modifier_rule " + 
				" where id=? ";
	StringBuilder sb=new StringBuilder();
	StringBuilder sbContent=new StringBuilder();
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",modifie_rule_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	
	
		String modifier_rule_id=arr.get(0)[0];
		String modifier_group_id=arr.get(0)[1];
		String modifier_name=arr.get(0)[2];
		String modifier_order=arr.get(0)[3];
		String rule_locator_type=arr.get(0)[4];
		String rule_locator_statement=arr.get(0)[5];
		String rule_locator_options=arr.get(0)[6];
		String rule_changer_action=arr.get(0)[7];
		String rule_changer_statement=arr.get(0)[8];
		String rule_changer_options=arr.get(0)[9];
		String when_value_to_check=arr.get(0)[10];
		String when_operand=arr.get(0)[11];
		String when_values=arr.get(0)[12];
		
		
		
		sb.append("<div class=row>");
		
		sb.append("<div class=\"col-md-6\" align=left>");
		sb.append("<span class=\"badge\" onclick=\"javascript:reorderMadModifierRule('"+modifier_group_id+"','"+modifier_rule_id+"','UP');\">");
		sb.append("	<span class=\"glyphicon glyphicon-arrow-up\"></span>");
		sb.append("</span>");
		
		sb.append(" ");

		sb.append("<span class=\"badge\" onclick=\"javascript:reorderMadModifierRule('"+modifier_group_id+"','"+modifier_rule_id+"','DOWN');\">");
		sb.append("	<span class=\"glyphicon glyphicon-arrow-down\"></span>");
		sb.append("</span>");
		sb.append("</div>");
		
		
		
		sb.append("<div class=\"col-md-6\" align=right>");
		
		sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:deleteMadModifierRule('"+modifier_group_id+"','"+modifier_rule_id+"');\">");
		sb.append("<span class=\"glyphicon glyphicon-remove\">");
		sb.append(" Delete Rule \"" + modifier_name +"\"" );
		sb.append("</span>");
		sb.append("</button>");

		
		sb.append("</div>");

		sb.append("</div>");
		

		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-12\">");
		sb.append(makeText("modifier_name", modifier_name, " onchange=\"saveMadModifierRuleField(this, '"+modifier_rule_id+"');\"", 0));
		sb.append("</div>");
		sb.append("</div>");
		
		ArrayList<String[]> locatorTypeArr=new ArrayList<String[]>();
		locatorTypeArr.add(new String[]{"EMPTY","When  Empty"});
		locatorTypeArr.add(new String[]{"CONTAINS","When  Contains"});
		locatorTypeArr.add(new String[]{"EQUALS","When  Equals"});
		locatorTypeArr.add(new String[]{"STARTS_WITH","When Starts With"});
		locatorTypeArr.add(new String[]{"ENDS_WITH","When  Ends With"});
		locatorTypeArr.add(new String[]{"REGEX","When Matches Regular Expression"});
		locatorTypeArr.add(new String[]{"XPATH","When Matches XPATH Expression"});
		locatorTypeArr.add(new String[]{"CUSTOM","Check with custom class"});
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<b><font color=blue>Locator Type </font></b>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sb.append(makeComboArr(locatorTypeArr, "", " id=rule_locator_type onchange=\"saveMadModifierRuleField(this, '"+modifier_rule_id+"');\"", rule_locator_type, 0));
		sb.append("</div>");
		sb.append("</div>");		
		
		if (!rule_locator_type.equals("EMPTY")) {
			sb.append("<div class=row>");
			sb.append("<div class=\"col-md-3\" align=right>");
			
			if (rule_locator_type.equals("CUSTOM"))
				sb.append("<b>Class </b>");
			else
				sb.append("<b>Parameter </b>");
			sb.append("</div>");
			sb.append("<div class=\"col-md-9\">");
			if (rule_locator_type.equals("CUSTOM")) {
				sql="select class_name, class_name from mad_class where class_type='CHECK' order by 2";
				sb.append(makeCombo(conn, sql,  "", "id=rule_locator_statement onchange=\"saveMadModifierRuleField(this, '"+modifier_rule_id+"');\"", rule_locator_statement, 0));
			}
			else 
				sb.append(makeText("rule_locator_statement", rule_locator_statement, " onchange=\"saveMadModifierRuleField(this, '"+modifier_rule_id+"');\"", 0));
			sb.append("</div>");
			sb.append("</div>");		
		}
		
	
		if (rule_locator_type.equals("CUSTOM")) {
			sb.append("<div class=row>");
			sb.append("<div class=\"col-md-3\" align=right>");
			sb.append("<b>Locator Options </b>");
			sb.append("</div>");
			sb.append("<div class=\"col-md-9\">");
			sb.append(makeText("rule_locator_options", rule_locator_options, " onchange=\"saveMadModifierRuleField(this, '"+modifier_rule_id+"');\"", 0));
			sb.append("</div>");
			sb.append("</div>");
		}
				

		
		ArrayList<String[]> changeActionArr=new ArrayList<String[]>();
		changeActionArr.add(new String[]{"STOP","! Stop With Error"});
		
		changeActionArr.add(new String[]{"UPDATE","Update"});
		
		if (rule_locator_type.equals("XPATH")) {
			changeActionArr.add(new String[]{"ADD_ATTRIBUTE","Add New Attribute"});
			changeActionArr.add(new String[]{"DELETE_ATTRIBUTE","Delete Attribute"});
		}
		else {
			changeActionArr.add(new String[]{"UPDATE","Update"});
			changeActionArr.add(new String[]{"DELETE","Delete Line"});
			changeActionArr.add(new String[]{"INSERT_BEFORE","Insert Line (Before)"});
			changeActionArr.add(new String[]{"INSERT_AFTER","Insert Line (After)"});
		}
		
		
		changeActionArr.add(new String[]{"SET_START","Add as Prefix"});
		changeActionArr.add(new String[]{"SET_END","Add as Suffix (Append)"});
		changeActionArr.add(new String[]{"REPLACE","Java Replace"});
		changeActionArr.add(new String[]{"REPLACE_ALL","Java ReplaceAll"});
		changeActionArr.add(new String[]{"REPLACE_FIRST","Java ReplaceFirst"});
		changeActionArr.add(new String[]{"JAVASCRIPT","JavaScript Engine"});

		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<b><font color=blue>When Located </font></b>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sb.append(makeComboArr(changeActionArr, "", " id=rule_changer_action onchange=\"saveMadModifierRuleField(this, '"+modifier_rule_id+"');\"", rule_changer_action, 0));
		sb.append("</div>");
		sb.append("</div>");		
		
		if (!rule_changer_action.equals("DELETE")) {
			
			sb.append("<div class=row>");
			sb.append("<div class=\"col-md-3\" align=right>");
			sb.append("<b>Parameter </b>");
			sb.append("</div>");
			sb.append("<div class=\"col-md-9\">");
			
			
			
			if (rule_changer_action.equals("JAVASCRIPT")) {
				sb.append("<div class=\"row\">");
				sb.append("<div class=\"col-md-12\">");
				sb.append("<span class=badge onclick=showSampleAppScript()> Show Base Code Snippet </span>");
				sb.append("<br>");
				sb.append("<textarea id=rule_changer_statement   rows=8 style=\"width:100%; background-color:#FAFAFA; font-family: monospace; \" onchange=\"saveMadModifierRuleField(this, '"+modifier_rule_id+"');\">"+rule_changer_statement+"</textarea>");
				sb.append("<br>");
				sb.append("<span class=\"glyphicon glyphicon-question-sign\"></span>");
				sb.append("<a href=\"javascript:testJsCode('mad_modifier_rule','rule_changer_statement','"+modifie_rule_id+"')\"> Test Js Code </a>");

				
				sb.append("</div>");
				sb.append("</div>");
				
				
			} else 
				sb.append(makeText("rule_changer_statement", rule_changer_statement, " onchange=\"saveMadModifierRuleField(this, '"+modifier_rule_id+"');\"", 0));	
			
		
			sb.append("</div>");
			sb.append("</div>");
			
		}
			

		
		ArrayList<String> optionsChangerArr=new ArrayList<String>();
		optionsChangerArr.add("ADD_ATTRIBUTE");
		optionsChangerArr.add("REPLACE");
		optionsChangerArr.add("REPLACE_ALL");
		optionsChangerArr.add("REPLACE_FIRST");
		
		if (optionsChangerArr.indexOf(rule_changer_action)>-1) {
			sb.append("<div class=row>");
			sb.append("<div class=\"col-md-3\" align=right>");
			sb.append("<b>Change Options </b>");
			sb.append("</div>");
			sb.append("<div class=\"col-md-9\">");
			sb.append(makeText("rule_changer_options", rule_changer_options, " onchange=\"saveMadModifierRuleField(this, '"+modifier_rule_id+"');\"", 0));
			sb.append("</div>");
			sb.append("</div>");	
		}
			

		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<b><font color=blue>Only When </font></b>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		ArrayList<String[]> operArr=new ArrayList<String[]>();
		operArr.add(new String[]{"","Always"});
		operArr.add(new String[]{"=","Equals (=)"});
		operArr.add(new String[]{"!=","Not Equals (!=)"});
		operArr.add(new String[]{">","Greater Than (>)"});
		operArr.add(new String[]{"<","Less Than (<)"});
		operArr.add(new String[]{"isnull","Is Null"});
		operArr.add(new String[]{"notnull","Is Not Null"});
		operArr.add(new String[]{"like","Contains"});
		operArr.add(new String[]{"!like","Not Contains"});
		operArr.add(new String[]{"in","In"});
		operArr.add(new String[]{"!in","Not In"});
		operArr.add(new String[]{"regex","Matches Regex"});
		operArr.add(new String[]{"!regex","Not Matches Regex"});
		
		sb.append(makeText("when_value_to_check", when_value_to_check, " onchange=\"saveMadModifierRuleField(this, '"+modifier_rule_id+"');\"", 0));
		sb.append(makeComboArr(operArr, "", " id=when_operand size=1 onchange=\"saveMadModifierRuleField(this, '"+modifier_rule_id+"');\"", when_operand, 200));
		sb.append(makeText("when_values", when_values, " onchange=\"saveMadModifierRuleField(this, '"+modifier_rule_id+"');\"", 0));
		
		sb.append("</div>");
		sb.append("</div>");
		
		return sb.toString();
}
//********************************************************************************
String makeModifierRuleList(
		Connection conn,
		HttpSession session,
		String modifie_group_id) {
	String sql= "select  id,  modifier_name " + 
				" from mad_modifier_rule " + 
				" where modifier_group_id=? " + 
				" order by modifier_order";
	StringBuilder sb=new StringBuilder();
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",modifie_group_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();
	
	
	StringBuilder sbContent=new StringBuilder();
	
	for (int i=0;i<arr.size();i++) {
		String modifier_rule_id=arr.get(i)[0];
		String modifier_name=arr.get(i)[1];
		
		sbContent.setLength(0);
		sbContent.append(makeMadModifierRuleEditor(conn, session, modifier_rule_id));
		
		
		 
		collapseItems.add(new String[]{
				"colModifierRuleContent_"+modifier_rule_id,
				modifier_name, 
				sbContent.toString(),
				"rule.png",  
				"makeMadModifierRuleEditor('"+modifier_rule_id+"')" 
				});
		

		
	}
	
	sb.append(makeModifierRuleHeader(modifie_group_id));
	sb.append(addCollapse("listModifierRule",collapseItems));
	
	return sb.toString();
}

//********************************************************************************
String makeFlexFieldTableEditor(
		Connection conn,
		HttpSession session,
		String parent_table,
		String parent_table_id
		) {
	String sql= "";
	
	String parent_field_name="application_id";
	if (parent_table.equals("mad_request_type_field")) parent_field_name="request_type_id";
	if (parent_table.equals("mad_platform_type_flex_fields")) parent_field_name="platform_type_id";
	
	sql=		"select " + 
				"	pff.id id, f.entry_type flex_field_type,  " + 
				"	title, field_parameter_name, flex_field_id, default_value,  " + 
				"	is_mandatory, is_editable, is_visible,  " + 
				"	entry_type, validation_sql, validation_env_id, " + 
				"	num_fixed_length, num_decimal_length, num_grouping_char, " + 
				"	num_decimal_char, num_currency_symbol, num_min_val, num_max_val " + 
				"	from "+parent_table+" pff, mad_flex_field f " + 
				"	where pff.flex_field_id=f.id " + 
				"	and "+parent_field_name+"=? "+
				"   order by field_order"; 
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",parent_table_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	

	
	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	
	
	ArrayList<String[]> yesno=new ArrayList<String[]>();
	yesno.add(new String[]{"YES","Yes"});
	yesno.add(new String[]{"NO","No"});
	
	
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addMadFlexField('"+parent_table+"','"+parent_table_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-plus\">");
	sb.append(" Add New Flex Field");
	sb.append("</span>");
	sb.append("</button>");
	
	sb.append("<table class=\"table table-striped table-condensed\">");
	sb.append("<tr class=active>");
	sb.append("<td><span class=\"label label-info\">Flexible Field</span></td>");
	sb.append("<td><span class=\"label label-info\">Parameter Name</span></td>");
	sb.append("<td><span class=\"label label-info\">Default Value</span></td>");
	if (parent_table.equals("mad_platform_type_flex_fields")) 
		sb.append("<td><span class=\"label label-info\"></span></td>");
	
	sb.append("<td><span class=\"label label-info\">Mandatory</span></td>");
	sb.append("<td><span class=\"label label-info\">Editable</span></td>");
	sb.append("<td><span class=\"label label-info\">Visible</span></td>");
	sb.append("<td></td>");
	sb.append("</tr>");
	
	
	for (int i=0;i<arr.size();i++) {
		String id=arr.get(i)[0];
		String flex_field_type=arr.get(i)[1];
		String title=arr.get(i)[2];
		String field_parameter_name=arr.get(i)[3];
		String flex_field_id=arr.get(i)[4];
		String default_value=arr.get(i)[5];
		String is_mandatory=arr.get(i)[6];
		String is_editable=arr.get(i)[7];
		String is_visible=arr.get(i)[8];
		String entry_type=arr.get(i)[9];
		String combo_sql_lov_items=arr.get(i)[10];
		String combo_env_id=arr.get(i)[11];
		
		String num_fixed_length=arr.get(i)[12];
		String num_decimal_length=arr.get(i)[13];
		String num_grouping_char=arr.get(i)[14];
		String num_decimal_char=arr.get(i)[15];
		String num_currency_symbol=arr.get(i)[16];
		String num_min_val=arr.get(i)[17];
		String num_max_val=arr.get(i)[18];
		
		
		sb.append("<tr>");
		
		sb.append("<td nowrap>");
		
		sb.append("<span class=badge onclick=\"javascript:reorderMadFlexField('"+parent_table+"','"+parent_field_name+"','"+parent_table_id+"','"+id+"','UP');\">");
		sb.append("<span class=\"glyphicon glyphicon-arrow-up\"></span>");
		sb.append("</span>");
		
		sb.append(" ");
		
		sb.append("<span class=badge onclick=\"javascript:reorderMadFlexField('"+parent_table+"','"+parent_field_name+"','"+parent_table_id+"','"+id+"','DOWN');\">");
		sb.append("<span class=\"glyphicon glyphicon-arrow-down\"></span>");
		sb.append("</span>");
		
		sb.append(" ");

		
		sb.append("<b>"+title+"</b>");
		sb.append(" <small><small>["+flex_field_type+"]</small></small>");
		sb.append("</td>");
		
		
		sb.append("<td>");
		sb.append(makeText("field_parameter_name", field_parameter_name, " onchange=\"javascript:saveMadFlexFieldTable(this,'"+parent_table+"','"+parent_table_id+"','"+id+"');\" ", 180));
		sb.append("</td>");
		
		sb.append("<td>");
		
		if (entry_type.equals("LIST") || entry_type.equals("LOV")) {
						
			sb.append(makeList(conn, session,"default_value", combo_sql_lov_items, default_value, "onchange=\"javascript:saveMadFlexFieldTable(this,'"+parent_table+"','"+parent_table_id+"','"+id+"');\"", 180, combo_env_id,"EDITABLE", false));
		}
		else if (entry_type.equals("CHECKBOX")) {
			ArrayList<String[]> yesnoArr=new ArrayList<String[]>();
			yesnoArr.add(new String[]{"YES","Yes"});
			yesnoArr.add(new String[]{"NO","No"});
			
			sb.append(makeComboArr(yesnoArr, "", "id=default_value onchange=\"javascript:saveMadFlexFieldTable(this,'"+parent_table+"','"+parent_table_id+"','"+id+"');\"", default_value, 180));

		}
		else if (entry_type.equals("ACCORDION")) {
			ArrayList<String[]> yesnoArr=new ArrayList<String[]>();
			yesnoArr.add(new String[]{"EXPANDED","Expanded"});
			yesnoArr.add(new String[]{"COLLAPSED","Collapsed"});
			
			sb.append(makeComboArr(yesnoArr, "", "id=default_value onchange=\"javascript:saveMadFlexFieldTable(this,'"+parent_table+"','"+parent_table_id+"','"+id+"');\"", default_value, 180));

		}
		else if (entry_type.equals("MEMO")) {
			sb.append("<textarea id=default_value cols=40 rows=3 onchange=\"javascript:saveMadFlexFieldTable(this,'"+parent_table+"','"+parent_table_id+"','"+id+"');\">"+default_value+"</textarea>");
			//sb.append(makeComboArr(yesnoArr, "", "id=default_value onchange=\"javascript:saveMadFlexFieldTable(this,'"+parent_table+"','"+parent_table_id+"','"+id+"');\"", default_value, 180));

		}
		else if (entry_type.equals("NUMBER")) {
			String number_field_id="default_value_"+parent_table_id;
			String onchange_script="saveMadFlexFieldTableById('default_value','"+number_field_id+"','"+parent_table+"','"+parent_table_id+"','"+id+"')";
			
			sb.append(
						makeNumber(
						parent_table_id, 
						number_field_id, 
						default_value, 
						onchange_script, 
						"EDITABLE", 
						num_fixed_length, 
						num_decimal_length, 
						num_grouping_char, 
						num_decimal_char, 
						num_currency_symbol, 
						num_min_val, 
						num_max_val)
					);
		}
		else if (entry_type.equals("ATTACHMENT") || entry_type.equals("TABLE") || entry_type.equals("PICKLIST")) 
			sb.append("N/A ("+entry_type+")");
		else	
			sb.append(makeText("default_value", default_value, " onchange=\"javascript:saveMadFlexFieldTable(this,'"+parent_table+"','"+parent_table_id+"','"+id+"');\" ", 180));
		sb.append("</td>");
		
		if (parent_table.equals("mad_platform_type_flex_fields")) {
			sb.append("<td>");
			sb.append("<span class=\"badge\" onclick=openMultipleFlexFieldEditor('"+flex_field_id+"','"+parent_table_id+"');>");
			sb.append("<span class=\"glyphicon glyphicon-list-alt\"></span>");
			sb.append("</span>");
			sb.append("</td>");
		}
		
		
		sb.append("<td>");
		sb.append(makeComboArr(yesno, "", "size=1 id=is_mandatory  onchange=\"javascript:saveMadFlexFieldTable(this,'"+parent_table+"','"+parent_table_id+"','"+id+"');\" ", is_mandatory, 75));
		sb.append("</td>");
		
		sb.append("<td>");
		sb.append(makeComboArr(yesno, "", "size=1 id=is_editable  onchange=\"javascript:saveMadFlexFieldTable(this,'"+parent_table+"','"+parent_table_id+"','"+id+"');\" ", is_editable, 75));
		sb.append("</td>");
		
		sb.append("<td>");
		sb.append(makeComboArr(yesno, "", "size=1 id=is_visible  onchange=\"javascript:saveMadFlexFieldTable(this,'"+parent_table+"','"+parent_table_id+"','"+id+"');\" ", is_visible, 75));
		sb.append("</td>");
		
		
		sb.append("<td nowrap>");
		
		sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:removeMadFlexFieldTable('"+parent_table+"','"+parent_table_id+"','"+id+"');\">");
		sb.append("<span class=\"glyphicon glyphicon-remove\">");
		sb.append("</span>");
		
		
		
		sb.append("</button>");
		sb.append("</td>");
		
		

		
		sb.append("</tr>");
		
		
	}
	sb.append("</table>");
	
	sb.append("</div>");
	sb.append("</div>");
	
	
	return sb.toString();
	
}

//********************************************************************************
String makeApplicationEditor(
		Connection conn,
		HttpSession session,
		String application_id
		) {
	
	
	String sql="";
	sql="select application_name, repository_id, platform_type_id, "+
		" app_repo_root, app_repo_filter, app_repo_policy, app_repo_tag_path, app_repo_tag_filter, " +
		" build_driver_id, deploy_driver_id, permission, conflict_level, "+
		" app_repo_script, version_calculation_script, item_view_script, " +
		" export_type, item_repo_selection_type, prevent_older_version, "+
		" pre_deploy_method_id, post_deploy_method_id " + 
		" from mad_application where id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",application_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String application_name=arr.get(0)[0];
	String repository_id=arr.get(0)[1];
	String platform_type_id=arr.get(0)[2];
	String app_repo_root=arr.get(0)[3];
	String app_repo_filter=arr.get(0)[4];
	String app_repo_policy=arr.get(0)[5];
	String app_repo_tag_path=arr.get(0)[6];
	String app_repo_tag_filter=arr.get(0)[7];
	String build_driver_id=arr.get(0)[8];
	String deploy_driver_id=arr.get(0)[9];
	String permission_id=arr.get(0)[10];
	String conflict_level=arr.get(0)[11];
	String app_repo_script=arr.get(0)[12];
	String version_calculation_script=arr.get(0)[13];
	String item_view_script=arr.get(0)[14];
	String export_type=arr.get(0)[15];
	String item_repo_selection_type=arr.get(0)[16];
	String prevent_older_version=arr.get(0)[17];
	String pre_deploy_method_id=arr.get(0)[18];
	String post_deploy_method_id=arr.get(0)[19];
	
	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=application_editor_"+application_id+">");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" align=right>");
	
	sb.append("<button type=button class=\"btn btn-sm btn-primary\" onclick=\"javascript:duplicateMadApplication('"+application_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-copy\">");
	sb.append(" Duplicate \"" + application_name +"\"" );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");
	
	sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:deleteMadApplication('"+application_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-remove\">");
	sb.append(" Delete Application \"" + application_name +"\"" );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");
	
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Application Name : </label>");
	sb.append("</div>");
	
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("application_name", application_name, " onchange=\"saveMadApplicationField(this, '"+application_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Platform Type (Container) : </label>");
	sb.append("</div>");

	sql="select id, platform_type_name from mad_platform_type";
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeCombo(conn, sql, "", "id=platform_type_id  onchange=\"saveMadApplicationField(this, '"+application_id+"');\"", platform_type_id, 0));
	sb.append("</div>");
	sb.append("</div>");

	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Repository : </label>");
	sb.append("</div>");

	sql="select id, repository_name from mad_repository";
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeCombo(conn, sql, "", "id=repository_id onchange=\"saveMadApplicationField(this, '"+application_id+"');\"", repository_id, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Export Type : </label>");
	sb.append("</div>");
	
	sql="select 'FILE' from dual union all select 'FOLDER' from dual";
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeCombo(conn, sql, "", "id=export_type size=1 onchange=\"saveMadApplicationField(this, '"+application_id+"');\"", export_type, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Selection Type : </label>");
	sb.append("</div>");
	
	sql="select 'FILE','Only Files' from dual union all select 'DIR','Only Folders' from dual union all select 'ALL','Both Files/Folders' from dual";
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeCombo(conn, sql, "", "id=item_repo_selection_type size=1 onchange=\"saveMadApplicationField(this, '"+application_id+"');\"", item_repo_selection_type, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Build Driver : </label>");
	sb.append("</div>");
	sql="select id, driver_name from mad_driver where driver_type='BUILD'";
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeCombo(conn, sql, "", "id=build_driver_id onchange=\"saveMadApplicationField(this, '"+application_id+"');\"", build_driver_id, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Deploy Driver : </label>");
	sb.append("</div>");
	sql="select id, driver_name from mad_driver where driver_type='DEPLOY'";
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeCombo(conn, sql, "", "id=deploy_driver_id onchange=\"saveMadApplicationField(this, '"+application_id+"');\"", deploy_driver_id, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Pre-Deployment Method : </label>");
	sb.append("</div>");
	sql="select id, method_name from mad_method where is_valid='YES'";
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeCombo(conn, sql, "", "id=pre_deploy_method_id onchange=\"saveMadApplicationField(this, '"+application_id+"');\"", pre_deploy_method_id, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Post-Deployment Method : </label>");
	sb.append("</div>");
	sql="select id, method_name from mad_method where is_valid='YES'";
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeCombo(conn, sql, "", "id=post_deploy_method_id onchange=\"saveMadApplicationField(this, '"+application_id+"');\"", post_deploy_method_id, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Conflict Level : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	ArrayList<String[]> arrConflictLevel=new ArrayList<String[]>();
	arrConflictLevel.add(new String[]{"0","No Conflict Check"});
	arrConflictLevel.add(new String[]{"1","Based on target environment + deployment time"});
	arrConflictLevel.add(new String[]{"2","Based on target environment"});
	sb.append(makeComboArr(arrConflictLevel, "", "size=1 id=conflict_level onchange=\"saveMadApplicationField(this, '"+application_id+"');\" ", conflict_level, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Prevent Older Versions : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	ArrayList<String[]> arrPrevOldVers=new ArrayList<String[]>();
	arrPrevOldVers.add(new String[]{"NO","NO : Older versions can be deployed"});
	arrPrevOldVers.add(new String[]{"YES","YES : Prevent older versions deployment"});
	sb.append(makeComboArr(arrPrevOldVers, "", "size=1 id=prevent_older_version onchange=\"saveMadApplicationField(this, '"+application_id+"');\" ", prevent_older_version, 0));
	sb.append("</div>");
	sb.append("</div>");
	

	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Application Repository Root : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("app_repo_root", app_repo_root, "onchange=\"saveMadApplicationField(this, '"+application_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Application Repository Parameters : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeAppRepoConfigEditor(conn,application_id,"app_repo_filter",app_repo_filter));
	sb.append("</div>");
	sb.append("</div>");

	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Tagging Policy : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	ArrayList<String[]> arrTagPolicies=new ArrayList<String[]>();
	arrTagPolicies.add(new String[]{"APP_REPO_ROOT","Application Repo Root"});
	arrTagPolicies.add(new String[]{"PACKAGE_MEMBER","Package Member"});
	arrTagPolicies.add(new String[]{"NO_TAG","No Tag Needed"});
	sb.append(makeComboArr(arrTagPolicies, "", "size=1 id=app_repo_policy onchange=\"saveMadApplicationField(this, '"+application_id+"');\" ", app_repo_policy, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Application Tag Root : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("app_repo_tag_path", app_repo_tag_path, " onchange=\"saveMadApplicationField(this, '"+application_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Tag Parameters : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeAppRepoConfigEditor(conn,application_id,"app_repo_tag_filter",app_repo_tag_filter));
	sb.append("</div>");
	sb.append("</div>");
	
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Permission Needed : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select id, concat(permission_level,'.',permission_name) from mad_permission  order by 2";
	bindlist.clear();
	ArrayList<String[]> permsAllArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	sb.append(makeComboArr(permsAllArr, "", "id=permission onchange=\"saveMadApplicationField(this, '"+application_id+"');\"", permission_id, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Depended Applications : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select id, application_name from mad_application a "+
		" where id!=? "+
		" and not exists (select 1 from mad_application_dependency where application_id=a.id and depended_application_id=?) " + 
		" order by 2";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",application_id});
	bindlist.add(new String[]{"INTEGER",application_id});
	ArrayList<String[]> source_arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	sql="select depended_application_id, application_name " +
		"	from mad_application_dependency ad, mad_application a " +
		"	where ad.depended_application_id=a.id and application_id=? "+
		"   order by 2 ";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",application_id});
	ArrayList<String[]> picked_arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	String event_listener="javascript:addRemoveDependedApplication(\""+application_id+"\",\"#\");";
	sb.append(makePickList("0", "depended_applications_"+application_id, source_arr, picked_arr, "", event_listener));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Path Conversion Script : </label>");

	sb.append("</div>");
	sb.append("<div class=\"col-md-6\">");
	sb.append("<span class=badge onclick=showSampleAppScript()> Show Base Code Snippet </span>");
	sb.append("<br>");
	sb.append("<textarea id=app_repo_script name=app_repo_script_for_app_"+application_id+" rows=5 style=\"width:100%;\" onchange=\"saveMadApplicationField(this, '"+application_id+"');\">"+app_repo_script+"</textarea>");
	sb.append("<br>");
	sb.append("<span class=\"glyphicon glyphicon-question-sign\"></span>");
	sb.append("<a href=\"javascript:testJsCode('mad_application','app_repo_script','"+application_id+"')\"> Test Js Code </a>");
	sb.append("</div>");
	
	sb.append("<div class=\"col-md-3\" align=center>");
	
	sb.append("Enter Request Id To Test");
	sb.append("<br>");
	sb.append("<input type=text size=10 id=app_repo_script_test_for_app"+application_id+" style=\"background-color:yellow;\">");
	sb.append("<br>");
	sb.append("<input type=button value=Test onclick=testAppRepoScript("+application_id+")>");
	
	sb.append("</div>");
	
	sb.append("</div>");
	
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Version Calculation Script : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append("<span class=badge onclick=showSampleAppScript()> Show Base Code Snippet </span>");
	sb.append("<br>");
	sb.append("<textarea id=version_calculation_script name=version_calculation_script_for_app_"+application_id+" rows=5 style=\"width:100%;\" onchange=\"saveMadApplicationField(this, '"+application_id+"');\">"+version_calculation_script+"</textarea>");
	sb.append("<br>");
	sb.append("<span class=\"glyphicon glyphicon-question-sign\"></span>");
	sb.append("<a href=\"javascript:testJsCode('mad_application','version_calculation_script','"+application_id+"')\"> Test Js Code </a>");
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Member Item View Script : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append("<span class=badge onclick=showSampleAppScript()> Show Base Code Snippet </span>");
	sb.append("<br>");
	sb.append("<textarea id=item_view_script name=item_view_script_for_app_"+application_id+" rows=5 style=\"width:100%;\" onchange=\"saveMadApplicationField(this, '"+application_id+"');\">"+item_view_script+"</textarea>");
	sb.append("<br>");
	sb.append("<span class=\"glyphicon glyphicon-question-sign\"></span>");
	sb.append("<a href=\"javascript:testJsCode('mad_application','item_view_script','"+application_id+"')\"> Test Js Code </a>");
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=NOFADE_flex_fields_mad_application_flex_fields_"+application_id+">");
	sb.append(makeFlexFieldTableEditor(conn,session,"mad_application_flex_fields",application_id));
	sb.append("</div>");
	sb.append("</div>");
	

	
	
	
	
		
	sb.append("</div>");
	sb.append("</div>");
	
	
	return sb.toString();
}



//********************************************************************************

String makeAppRepoConfigEditor(
		Connection conn,
		String application_id,
		String config_name,
		String curr_val
		) {
	StringBuilder sb=new StringBuilder();
	
	
	
	String TYPE_FILTER="";
	String MAXLEVEL="";
	String NAME_FILTER="";
	
	String[] lines=curr_val.split("\n|\r");
	for (int i=0;i<lines.length;i++) {
		String a_line=lines[i];
		String par="";
		String val="";
		if (a_line.contains("=")) {
			par=a_line.split("=")[0];
			val=a_line.substring(a_line.indexOf("=")+1);
		}

		if (par.equals("TYPE_FILTER")) TYPE_FILTER=val;
		if (par.equals("MAXLEVEL")) MAXLEVEL=val;
		if (par.equals("NAME_FILTER")) NAME_FILTER=val;
	}


	
	String onchange_event="onchange=\"onRepoConfigChange('"+application_id+"','"+config_name+"');\" ";
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-4\" align=right> <b> Retrieve Type : </b> </div>");
	sb.append("<div class=\"col-md-8\">");
	ArrayList<String[]> arrTypeF=new ArrayList<String[]>();
	arrTypeF.add(new String[]{"","All"});
	arrTypeF.add(new String[]{"ALL","Files+Folders"});
	arrTypeF.add(new String[]{"FILE","Only Files"});
	arrTypeF.add(new String[]{"DIR","Only Folders"});
	sb.append(makeComboArr(arrTypeF, "", onchange_event+" size=1 id=TYPE_FILTER_of_"+config_name+"_for_app_"+application_id, TYPE_FILTER, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-4\" align=right> <b> Retrievel Level (Empty for All) : </b> </div>");
	sb.append("<div class=\"col-md-8\">");
	ArrayList<String[]> arrLevel=new ArrayList<String[]>();
	for (int i=1;i<=100;i++) 
		arrLevel.add(new String[]{""+i,"Level "+i});
	sb.append(makeComboArr(arrLevel, "", onchange_event+" id=MAXLEVEL_of_"+config_name+"_for_app_"+application_id, MAXLEVEL, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-4\" align=right> <b> Name Filter (Regular Expression) : </b> </div>");
	sb.append("<div class=\"col-md-8\">");
	sb.append(makeText("NAME_FILTER_of_"+config_name+"_for_app_"+application_id, NAME_FILTER, onchange_event, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	return sb.toString();
}
//********************************************************************************
String makePermissionEditor(
		Connection conn,
		HttpSession session,
		String permission_id
		) {
	
	
	String sql="";
	sql="select permission_name, permission_level, permission_description "+
		" from mad_permission where id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",permission_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String permission_name=arr.get(0)[0];
	String permission_level=arr.get(0)[1];
	String permission_description=arr.get(0)[2];
	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=permission_editor_"+permission_id+">");
	
	String disabled="";
	if (permission_level.equals("SYSTEM")) disabled="disabled";
	
	if (!permission_level.equals("SYSTEM")) {
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-12\" align=right>");
		sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:deleteMadPermission('"+permission_id+"');\">");
		sb.append("<span class=\"glyphicon glyphicon-remove\">");
		sb.append(" Delete Permission \"" + permission_name +"\"" );
		sb.append("</span>");
		sb.append("</button>");
		sb.append(" ");
		sb.append("</div>");
		sb.append("</div>");
	}
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Permission Name : </label>");
	sb.append("</div>");
	
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("permission_name", permission_name, disabled+ " onchange=\"saveMadPermissionField(this, '"+permission_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Permission Level : </label>");
	sb.append("</div>");

	sql="select 'SYSTEM', 'System Permission' from dual union all select 'USER', 'User Permission' from dual";
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeCombo(conn, sql, "", "disabled size=1 id=permission_level  onchange=\"saveMadPermissionField(this, '"+permission_id+"');\"", permission_level, 0));
	sb.append("</div>");
	sb.append("</div>");

	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Permission Description : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append("<textarea rows=2 style=\"width:100%\" id=permission_description onchange=\"saveMadPermissionField(this, '"+permission_id+"');\" >"+permission_description+"</textarea>");
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>"); 
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Groups Granted : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select id, group_name from mad_group where group_type='USER'  order by 2";
	bindlist.clear();
	ArrayList<String[]> groupsAllArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	sql="select group_id, group_name " 
		+"	from mad_group_permission m, mad_group g  " 
		+"	where  permission_id=? " 
		+"	and  group_id=g.id  " 
		+"	order by 2";


	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",permission_id});
	ArrayList<String[]> grantedGroupsArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	String event_listener="javascript:addRemovePermissionGroup(\""+permission_id+"\",\"#\");";
	sb.append(makePickList("0","granted_groups_"+permission_id, groupsAllArr, grantedGroupsArr, "", event_listener));
	sb.append("</div>");
	sb.append("</div>");

	
	
	
		
	sb.append("</div>");
	sb.append("</div>");
	
	
	return sb.toString();
}



//********************************************************************************
String makeMethodEditor(
		Connection conn,
		HttpSession session,
		String method_id
		) {
	
	
	String sql="";
	sql="select method_name, method_description, method_type, is_valid, "+
		" reflection_classname, reflection_methodname, source_code, parameter_count, " +
		" database_id, start_directory, success_keyword " +
		" from mad_method where id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",method_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String method_name=arr.get(0)[0];
	String method_description=arr.get(0)[1];
	String method_type=arr.get(0)[2];
	String is_valid=arr.get(0)[3];
	String reflection_classname=arr.get(0)[4];
	String reflection_methodname=arr.get(0)[5];
	String source_code=arr.get(0)[6];
	String parameter_count=arr.get(0)[7];
	String database_id=arr.get(0)[8];
	String start_directory=arr.get(0)[9];
	String success_keyword=arr.get(0)[10];
	
	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=method_editor_"+method_id+">");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" align=right>");

	sb.append("<button type=button class=\"btn btn-sm btn-warning\" onclick=\"javascript:testMadMethod('"+method_id+"','0');\">");
	sb.append("<span class=\"glyphicon glyphicon-play\">");
	sb.append(" Test Method" );
	sb.append("</span>");
	sb.append("</button> ");

	sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:deleteMadMethod('"+method_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-remove\">");
	sb.append(" Delete Method \"" + method_name +"\"" );
	sb.append("</span>");
	sb.append("</button>");
	
	sb.append(" ");
	sb.append("</div>");
	sb.append("</div>");

	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Method Name : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("method_name", method_name, " onchange=\"saveMadMethodField(this, '"+method_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	

	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Method Type : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select 'JAVASCRIPT', 'JavaScript' from dual "+
		" union all "+
		"select 'DATABASE','Database JDBC Call' from dual"+
		" union all "+
		"select 'SHELL','Shell Command' from dual "+
		" union all "+
		"select 'JAVA','Java by Reflection' from dual";
	sb.append(makeCombo(conn, sql, "", "disabled id=method_type", method_type,0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Active : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select 'YES', 'Yes' from dual  union all select 'NO','No' from dual";
	sb.append(makeCombo(conn, sql, "", "size=1 id=is_valid   onchange=\"saveMadMethodField(this, '"+method_id+"');\" ", is_valid,0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Description : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append("<textarea rows=2 style=\"width:100%\" id=method_description onchange=\"saveMadMethodField(this, '"+method_id+"');\" >"+method_description+"</textarea>");
	sb.append("</div>");
	sb.append("</div>");
	
	if (method_type.equals("JAVA")) {
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Java Class : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sb.append(makeText("reflection_classname", reflection_classname, " onchange=\"saveMadMethodField(this, '"+method_id+"');\"", 0));
		sb.append("</div>");
		sb.append("</div>");
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Java Method : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sb.append(makeText("reflection_methodname", reflection_methodname, " onchange=\"saveMadMethodField(this, '"+method_id+"');\"", 0));
		sb.append("</div>");
		sb.append("</div>");
		
	} else {
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Source Code : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sb.append("<textarea rows=8 style=\"width:100%;  font-family: monospace; \" id=source_code onchange=\"saveMadMethodField(this, '"+method_id+"');\" >"+source_code+"</textarea>");
		sb.append("</div>");
		sb.append("</div>");
	}
	
	
	if (method_type.equals("DATABASE")) {
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Execute on Database : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sql="select id, name from tdm_envs order by 2";
		sb.append(makeCombo(conn, sql, "", "id=database_id   onchange=\"saveMadMethodField(this, '"+method_id+"');\" ", database_id,0));
		sb.append("</div>");
		sb.append("</div>");
	}
	
	
	if (method_type.equals("SHELL")) {
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Starting Directory : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sb.append(makeText("start_directory", start_directory, " onchange=\"saveMadMethodField(this, '"+method_id+"');\"", 0));
		sb.append("</div>");
		sb.append("</div>");
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Expected Keyword (Regex ok) : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sb.append(makeText("success_keyword", success_keyword, " onchange=\"saveMadMethodField(this, '"+method_id+"');\"", 0));
		sb.append("</div>");
		sb.append("</div>");
		
	}
	
	
	ArrayList<String[]> paramCountArr=new ArrayList<String[]>();
	for (int p=0;p<=10;p++) paramCountArr.add(new String[]{""+p});
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Parameter count : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeComboArr(paramCountArr, "", "size=1 id=parameter_count  onchange=\"saveMadMethodField(this, '"+method_id+"');\" ", parameter_count, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	
	sb.append("<div class=row>");

	sb.append("<div class=\"col-md-12\" id=parameterListForMethod_"+method_id+">");
	sb.append(makeMethodParameterEditor(conn,session,method_id));
	sb.append("</div>");
	sb.append("</div>");
	
		
	sb.append("</div>");
	sb.append("</div>");
	
	
	return sb.toString();
}


//********************************************************************************
String makeMethodParameterEditor(
		Connection conn,
		HttpSession session,
		String method_id
		) {
	
	String sql="select parameter_count, method_type from mad_method where id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",method_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String parameter_count=arr.get(0)[0];
	String method_type=arr.get(0)[1];

	StringBuilder sb=new StringBuilder();
	
	int param_count=0;
	
	try {param_count=Integer.parseInt(parameter_count);} catch(Exception e) {e.printStackTrace();}
	
	if (param_count==0) {
		sb.append("No parameter defined.");
		return sb.toString();
	}
	
	sb.append("<table class=\"table table-condensed table-bordered table-striped\">");
	
	sb.append("<tr class=info>");
	sb.append("<td><b>Parameter Name</b></td>");
	sb.append("<td><b>Default Value</b></td>");
	sb.append("<td><b>Binding Type</b></td>");
	sb.append("</tr>");
	
	ArrayList<String[]> paramTypeArr=new ArrayList<String[]>();
	
	if (method_type.equals("JAVA")) {
		paramTypeArr.add(new String[]{"String"});
		paramTypeArr.add(new String[]{"Integer"});
	} else if (method_type.equals("DATABASE")) { 
		paramTypeArr.add(new String[]{"String"});
		paramTypeArr.add(new String[]{"Integer"});
	} else {
		paramTypeArr.add(new String[]{"Not Applicable"});
	}
	
	for (int i=1;i<=param_count;i++) {
		sql="select param_name_"+i+", param_type_"+i+", param_default_val_"+i + " from mad_method where id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",method_id});
		arr=getDbArrayConf(conn, sql, 1, bindlist);
		
		String param_name=arr.get(0)[0];
		String param_type=arr.get(0)[1];
		String param_val=arr.get(0)[2];
		
		sb.append("<tr>");
		
		sb.append("<td>");
		sb.append(makeText("param_name_"+i, param_name, " onchange=\"saveMadMethodField(this, '"+method_id+"');\"", 0));
		sb.append("</td>");
		
		
		sb.append("<td>");
		sb.append(makeText("param_default_val_"+i, param_val, " onchange=\"saveMadMethodField(this, '"+method_id+"');\"", 0));
		sb.append("</td>");
		
		sb.append("<td>");
		sb.append(makeComboArr(paramTypeArr, "", "id=param_type_"+i+"  onchange=\"saveMadMethodField(this, '"+method_id+"');\" ", param_type, 0));
		sb.append("</td>");
		
		sb.append("</tr>");
		
	}
	
	sb.append("</table>");
	
	return sb.toString();
}




//********************************************************************************
String makeFlowEditor(
		Connection conn,
		HttpSession session,
		String flow_id
		) {
	
	
	String sql="";
	sql="select flow_name, flow_description, email_template_id "+
		" from mad_flow where id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",flow_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String flow_name=arr.get(0)[0];
	String flow_description=arr.get(0)[1];
	String email_template_id=arr.get(0)[2];

	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=flow_editor_"+flow_id+">");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" align=right>");
	
	sb.append("<button type=button class=\"btn btn-sm btn-primary\" onclick=\"javascript:duplicateMadFlow('"+flow_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-copy\">");
	sb.append(" Duplicate \"" + flow_name +"\"" );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");

			
	sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:deleteMadFlow('"+flow_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-remove\">");
	sb.append(" Delete Flow \"" + flow_name +"\"" );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");
	
	sb.append("</div>");
	sb.append("</div>");

	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Flow Name : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("flow_name", flow_name, " onchange=\"saveMadFlowField(this, '"+flow_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	

	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Default Email Template : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select id, template_name from mad_email_template order by 2";
	sb.append(makeCombo(conn, sql, "", "id=email_template_id onchange=\"saveMadFlowField(this, '"+flow_id+"');\"", email_template_id,0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Flow Description : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append("<textarea rows=2 style=\"width:100%\" id=flow_description onchange=\"saveMadFlowField(this, '"+flow_id+"');\" >"+flow_description+"</textarea>");
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Show Hide Flow Chart : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append("<button type=\"button\" class=\"btn btn-sm btn-default\" onclick=\"javascript:makeMadFlowDrawing('"+flow_id+"');\"> ... <span class=\"glyphicon glyphicon-random\"></span></button>");
	
	sb.append("</div>");
	sb.append("</div>");

	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=\"flowDrawInnerBody_Flow"+flow_id+"\" style=\"background-color:#666666; overflow-x: scroll; overflow-y: scroll; \">");
	sb.append("");
	sb.append("</div>");
	sb.append("</div>");
	
	
	
	sb.append("<hr>");


	
	sb.append("<div class=row>");
	
	sb.append("<div class=\"col-md-2\" id=flow_state_list_div_"+flow_id+" >");
	sb.append(makeMadFlowStateList(conn,session,flow_id));
	sb.append("</div>");
	
	sb.append("<div class=\"col-md-10\" id=flow_state_editor_div_"+flow_id+">");
	sb.append("");
	sb.append("</div>");
	
	



	sb.append("</div>");
	
		
	sb.append("</div>");
	sb.append("</div>");
	
	
	return sb.toString();
}




//********************************************************************************
String makeDeploymentSlotEditor(
		Connection conn,
		HttpSession session,
		String slot_id
		) {
	
	
	String sql="";
	sql="select slot_type, slot_name, is_valid, freeze_period, freeze_period_after  from mad_deployment_slot where id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",slot_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String slot_type=arr.get(0)[0];
	String slot_name=arr.get(0)[1];
	String is_valid=arr.get(0)[2];
	String freeze_period=arr.get(0)[3];
	String freeze_period_after=arr.get(0)[4];
	

	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=deployment_slot_editor_"+slot_id+">");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" align=right>");
	sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:deleteMadDeploymentSlot('"+slot_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-remove\">");
	sb.append(" Delete \"" + slot_name +"\"" );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");
	sb.append("</div>");
	sb.append("</div>");

	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Plan Name : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("slot_name", slot_name, " onchange=\"saveMadDeploymentSlotField(this, '"+slot_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Plan Scope : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select 'DAILY','Daily Plan' from dual union all select 'HOURLY','Hourly Plan' from dual union all select 'FREE','Upon Request (Free) Plan' from dual";
	sb.append(makeCombo(conn, sql, "", "id=slot_type size=1 disabled ", slot_type,0));
	sb.append("</div>");
	sb.append("</div>");
	
	if (!slot_type.equals("FREE")) {
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Freeze Period (Before) : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		String onchange_script_freeze_period="saveMadDeploymentSlotFieldById('freeze_period', '"+slot_id+"');";
		sb.append(makeNumber("0", "freeze_period_"+slot_id, freeze_period, onchange_script_freeze_period, "EDITABLE", "5", "0", ",", ".", "Minutes", "0","9999999"));
		sb.append("</div>");
		sb.append("</div>");
		
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Freeze Period (After) : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		String onchange_script_freeze_period_after="saveMadDeploymentSlotFieldById('freeze_period_after', '"+slot_id+"');"; 
		sb.append(makeNumber("0", "freeze_period_after_"+slot_id, freeze_period_after, onchange_script_freeze_period_after, "EDITABLE", "5", "0", ",", ".", "Minutes", "0","9999999"));
		sb.append("</div>");
		sb.append("</div>");
		
	} //if (!slot_type.equals("FREE"))


	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Valid : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select 'YES','Yes' from dual union all select 'NO','No' from dual";
	sb.append(makeCombo(conn, sql, "", "id=is_valid size=1 onchange=\"saveMadDeploymentSlotField(this, '"+slot_id+"');\"", slot_type,0));
	sb.append("</div>");
	sb.append("</div>");

	StringBuilder sbdet=new StringBuilder();
	if (slot_type.equals("HOURLY")) {
		sbdet.append(makeHourlyDeploymentSlotEditor(conn,session,slot_id));
	} 
	else {
		sbdet.append(makeDailyDeploymentSlotEditor(conn,session,slot_id));
	}
	
	
	if (!slot_type.equals("FREE")) {
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Plan Details : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\" id=slotDetailDiv"+slot_id+">"); 
		sb.append(sbdet.toString());
		sb.append("</div>");
		sb.append("</div>");
	}
	
	
	
	
		
	sb.append("</div>");
	sb.append("</div>");
	
	
	return sb.toString();
}



//********************************************************************************
String makeDashSqlEditor(
		Connection conn,
		HttpSession session,
		String sql_id
		) {
	
	
	String sql="";
	sql="select sql_name, query_statement from mad_dashboard_sql where id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",sql_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String sql_name=arr.get(0)[0];
	String query_statement=arr.get(0)[1];
	

	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=dash_sql_editor_"+sql_id+">");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" align=right>");
	sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:deleteMadDashSql('"+sql_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-remove\">");
	sb.append(" Delete \"" + sql_name +"\"" );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");
	sb.append("</div>");
	sb.append("</div>");

	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Sql Name : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("sql_name", sql_name, " onchange=\"saveMadDashSqlField(this, '"+sql_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	

	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Sql Statement : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append("<textarea id=query_statement rows=5 style=\"width:100%;\"  onchange=\"saveMadDashSqlField(this, '"+sql_id+"');\">"+query_statement+"</textarea>");
	sb.append("</div>");
	sb.append("</div>");
	
	
		
	sb.append("</div>");
	sb.append("</div>");
	
	
	return sb.toString();
}


//********************************************************************************
String makeDashParameterEditor(
		Connection conn,
		HttpSession session,
		String parameter_id
		) {
	
	
	String sql="";
	sql="select parameter_title, flex_field_id, field_parameter_name, sql_statement, bind_type from mad_dashboard_parameter where id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",parameter_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String parameter_title=arr.get(0)[0];
	String flex_field_id=arr.get(0)[1];
	String field_parameter_name=arr.get(0)[2];
	String sql_statement=arr.get(0)[3];
	String bind_type=arr.get(0)[4];
	

	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=dash_parameter_editor_"+parameter_id+">");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" align=right>");
	sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:deleteMadDashParameter('"+parameter_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-remove\">");
	sb.append(" Delete \"" + parameter_title +"\"" );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");
	sb.append("</div>");
	sb.append("</div>");

	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Parameter Description : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("parameter_title", parameter_title, " onchange=\"saveMadDashParameterField(this, '"+parameter_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Flex Field : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select id, title from mad_flex_field order by 2";
	sb.append(makeCombo(conn, sql, "", "id=flex_field_id onchange=\"saveMadDashParameterField(this, '"+parameter_id+"');\"", flex_field_id, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Parameter Name : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("field_parameter_name", field_parameter_name, " onchange=\"saveMadDashParameterField(this, '"+parameter_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	

	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Filter Sql Statement : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append("<textarea id=sql_statement rows=3 style=\"width:100%;\"  onchange=\"saveMadDashParameterField(this, '"+parameter_id+"');\">"+sql_statement+"</textarea>");
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Binding Type : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	ArrayList<String[]> bindTypeArr=new ArrayList<String[]>();
	bindTypeArr.add(new String[]{"STRING"});
	bindTypeArr.add(new String[]{"INTEGER"});
	bindTypeArr.add(new String[]{"LONG"});
	bindTypeArr.add(new String[]{"DATE"});
	bindTypeArr.add(new String[]{"DATETIME"});
	sb.append(makeComboArr(bindTypeArr, "", "id=bind_type onchange=\"saveMadDashParameterField(this, '"+parameter_id+"');\"", bind_type, 0));
	sb.append("</div>");
	sb.append("</div>");

		
	sb.append("</div>");
	sb.append("</div>");
	
	
	return sb.toString();
}

//********************************************************************************
String makeDashViewEditor(
		Connection conn,
		HttpSession session,
		String view_id
		) {
	
	
	String sql="";
	sql="select view_name, view_type, sql_id, env_id, order_by, permission_id, "+
			" field_list, title_list, color_list, group_by, "+
			" x_field, y_field, sum_field, sum_function, short_code, decimal_size, "+
			" sql_filter " + 
			" from mad_dashboard_view "+
			" where id=?";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",view_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String view_name=arr.get(0)[0];
	String view_type=arr.get(0)[1];
	String sql_id=arr.get(0)[2];
	String env_id=arr.get(0)[3];
	String order_by=arr.get(0)[4];
	String permission_id=arr.get(0)[5];
	String field_list=arr.get(0)[6];
	String title_list=arr.get(0)[7];
	String color_list=arr.get(0)[8];
	String group_by=arr.get(0)[9];
	String x_field=arr.get(0)[10];
	String y_field=arr.get(0)[11];
	String sum_field=arr.get(0)[12];
	String sum_function=arr.get(0)[13];
	String short_code=arr.get(0)[14];
	String decimal_size=arr.get(0)[15];
	String sql_filter=arr.get(0)[16];
	
	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=dash_view_editor_"+view_id+">");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" align=right>");
	
	sb.append("<button type=button class=\"btn btn-sm btn-warning\" onclick=\"javascript:runMadDashView('"+view_id+"','viewExecuteBody','TEST');\">");
	sb.append("<span class=\"glyphicon glyphicon-play\">");
	sb.append(" Run " );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");
	
	sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:deleteMadDashView('"+view_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-remove\">");
	sb.append(" Delete " );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");
	
	
	
	sb.append("</div>");
	sb.append("</div>");
	
	


	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">View Name : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("view_name", view_name, " onchange=\"saveMadDashViewField(this, '"+view_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">View Short Code : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("short_code", short_code, " onchange=\"saveMadDashViewField(this, '"+view_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">View Type : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	
	ArrayList<String[]> bindTypeArr=new ArrayList<String[]>();
	bindTypeArr.add(new String[]{"TABLE","Tabular Table"});
	bindTypeArr.add(new String[]{"PIVOT","Pivot Table"});
	bindTypeArr.add(new String[]{"GRAPH_H_BAR","Horizontal Bar Chart"});
	bindTypeArr.add(new String[]{"GRAPH_V_BAR","Vertical Bar Chart"});
	bindTypeArr.add(new String[]{"GRAPH_PIE","Pie Chart"});
	bindTypeArr.add(new String[]{"GRAPH_LINE","Line Chart"});
	
	sb.append(makeComboArr(bindTypeArr, "", "size=1 id=view_type onchange=\"saveMadDashViewField(this, '"+view_id+"');\"", view_type, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Data Source / Sql : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select id, sql_name from mad_dashboard_sql order by 2 desc";
	sb.append(makeCombo(conn, sql, "", "id=sql_id onchange=\"saveMadDashViewField(this, '"+view_id+"');\"", sql_id, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Default  Filter : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append("<textarea id=sql_filter rows=3 style=\"width:100%;\" onchange=\"saveMadDashViewField(this, '"+view_id+"');\" >"+clearHtml(sql_filter)+"</textarea>");
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Database : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select id, name from tdm_envs order by 2 desc";
	sb.append(makeCombo(conn, sql, "", "id=env_id onchange=\"saveMadDashViewField(this, '"+view_id+"');\"", env_id, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Permission Needed : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select id, permission_name from mad_permission order by 2 desc";
	sb.append(makeCombo(conn, sql, "", "id=permission_id onchange=\"saveMadDashViewField(this, '"+view_id+"');\"", permission_id, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">User Filters : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\" id=divFilterListForView"+view_id+">");
	sb.append(makeMadDashViewFilterList(conn,session,view_id));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Fields : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("field_list", field_list, " onchange=\"saveMadDashViewField(this, '"+view_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Titles : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("title_list", title_list, " onchange=\"saveMadDashViewField(this, '"+view_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Colors : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("color_list", color_list, " onchange=\"saveMadDashViewField(this, '"+view_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Group Fields : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("group_by", group_by, " onchange=\"saveMadDashViewField(this, '"+view_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Summary Functions : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("sum_function", sum_function, " onchange=\"saveMadDashViewField(this, '"+view_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Summary Fields : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("sum_field", sum_field, " onchange=\"saveMadDashViewField(this, '"+view_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Axis Field : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("x_field", x_field, " onchange=\"saveMadDashViewField(this, '"+view_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");

	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Serie Fields : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("y_field", y_field, " onchange=\"saveMadDashViewField(this, '"+view_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Decimal Length : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	ArrayList<String[]> decimalArr=new ArrayList<String[]>();
	for (int i=0;i<10;i++) decimalArr.add(new String[]{""+i});
	sb.append(makeComboArr(decimalArr, "", "size=0 id=decimal_size onchange=\"saveMadDashViewField(this, '"+view_id+"');\" ", decimal_size, 200));
	sb.append("</div>");
	sb.append("</div>");
		
	sb.append("</div>");
	sb.append("</div>");
	
	
	return sb.toString();
}

//********************************************************************************
String makeMadDashViewFilterList(Connection conn, HttpSession session, String view_id) {
	StringBuilder sb=new StringBuilder(); 
	String sql="select vp.id, parameter_title, field_parameter_name from mad_dashboard_view_parameter vp, mad_dashboard_parameter p where vp.parameter_id=p.id and vp.view_id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",view_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	sb.append("<a href=\"javascript:addNewMadDashViewFilter('"+view_id+"')\">[+ Add new filter]</a>");
	
	sb.append("<table class=\"table table-striped table-condensed\">");
	
	for (int i=0;i<arr.size();i++) {
		String view_parameter_id=arr.get(i)[0];
		String parameter_title=arr.get(i)[1];
		String field_parameter_name=arr.get(i)[2];
		
		sb.append("<tr>");
		sb.append("<td>");
		sb.append(parameter_title);
		sb.append("</td>");
		sb.append("<td>");
		sb.append(field_parameter_name);
		sb.append("</td>");
		sb.append("<td>");
		sb.append("<a href=\"javascript:deleteMadDashViewFilter('"+view_id+"','"+view_parameter_id+"')\"><font color=red><span class=\"glyphicon glyphicon-remove\"></span></font></a>");
		sb.append("</td>");
		sb.append("</tr>");
		
	}
	
	sb.append("</table>");
	
	return sb.toString();
}

//********************************************************************************
String makeHourlyDeploymentSlotEditor(Connection conn, HttpSession session, String slot_id) {
	StringBuilder sb=new StringBuilder();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	String sql="";
	String[] days=new String[]{"Mon","Tue","Wed","Thu","Fri","Sat","Sun"};
	
	
	sql="select hourly_day_id, hourly_minute_id from mad_deployment_slot_detail where slot_id=? and is_valid='YES'";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",slot_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	ArrayList<String> currHours=new ArrayList<String>();
	for (int i=0;i<arr.size();i++) 
		currHours.add(arr.get(i)[0]+"_"+arr.get(i)[1]);
	
	
	
	sb.append("<div class=row>");
	
	sb.append("<div class=\"col-md-4\" align=right>");
	sb.append("");
	sb.append("</div>");
	
	sb.append("<div class=\"col-md-8\">");
	sb.append("<div class=row>");
	for (int d=0;d<days.length;d++) {
		String day=days[d];
		
		sb.append("<div class=\"col-md-1\">");
		sb.append("<b>"+day+"</b>");
		sb.append("</div>");
		
	}
	sb.append("</div>");
	
	sb.append("</div>");
	sb.append("</div>");
	
	
	//-------------------------------
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" style=\"min-height: 0px; max-height: 400px; overflow-x: scroll; overflow-y: scroll; \" >");
	
	for (int t=0;t<24*60;t=t+15) {
		String hour="000"+(t / 60);
		String minute="000"+(t % 60);
		
		String time=hour.substring(hour.length()-2,hour.length()) +  ":" + minute.substring(minute.length()-2,minute.length());
		
		String style="style=\"background-color:#DADADA;\" ";
		if (t>=8*60 && t<18*60) {
			style="style=\"background-color:lightgreen;\" ";
		}
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-4\" align=right "+style+">");
		sb.append("<b>"+time+" </b> : ");
		sb.append("<input type=checkbox onclick=changeDeploymentSlotDetailAll(this,'"+slot_id+"','"+t+"');>");
		sb.append("</div>");
		
		sb.append("<div class=\"col-md-8\">");
		
		sb.append("<div class=row>");
		for (int d=0;d<days.length;d++) {
			
			String checked="";
			
			if (currHours.contains(""+d+"_"+t))  checked="checked";
			
			sb.append("<div class=\"col-md-1\" align=center >"); 
			sb.append("<input type=checkbox "+checked+" id=ch_ts_item_"+slot_id+"_"+d+"_"+t+" value=\""+d+"_"+t+"\" onclick=changeDeploymentSlotDetail(this,'"+slot_id+"');>");
			sb.append("</div>");
			
		}
		
		sb.append("</div>");
		
		sb.append("</div>");
		sb.append("</div>");
	}
	
	
	sb.append("</div>");
	sb.append("</div>");
	
	return sb.toString();
}

 


//********************************************************************************
String makeDailyDeploymentSlotEditor(Connection conn, HttpSession session, String slot_id) {
	StringBuilder sb=new StringBuilder();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	String sql="";
	
	sql="select id, slot_name, is_valid, DATE_FORMAT(daily_time,?) daily_time"+
		"	from mad_deployment_slot_detail "+
		"	where slot_id=? order by daily_time";
	bindlist.clear();
	bindlist.add(new String[]{"STRING",mysql_format});
	bindlist.add(new String[]{"INTEGER",slot_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" >");
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addNewMadDeploymentSlotDetail('"+slot_id+"');\" >");
	sb.append("<span class=\"glyphicon glyphicon-plus\"></span> Add New Slot");
	sb.append("</button>");
	sb.append("</div>"); //div 12
	sb.append("</div>"); //row
	
	
	//---------------------------------------------
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" style=\"min-height: 0px; max-height: 400px; overflow-y: scroll; \" >");

	sb.append("<table class=\"table table-striped table-condensed\">");
	
	sb.append("<tr class=active>");
	sb.append("<td><b>Deployment Time</b></td>");
	sb.append("<td><b>Slot Name</b></td>");
	sb.append("<td><b>Valid</b></td>");
	sb.append("<td></td>");
	sb.append("</tr>");
	
	
	for (int i=0;i<arr.size();i++) {
		String slot_detail_id=arr.get(i)[0];
		String slot_name=arr.get(i)[1];
		String is_valid=arr.get(i)[2];
		String daily_time=arr.get(i)[3];
		
		String daily_time_formated=daily_time;
		
		String js_script=" onchange=saveMadDeploymentSlotDetail("+slot_detail_id+"); ";
		
		sb.append("<tr>");
		
		
		
		
		sb.append("<td>");
		sb.append(makeDate("0", "daily_time_"+slot_detail_id, daily_time_formated, js_script));
		sb.append("</td>");
		
		sb.append("<td>");
		sb.append(makeText("slot_name_"+slot_detail_id, slot_name, js_script, 0));
		sb.append("</td>");
		
		sb.append("<td>");
		sb.append(makeCheckbox("0", "is_valid_"+slot_detail_id, is_valid, js_script));
		sb.append("</td>");
		
		sb.append("<td>");
		sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=removeMadDeploymentSlotDetail('"+slot_id+"','"+slot_detail_id+"')>");
		sb.append("<span class=\"glyphicon glyphicon-remove\"></span>");
		sb.append("</button>");
		sb.append("</td>");
		
		sb.append("</tr>"); //row
	}
	
	
	sb.append("</table>");
	
	sb.append("</div>");
	sb.append("</div>"); //row
	
	
	return sb.toString();
}


//********************************************************************************
void updateMadDeploymentSlotDetail(
		Connection conn,
		HttpSession session,
		String slot_detail_id,
		String daily_time,
		String slot_name,
		String is_valid
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();

	sql="update mad_deployment_slot_detail set daily_time=STR_TO_DATE(?,?), slot_name=? ,is_valid=? where id=?";
	bindlist.add(new String[]{"STRING",daily_time});
	bindlist.add(new String[]{"STRING",mysql_format});
	bindlist.add(new String[]{"STRING",slot_name});
	bindlist.add(new String[]{"STRING",is_valid});
	bindlist.add(new String[]{"INTEGER",slot_detail_id});
	
	execDBConf(conn, sql, bindlist);
}

//********************************************************************************
String makeMadFlowStateList(
		Connection conn,
		HttpSession session,
		String flow_id
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	StringBuilder sb=new StringBuilder();
	StringBuilder sbAppContent=new StringBuilder();
	
	sql="select id, state_type, state_name, state_title from mad_flow_state where flow_id=? order by state_title";
	bindlist.add(new String[]{"INTEGER",flow_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	sb.append("<div class=\"btn-group-vertical\" data-toggle=\"buttons\" >");
	
	sb.append("<button type=\"radio\" class=\"btn btn-success\" onclick=addNewMadFlowState('"+flow_id+"')>");
	sb.append("<span class=\"glyphicon glyphicon-plus\"> Add New State</span>");
	sb.append("</button>");
	
	
	
	
	for (int i=0;i<arr.size();i++) {
		String state_id=arr.get(i)[0];
		String state_type=arr.get(i)[1];
		String state_name=arr.get(i)[2];
		String state_title=arr.get(i)[3];
		
		String label_class="btn btn-default";
		String checked="";
		if (state_name.equals("NEW")) {
			 checked="checked";
			label_class="btn btn-default active";
		}
		
		if (state_type.equals("SYSTEM")) state_title=state_title+" (*) ";
			
		
		sb.append("<label class=\""+label_class+"\"  onclick=makeMadFlowStateEditor('"+flow_id+"','"+state_id+"')>");
		sb.append("<input type=\"radio\" name=\"flow_states_of_"+flow_id+"\" id=\"flow_states_of_"+flow_id+"_option_"+i+"\" autocomplete=\"off\" "+checked+"> "+state_title);
		sb.append("</label>");
	}
	sb.append("</div>");
	
	
	return sb.toString();
}

//********************************************************************************
String getMadFlowInfo(
		Connection conn,
		HttpSession session,
		String flow_id,
		String request_id
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	StringBuilder sb=new StringBuilder();
	
	
	sql="select id, state_name, state_title, loc_x, loc_y from mad_flow_state where flow_id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",flow_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	for (int i=0;i<arr.size();i++) {
		String state_name=arr.get(i)[1];
		
		if (state_name.equals("NEW") && i>0) {
			String[] a=arr.get(i);
			arr.set(i, arr.get(0));
			arr.set(0, a);
		}
		
		if (state_name.equals("CLOSED") && i<arr.size()-1) {
			String[] a=arr.get(i);
			arr.set(i, arr.get(arr.size()-1));
			arr.set(arr.size()-1, a);
		}
		
	}
	
	for (int i=0;i<arr.size();i++) {
		String state_id=arr.get(i)[0];
		String state_name=arr.get(i)[1];
		String state_title=arr.get(i)[2];
		String state_loc_x=arr.get(i)[3];
		String state_loc_y=arr.get(i)[4];
		
		String state_status="NONE";
		
		if (!request_id.equals("0")) {
			sql="select status from mad_request_flow_logs where request_id=? and flow_id=? and flow_state_id=? order by curr_state_date desc";
			bindlist.clear();
			bindlist.add(new String[]{"INTEGER",request_id});
			bindlist.add(new String[]{"INTEGER",flow_id});
			bindlist.add(new String[]{"INTEGER",state_id});
			ArrayList<String[]> arr3=getDbArrayConf(conn, sql, 1, bindlist);
			if (arr3.size()==1) state_status=arr3.get(0)[0];  //CLOSED*OPEN
			
			sql="select count(*) from mad_request_flow_logs where request_id=? and flow_id=? and flow_state_id=?";
			bindlist.clear();
			bindlist.add(new String[]{"INTEGER",request_id});
			bindlist.add(new String[]{"INTEGER",flow_id});
			bindlist.add(new String[]{"INTEGER",state_id});
			ArrayList<String[]> arr4=getDbArrayConf(conn, sql, 1, bindlist);
			
			if (arr3.size()==1) state_status=state_status+":"+arr4.get(0)[0]; 
			
		} //if (!request_id.equals("0"))
		
		
		
		int loc_x=-1;
		int loc_y=-1;
		
		try{loc_x=Integer.parseInt(state_loc_x);} catch(Exception e) {}
		try{loc_y=Integer.parseInt(state_loc_y);} catch(Exception e) {}
		
		String state_loc_info=""+loc_x+":"+loc_y;
		
		String next_actions="";
		sql="select a.id, action_name, state_name from mad_flow_state_action a, mad_flow_state s where a.next_state_id=s.id and a.flow_state_id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",state_id});
		ArrayList<String[]> arr2=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		for (int a=0;a<arr2.size();a++) {
			String action_id=arr2.get(a)[0];
			String action_name=arr2.get(a)[1];
			String action_state_name=arr2.get(a)[2];
			
			String action_status="NONE";
			if (!request_id.equals("0")) {
				sql="select status from mad_request_flow_logs where request_id=? and flow_id=? and flow_state_id=? and flow_state_action_id=? order by curr_state_date desc";
				bindlist.clear();
				bindlist.add(new String[]{"INTEGER",request_id});
				bindlist.add(new String[]{"INTEGER",flow_id});
				bindlist.add(new String[]{"INTEGER",state_id});
				bindlist.add(new String[]{"INTEGER",action_id});
				ArrayList<String[]> arr3=getDbArrayConf(conn, sql, 1, bindlist);
				if (arr3.size()==1) action_status=arr3.get(0)[0];  //CLOSED*OPEN
			} //if (!request_id.equals("0"))
			
			if (a>0) next_actions=next_actions+"+";
			next_actions=next_actions+  action_name+":"+action_state_name+":"+action_status;
		}
		
		if (i>0) sb.append(";");
		String a_state_line=state_id+","+state_name+","+state_title+","+state_status+","+state_loc_info+","+next_actions;
		sb.append(a_state_line);
	}
	
	
	return sb.toString();
}


//********************************************************************************
void saveMadFlowLocation(
		Connection conn,
		HttpSession session,
		String flow_id,
		String saving_state,
		String loc_x,
		String loc_y
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	StringBuilder sb=new StringBuilder();
	
	sql="update mad_flow_state set loc_x=?, loc_y=? where flow_id=? and state_name=?";
	
	bindlist.add(new String[]{"INTEGER",loc_x});
	bindlist.add(new String[]{"INTEGER",loc_y});
	bindlist.add(new String[]{"INTEGER",flow_id});
	bindlist.add(new String[]{"STRING",saving_state});
	
	execDBConf(conn, sql, bindlist);
	
	
}

//************************************************************************************
String getNativePermissionNameById(String permission_id) {
	
	String ret1=permission_id;
	
	if (permission_id.equals("-1")) ret1="REQUEST [Owner]";
	if (permission_id.equals("-2")) ret1="REQUEST [Direct Manager of Owner]";
	if (permission_id.equals("-3")) ret1="GENERAL [Administator]";
	if (permission_id.equals("-4")) ret1="GENERAL [Release Manager]";
	if (permission_id.equals("-5")) ret1="GENERAL [Group Member]";
	
	return ret1;
}

//********************************************************************************
String makeMadFieldSettingForm(
		Connection conn,
		HttpSession session,
		String request_type_id
		) {
	String sql="";

	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	StringBuilder sb=new StringBuilder();
	
	sql="select flow_id from mad_request_type where id=? and flow_id in(select id from mad_flow)";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_type_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==0) {
		return "<span class=\"label label-danger\">No Flow Defined</span>";
	}
	String flow_id=arr.get(0)[0];
	
	sql="select id, state_title, " +
		" (select count(*) from mad_request_type_state_field_override where flow_state_id=m.id) overriding_count " +
			" from mad_flow_state m " +
			" where flow_id=? order by 1";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",flow_id});
	ArrayList<String[]> arrState=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	sql="select  rtf.flex_field_id, f.title, rtf.is_visible, rtf.is_editable, rtf.is_mandatory " + 
		" from   mad_request_type_field rtf, mad_flex_field f " + 
		" where request_type_id=? and flex_field_id=f.id " + 
		" order by field_order" ;
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_type_id});
	ArrayList<String[]> arrFields=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);

	
	
	
	
	
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();
	StringBuilder sbAppContent=new StringBuilder();
	
	ArrayList<String[]> yesnoArr=new ArrayList<String[]>();
	yesnoArr.add(new String[]{"YES","Yes"});
	yesnoArr.add(new String[]{"NO","No!"});
	
	sb.append("<input type=hidden id=overriding_request_type_id value="+request_type_id+">");
	
	
	for (int s=0;s<arrState.size();s++) {
		String flow_state_id=arrState.get(s)[0];
		String flow_state_title=arrState.get(s)[1];
		String overriding_count=arrState.get(s)[2];
		
		sbAppContent.setLength(0);
		
		sql="select distinct permission_id, " + 
			" (select permission_name from mad_permission where id=permission_id) permission_name"  + 
			"	from mad_flow_state_action sa, mad_flow_state_action_permissions sap"  + 
			"	where flow_state_action_id=sa.id"  + 
			"	and flow_state_id=? order by 2 ";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",flow_state_id});
		ArrayList<String[]> arrPerm=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		if (arrPerm.size()==0) continue;
		
		
		
		sbAppContent.append("<table class=\"table table-condensed table-bordered\">");
		
		
		for (int f=0;f<arrFields.size();f++) {
			
			String flex_field_id=arrFields.get(f)[0];
			String flex_field_title=arrFields.get(f)[1];
			String flex_field_is_visible=arrFields.get(f)[2];
			String flex_field_is_editable=arrFields.get(f)[3];
			String flex_field_is_mandatory=arrFields.get(f)[4];
			
			
			if (f==0) {
				sbAppContent.append("<tr class=active>");
				sbAppContent.append("<td style=\"vertical-align: bottom;\"><b>Fields</b></td>");
				sbAppContent.append("<td style=\"vertical-align: bottom;\">");
				sbAppContent.append("<b>Default Configuration</b>");
				sbAppContent.append("<hr>");
				sbAppContent.append("<div class=row>");
				sbAppContent.append("<div class=\"col-md-4\" align=center><span class=badge>Visi</span></div>");
				sbAppContent.append("<div class=\"col-md-4\" align=center><span class=badge>Edit</span></div>");
				sbAppContent.append("<div class=\"col-md-4\" align=center><span class=badge>Mand</span></div>");
				sbAppContent.append("</div>");
				sbAppContent.append("</td>");
				
				
				for (int i=0;i<arrPerm.size();i++) {
					String permission_id=arrPerm.get(i)[0];
					String permission_name=nvl(arrPerm.get(i)[1],getNativePermissionNameById(permission_id));
					
					
					sbAppContent.append("<td class=active style=\"vertical-align: bottom;\">");
					sbAppContent.append("<b><small>"+permission_name+"</small></b>");
					sbAppContent.append("<hr>");
					sbAppContent.append("<div class=row>");
					sbAppContent.append("<div class=\"col-md-4\" align=center><span class=badge>Visi</span></div>");
					sbAppContent.append("<div class=\"col-md-4\" align=center><span class=badge>Edit</span></div>");
					sbAppContent.append("<div class=\"col-md-4\" align=center><span class=badge>Mand</span></div>");
					sbAppContent.append("</div>");

					sbAppContent.append("</td>");
					
					
				}
				sbAppContent.append("</tr>");
			} //if (f==0) 
			
			sbAppContent.append("<tr>");
			
			sbAppContent.append("<td class=active>");
			sbAppContent.append("<b><small>"+flex_field_title+"</small></b>");
			sbAppContent.append("</td>");
			
			sbAppContent.append("<td class=active>");
			
			String visible_checked="";
			String editable_checked="";
			String mandatory_checked="";
			
			
			if (flex_field_is_visible.equals("YES")) visible_checked="checked";
			if (flex_field_is_editable.equals("YES")) editable_checked="checked";
			if (flex_field_is_mandatory.equals("YES")) mandatory_checked="checked";
			
			sbAppContent.append("<div class=row>");
			
			sbAppContent.append("<div class=\"col-md-4\" align=center>");
			sbAppContent.append("<input disabled type=checkbox "+ visible_checked +">");
			sbAppContent.append("</div>");
			
			sbAppContent.append("<div class=\"col-md-4\" align=center>");
			sbAppContent.append("<input disabled type=checkbox "+ editable_checked +">");
			sbAppContent.append("</div>");

			sbAppContent.append("<div class=\"col-md-4\" align=center>");
			sbAppContent.append("<input disabled type=checkbox "+ mandatory_checked +">");
			sbAppContent.append("</div>");

			sbAppContent.append("</div>");


			
			sbAppContent.append("</td>");
			
			for (int i=0;i<arrPerm.size();i++) {
				String permission_id=arrPerm.get(i)[0];
				
				sbAppContent.append("<td>");


				sbAppContent.append("<div class=row>");
				
				String[] keys=new String[]{"VISIBLE","EDITABLE","MANDATORY"};
				for (int k=0;k<keys.length;k++) {
					String averride_key=keys[k];
					sbAppContent.append("<div class=\"col-md-4\" id=\"divOv_"+flow_state_id+"_"+flex_field_id+"_"+permission_id+"_"+averride_key+"\" align=center >");
					sbAppContent.append(makeMadRequestFieldSettingCell(conn,request_type_id,flow_state_id,flex_field_id,permission_id,averride_key));
					sbAppContent.append("</div>");
				}
				
				sbAppContent.append("</div>");
				
				
				sbAppContent.append("</td>");
				
			}
				
			sbAppContent.append("</tr>");
				
			
				
		} // for f
		
		
		
		
		sbAppContent.append("</table>");
		
		String tab_title=flow_state_title;
		if (!overriding_count.equals("0")) tab_title=tab_title +" <span class=\"label label-danger\"> <b>!</b> </span>";
		
		collapseItems.add(new String[]{
				"colFieldSettingFormContent_"+flow_state_id,
				tab_title,
				sbAppContent.toString(),
				"state.png"});
		
	}  // for s
	
	
	sb.append(addTab("listFieldSetting",collapseItems));
	
	
	return sb.toString();
	
}

//--------------------------------------------------------------
boolean isOverrided(
		Connection conn,
		String request_type_id,
		String flow_state_id, 
		String flex_field_id, 
		String permission_id,
		String override_key
		) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	sql="select flow_state_id, flex_field_id, permission_id, overriding_key " + 
			" from mad_request_type_state_field_override " +
			" where request_type_id=? "+
			" and flow_state_id=? "+
			" and flex_field_id=? "+
			" and permission_id=? "+
			" and overriding_key=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_type_id});
	bindlist.add(new String[]{"INTEGER",flow_state_id});
	bindlist.add(new String[]{"INTEGER",flex_field_id});
	bindlist.add(new String[]{"INTEGER",permission_id});
	bindlist.add(new String[]{"STRING",override_key});

	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);

	

	if (arr.size()>0) return true;
	return false;
	
}
//************************************************************************************
String makeMadRequestFieldSettingCell(
		Connection conn,
		String request_type_id,
		String flow_state_id, 
		String flex_field_id, 
		String permission_id,
		String override_key
		) {
	
	StringBuilder sb=new StringBuilder();
	
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	

	boolean is_overrided=isOverrided(conn, request_type_id, flow_state_id, flex_field_id, permission_id, override_key);

	
	String is_checked="";
	
	String cell_style="";

	
	sql="select is_"+override_key.toLowerCase()+" from mad_request_type_field where request_type_id=? and flex_field_id=?";

	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_type_id});
	bindlist.add(new String[]{"INTEGER",flex_field_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String is_originally_checked=arr.get(0)[0];
	String overriding_cell_style="background-color:#DA9900; ";

	if (is_overrided) {
		cell_style=overriding_cell_style;
		if (is_originally_checked.equals("YES")) is_checked=""; 
		else if (is_originally_checked.equals("NO")) is_checked="checked"; 
	}
	else {
		cell_style="";
		if (is_originally_checked.equals("YES")) is_checked="checked"; 
		else if (is_originally_checked.equals("NO")) is_checked=""; 
	}
	
	sb.append("<div style=\""+cell_style+"\">");
	sb.append("<input type=checkbox "+ is_checked +" id="+override_key+" onclick=setMadFlowStateFieldOverride(this,'"+flow_state_id+"','"+permission_id+"','"+flex_field_id+"'); >");
	sb.append("</div>");
	
	
	return sb.toString();
}


//************************************************************************************
void changeMadRequestFieldSettingOverride(
		Connection conn,
		String request_type_id,
		String flow_state_id, 
		String flex_field_id, 
		String permission_id,
		String override_type
		) {
	
	StringBuilder sb=new StringBuilder();

	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select 1 from mad_request_type_state_field_override "+
			" where " + 
			" request_type_id=?  " + 
			" and flow_state_id=? " + 
			" and flex_field_id=? " + 
			" and permission_id=? " + 
			" and overriding_key=? ";
	bindlist.add(new String[]{"INTEGER",request_type_id});
	bindlist.add(new String[]{"INTEGER",flow_state_id});
	bindlist.add(new String[]{"INTEGER",flex_field_id});
	bindlist.add(new String[]{"INTEGER",permission_id});
	bindlist.add(new String[]{"STRING",override_type});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==0) {
		sql="insert into mad_request_type_state_field_override "+
			" (request_type_id,flow_state_id,flex_field_id,permission_id,overriding_key) values (?,?,?,?,?)";
	}
	else {
		sql="delete from mad_request_type_state_field_override "+
				" where " + 
				" request_type_id=?  " + 
				" and flow_state_id=? " + 
				" and flex_field_id=? " + 
				" and permission_id=? " + 
				" and overriding_key=? ";
		
		
	}

	execDBConf(conn, sql, bindlist);
	
}

//********************************************************************************
String makeMadFlowStateEditor(
		Connection conn,
		HttpSession session,
		String flow_id,
		String flow_state_id
		) {
	String sql="";
	sql="select state_type, state_name,  state_title, state_stage, state_description "+
		" from mad_flow_state where id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",flow_state_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String state_type=arr.get(0)[0];
	String state_name=arr.get(0)[1];
	String state_title=arr.get(0)[2];
	String state_stage=arr.get(0)[3];
	String state_description=arr.get(0)[4];


	String disabled="";
	if (state_type.equals("SYSTEM")) disabled="disabled";
	

	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=flow_state_editor_"+flow_id+"_"+state_name+" style=\"background-color:#DADADA; \">");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" align=right>");
	sb.append("<button "+disabled+" type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:deleteMadFlowState('"+flow_id+"','"+flow_state_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-remove\">");
	sb.append(" Delete Flow State " );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");
	sb.append("</div>");
	
	sb.append("</div>");
	
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">State Name : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("state_name", state_name, disabled+" onchange=\"saveMadFlowStateField(this, '"+flow_state_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">State Title : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("state_title", state_title, " onchange=\"saveMadFlowStateField(this, '"+flow_state_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">State Stage : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	ArrayList<String[]> stateArr=new ArrayList<String[]>();
	stateArr.add(new String[]{"START","Start"});
	stateArr.add(new String[]{"FINISH","Finish"});
	stateArr.add(new String[]{"DEPLOY","Perform Deployment"});
	stateArr.add(new String[]{"DEPLOY_SUCCESS","Deployment Success"});
	stateArr.add(new String[]{"DEPLOY_FAIL","Deployment Fail"});
	stateArr.add(new String[]{"WAIT","Stalling"});
	stateArr.add(new String[]{"APPROVAL","Waiting Approval"});
	stateArr.add(new String[]{"APPROVED","Approval OK"});
	stateArr.add(new String[]{"REJECTED","Approval Rejected"});
	
	sb.append(makeComboArr(stateArr, "", "id =state_stage onchange=\"saveMadFlowStateField(this, '"+flow_state_id+"');\"" , state_stage, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	
	sb.append("<div class=row>"); 
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Permissions to Edit: </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select id, concat(permission_level,'.',permission_name) from mad_permission  order by 2";
	bindlist.clear();
	ArrayList<String[]> permsAllArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	permsAllArr.add(0, new String[]{"-1","REQUEST [Owner]"});
	permsAllArr.add(0, new String[]{"-2","REQUEST [Direct Manager of Owner]"});
	permsAllArr.add(0, new String[]{"-3","GENERAL [Administator]"});
	permsAllArr.add(0, new String[]{"-4","GENERAL [Release Manager]"});
	permsAllArr.add(0, new String[]{"-5","GENERAL [Group Member]"});
	
	String inner_sql="select id, permission_name from mad_permission pi ";
	int a=0;
	for (int i=0;i<permsAllArr.size();i++) {
		String p_id=permsAllArr.get(i)[0];
		String p_name=permsAllArr.get(i)[1];
		if (Integer.parseInt(p_id)<0) {
			a++;
			inner_sql=inner_sql+ "\n union all \n";
			inner_sql=inner_sql+ " select '"+p_id+"','"+p_name+"' from dual \n";
		}
		else break;
	}
	
	
	sql="select permission_id, permission_name \n" 
		+"	from mad_flow_state_edit_permissions m, ("+inner_sql+") p  \n" 
		+"	where  flow_state_id=? \n" 
		+"	and permission_id=p.id  \n"+
		" order by 2";	
	


	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",flow_state_id});
	ArrayList<String[]> permsInActionArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	String event_listener="javascript:addRemoveStateEditPermission(\""+flow_state_id+"\",\"#\");";
	sb.append(makePickList("0", "permissions_to_edit_"+flow_state_id, permsAllArr, permsInActionArr, "", event_listener));
	sb.append("</div>");
	sb.append("</div>");
	
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">State Description : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append("<textarea rows=2 style=\"width:100%\" id=state_description onchange=\"saveMadFlowStateField(this, '"+flow_state_id+"');\" >"+state_description+"</textarea>");
	sb.append("</div>");
	sb.append("</div>");



	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=colFlowStateActions_"+flow_state_id+"Body>");
	sb.append(makeMadFlowStateActionList(conn,session,flow_state_id));
	sb.append("</div>");
	sb.append("</div>");
	
		
	sb.append("</div>");
	sb.append("</div>");
	
	
	return sb.toString();
}


//********************************************************************************
String makeMadFlowStateActionList(
		Connection conn,
		HttpSession session,
		String flow_state_id
		) {
	String sql="";
	sql="select id,action_type, action_name "+
		" from mad_flow_state_action where flow_state_id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",flow_state_id});
	ArrayList<String[]> actionList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	StringBuilder sb=new StringBuilder();
	
	StringBuilder sbAppContent=new StringBuilder();
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();

	for (int i=0;i<actionList.size();i++) {
		
		String action_id=actionList.get(i)[0];
		String action_type=actionList.get(i)[1];
		String action_name=actionList.get(i)[2];
		
		
		sbAppContent.setLength(0);
		sbAppContent.append(makeFlowStateActionEditor(conn, session, action_id));
		
		collapseItems.add(new String[]{
				"colFlowStateActionContent_"+action_id,
				action_name,
				sbAppContent.toString(),
				"action.png"});
		
	}
	
	sb.append(makeFlowStateActionHeader(flow_state_id));
	sb.append(addTab("listFlowStateAction",collapseItems));
	
	
	return sb.toString();
}


//********************************************************************************
String makeFlowStateActionEditor(
		Connection conn,
		HttpSession session,
		String action_id
		) {
	
	
	String sql="";
	sql="select flow_state_id, action_name, action_type, action_description, "+
		" next_state_id, email_template_id, repository_action "+
		" from mad_flow_state_action where id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",action_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	
	String flow_state_id=arr.get(0)[0];
	String action_name=arr.get(0)[1];
	String action_type=arr.get(0)[2];
	String action_description=arr.get(0)[3];
	String next_state_id=arr.get(0)[4];
	String email_template_id=arr.get(0)[5];
	String repository_action=arr.get(0)[6];

	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=flow_state_action_editor_"+action_id+">");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" align=right>");
	sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:deleteMadFlowStateAction('"+flow_state_id+"','"+action_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-remove\">");
	sb.append(" Delete Action  " );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");
	sb.append("</div>");
	sb.append("</div>");

	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Action Name : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("action_name", action_name, " onchange=\"saveMadFlowStateActionField(this, '"+action_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Action Description : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append("<textarea rows=2 style=\"width:100%\" id=action_description onchange=\"saveMadFlowStateActionField(this, '"+action_id+"');\" >"+action_description+"</textarea>");
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Action Type : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select 'HUMAN','Manual Action' from dual union all select 'JS','Automated Action' from dual";
	bindlist.clear();
	ArrayList<String[]> actTypeArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	sb.append(makeComboArr(actTypeArr, "", "id=action_type onchange=\"saveMadFlowStateActionField(this, '"+action_id+"');\"", action_type, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Next State : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select id, concat(state_title,' (',state_name,')') from mad_flow_state where  id!=? and flow_id in (select flow_id from mad_flow_state where id=?) order by 2";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",flow_state_id});
	bindlist.add(new String[]{"INTEGER",flow_state_id});
	ArrayList<String[]> nextStateArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	sb.append(makeComboArr(nextStateArr, "", "id=next_state_id onchange=\"saveMadFlowStateActionField(this, '"+action_id+"');\"", next_state_id, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Methots to execute : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\" id=\"methodsToExecuteDivForAction_"+action_id+"\" >");
	sb.append(makeFlowStateActionMethodList(conn, session,action_id));
	sb.append("</div>");
	sb.append("</div>");
	

	
	
	
	sb.append("<div class=row>"); 
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Permissions Needed : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select id, concat(permission_name,' [',permission_level,']') from mad_permission  order by 2";
	bindlist.clear();
	ArrayList<String[]> permsAllArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	permsAllArr.add(0, new String[]{"-1","REQUEST [Owner]"});
	permsAllArr.add(0, new String[]{"-2","REQUEST [Direct Manager of Owner]"});
	permsAllArr.add(0, new String[]{"-3","GENERAL [Administator]"});
	permsAllArr.add(0, new String[]{"-4","GENERAL [Release Manager]"});
	permsAllArr.add(0, new String[]{"-5","GENERAL [Group Member]"});
	
	String inner_sql="select id, permission_name from mad_permission pi ";
	int a=0;
	for (int i=0;i<permsAllArr.size();i++) {
		String p_id=permsAllArr.get(i)[0];
		String p_name=permsAllArr.get(i)[1];
		if (Integer.parseInt(p_id)<0) {
			a++;
			inner_sql=inner_sql+ "\n union all \n";
			inner_sql=inner_sql+ " select '"+p_id+"','"+p_name+"' from dual \n";
		}
		else break;
	}
	
	
	sql="select permission_id, permission_name \n" 
		+"	from mad_flow_state_action_permissions m, ("+inner_sql+") p  \n" 
		+"	where  flow_state_action_id=? \n" 
		+"	and permission_id=p.id  \n"+
		" order by 2";	
	


	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",action_id});
	ArrayList<String[]> permsInActionArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	String event_listener="javascript:addRemoveActionPermission(\""+action_id+"\",\"#\");";
	sb.append(makePickList("0", "permissions_in_action_"+action_id, permsAllArr, permsInActionArr, "", event_listener));
	sb.append("</div>");
	sb.append("</div>");
	
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Email Template : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select id, template_name from mad_email_template order by 2";
	sb.append(makeCombo(conn, sql, "", "id=email_template_id onchange=\"saveMadFlowStateActionField(this, '"+action_id+"');\"", email_template_id,0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>"); 
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Groups to Notify: </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select id, group_name from mad_group where group_type='NOTIFICATION'  order by 2";
	bindlist.clear();
	ArrayList<String[]> groupsAllArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	sql="select group_id, group_name " 
		+"	from mad_flow_state_action_groups m, mad_group g  " 
		+"	where  flow_state_action_id=? " 
		+"	and  group_id=g.id  " 
		+"	order by 2";


	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",action_id});
	ArrayList<String[]> notifyGroupsArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	event_listener="javascript:addRemoveNotificationGroup(\""+action_id+"\",\"#\");";
	sb.append(makePickList("0", "notification_groups_"+action_id, groupsAllArr, notifyGroupsArr, "", event_listener));
	sb.append("</div>");
	sb.append("</div>");
	
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Repository Action : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select 'NONE','No Action' from dual union all  select 'CHECKOUT','Check Out' from dual union all select 'CHECKIN','Check In' from dual union all select 'CANCEL','Cancel Checkout' from dual";
	sb.append(makeCombo(conn, sql, "", "size=1 id=repository_action onchange=\"saveMadFlowStateActionField(this, '"+action_id+"');\"", repository_action,0));
	sb.append("</div>");
	sb.append("</div>");


	
	sb.append("</div>");
	sb.append("</div>");
	
	
	return sb.toString();
}


//********************************************************************************
String makeFlowStateActionMethodList(Connection conn, HttpSession session, String action_id) {
	StringBuilder sb=new StringBuilder();
	
	String sql="select id, execution_order, execution_type, method_id, is_valid, retry_count, on_fail "+
				" from mad_flow_state_action_methods "+
				" where flow_state_action_id=? order by execution_order";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",action_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	
	if (arr.size()==0) {
		sb.append("No method added. <b><a href=\"javascript:addNewActionMethod('"+action_id+"')\">Click here</a></b>  to add a method");
		return sb.toString();
	}
	
	
	sb.append("<button type=button class=\"btn btn-success btn-sm\" onclick=addNewActionMethod('"+action_id+"')>");
	sb.append("Add New Method");
	sb.append("</button>");
	
	sb.append("<table class=\"table table-condensed table-striped table-bordered\">");
	
	sb.append("<tr class=info>");
	sb.append("<td></td>");
	sb.append("<td><b>Method</b></td>");
	sb.append("<td><b>Par.</b></td>");
	sb.append("<td><b>Type</b></td>");
	sb.append("<td><b>On Fail</b></td>");
	sb.append("<td><b>Retry#</b></td>");
	sb.append("<td><b>Active</b></td>");
	sb.append("<td></td>");
	sb.append("</tr>");
	
	sql="select id, concat(method_name, ' [',method_type,']') from mad_method order by 2"; 
	bindlist.clear();
	ArrayList<String[]> methodArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	ArrayList<String[]> execType=new ArrayList<String[]>();
	execType.add(new String[]{"SYNCH"});
	execType.add(new String[]{"ASYNCH"});
	
	ArrayList<String[]> yesnoArr=new ArrayList<String[]>();
	yesnoArr.add(new String[]{"YES"});
	yesnoArr.add(new String[]{"NO"});
	
	ArrayList<String[]> retryArr=new ArrayList<String[]>();
	for (int i=0;i<100;i++) retryArr.add(new String[]{""+i});
	
	ArrayList<String[]> onFailArr=new ArrayList<String[]>();
	onFailArr.add(new String[]{"STOP","Stop"});
	onFailArr.add(new String[]{"CONTINUE","Continue"});
		
	
	for (int i=0;i<arr.size();i++) {
		String action_method_id=arr.get(i)[0];
		String execution_order=arr.get(i)[1];
		String execution_type=arr.get(i)[2];
		String method_id=arr.get(i)[3];
		String is_valid=arr.get(i)[4];
		String retry_count=arr.get(i)[5];
		String on_fail=arr.get(i)[6];
		
		sb.append("<tr>");
		
		
		sb.append("<td align=center nowrap>");
		if (i>0) {
			sb.append("<span class=badge onclick=reorderMadFlowStateActionMethod('"+action_id+"','"+execution_order+"','UP')>");
			sb.append("<span class=\"glyphicon glyphicon-arrow-up\"></span>");
			sb.append("</span>");
		}
		
		if (i<arr.size()-1) {
			sb.append("<span class=badge onclick=reorderMadFlowStateActionMethod('"+action_id+"','"+execution_order+"','DOWN')>");
			sb.append("<span class=\"glyphicon glyphicon-arrow-down\"></span>");
			sb.append("</span>");
		}
		sb.append("</td>");
		

		
		sb.append("<td>");
		sb.append(makeComboArr(methodArr, "", "size=1 id=method_id  onchange=\"saveMadFlowStateActionMethodField(this, '"+action_method_id+"');\"", method_id, 0));
		sb.append("</td>");
		
		sb.append("<td align=center>");
		sb.append("<button type=button class=\"btn btn-primary btn-sm\" onclick=setMadFlowStateActionMethodParameters('"+action_method_id+"')>");
		sb.append("<span class=\"glyphicon glyphicon-edit\"></span>");
		sb.append("</button>");
		sb.append("</td>");
		
		sb.append("<td>");
		sb.append(makeComboArr(execType, "", "size=1 id=execution_type  onchange=\"saveMadFlowStateActionMethodField(this, '"+action_method_id+"');\"", execution_type, 90));
		sb.append("</td>");
		
		sb.append("<td>");
		sb.append(makeComboArr(onFailArr, "", "size=1 id=on_fail  onchange=\"saveMadFlowStateActionMethodField(this, '"+action_method_id+"');\"", on_fail, 100));
		sb.append("</td>");
		
		sb.append("<td>");
		sb.append(makeComboArr(retryArr, "", "size=1 id=retry_count  onchange=\"saveMadFlowStateActionMethodField(this, '"+action_method_id+"');\"", retry_count, 80));
		sb.append("</td>");
		
		sb.append("<td>");
		sb.append(makeComboArr(yesnoArr, "", "size=1 id=is_valid  onchange=\"saveMadFlowStateActionMethodField(this, '"+action_method_id+"');\"", is_valid, 80));
		sb.append("</td>");

		

		sb.append("<td align=center>");
		sb.append("<button type=button class=\"btn btn-danger btn-sm\" onclick=removeMadFlowStateActionMethod('"+action_id+"','"+action_method_id+"')>");
		sb.append("<span class=\"glyphicon glyphicon-remove\"></span>");
		sb.append("</button>");
		sb.append("</td>");

		sb.append("</tr>");
		
	}
	sb.append("</table>");
	return sb.toString();
}

//********************************************************************************
String makeUserEditor(
		Connection conn,
		HttpSession session,
		String user_id
		) {
	
	
	String sql="";
	sql="select username, email, fname, lname , valid, lang, authentication_method  from tdm_user where id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",user_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String username=arr.get(0)[0];
	String email=arr.get(0)[1];
	String fname=arr.get(0)[2];
	String lname=arr.get(0)[3];
	String is_valid=arr.get(0)[4];
	String lang=arr.get(0)[5];
	String authentication_method=arr.get(0)[6];
	
	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=user_editor_"+user_id+">");
	
	if (checkrole(session, "ADMIN")) { 
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-12\" align=right>");
		sb.append("<button type=button class=\"btn btn-sm btn-warning\" onclick=\"javascript:setMadUserPassword('"+user_id+"');\">");
		sb.append("<span class=\"glyphicon glyphicon-lock\">");
		sb.append(" Set Password " );
		sb.append("</span>");
		sb.append("</button>");
		sb.append(" ");
		
		if (!username.equals("admin")) {
			sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:deleteMadUser('"+user_id+"');\">");
			sb.append("<span class=\"glyphicon glyphicon-remove\">");
			sb.append(" Delete User \"" + username +"\"" );
			sb.append("</span>");
			sb.append("</button>");
			sb.append(" ");
		}
	}
	
	
	
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">User Name : </label>");
	sb.append("</div>");
	
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("username", username, " disabled onchange=\"saveMadUserField(this, '"+user_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Email : </label>");
	sb.append("</div>");
	
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("email", email, " onchange=\"saveMadUserField(this, '"+user_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">First Name : </label>");
	sb.append("</div>");
	
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("fname", fname, " onchange=\"saveMadUserField(this, '"+user_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Last Name : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("lname", lname, " onchange=\"saveMadUserField(this, '"+user_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	

	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Active : </label>");
	sb.append("</div>");	
	sb.append("<div class=\"col-md-9\">");
	sql="select 'Y', 'Yes' from dual union all select 'N', 'No' from dual";
	sb.append(makeCombo(conn, sql, "", "size=1 id=valid onchange=\"saveMadUserField(this, '"+user_id+"');\"", is_valid, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	String event_listener="";
	
	if (checkrole(session, "ADMIN")) {
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Roles : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sql="select id, description from tdm_role order by 2";
		bindlist.clear();
		ArrayList<String[]> rolesAllArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		sql="select role_id,description " 
			+"	from tdm_user_role ur, tdm_role r " 
			+"	where user_id=? " 
			+"	and role_id=r.id " 
			+"	order by 2";
		

		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",user_id});
		ArrayList<String[]> userRolesArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		event_listener="javascript:addRemoveUserRole(\""+user_id+"\",\"#\");";
		sb.append(makePickList("0", "group_roles_"+user_id, rolesAllArr, userRolesArr, "", event_listener));
		sb.append("</div>");
		sb.append("</div>");
	}
	
	
	
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Group Membership : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select id, group_name from mad_group order by 2";
	bindlist.clear();
	ArrayList<String[]> groupsAllArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	sql="select group_id, group_name " 
		+"	from mad_group_members m, tdm_user u, mad_group g " 
		+"	where member_type='USER' and member_id=? " 
		+"	and member_id=u.id  and group_id=g.id " 
		+"	order by 2";
	

	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",user_id});
	ArrayList<String[]> grpMemArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	event_listener="javascript:addRemoveUserMembership(\""+user_id+"\",\"#\");";
	sb.append(makePickList("0", "group_membership_"+user_id, groupsAllArr, grpMemArr, "", event_listener));
	sb.append("</div>");
	sb.append("</div>");
	
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Language : </label>");
	sb.append("</div>");	
	sb.append("<div class=\"col-md-9\">");
	sql="select lang, lang_desc from mad_lang order by 2";
	sb.append(makeCombo(conn, sql, "", " id=lang onchange=\"saveMadUserField(this, '"+user_id+"');\"", lang, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Authentication Method : </label>");
	sb.append("</div>");	
	sb.append("<div class=\"col-md-9\">");
	sql="select 'SYSTEM','System Default' from dual union all select 'LOCAL','Local' from dual union all select 'LDAP','Ldap' from dual";
	sb.append(makeCombo(conn, sql, "", "size=1 id=authentication_method onchange=\"saveMadUserField(this, '"+user_id+"');\"", authentication_method, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
		
	sb.append("</div>");
	sb.append("</div>");
	
	
	return sb.toString();
}

//********************************************************************************
String makeGroupEditor(
		Connection conn,
		HttpSession session,
		String group_id
		) {
	
	
	String sql="";
	sql="select group_name, group_type, common_email_address, manager_user_id, group_description  from mad_group where id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",group_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String group_name=arr.get(0)[0];
	String group_type=arr.get(0)[1];
	String common_email_address=arr.get(0)[2];
	String manager_user_id=arr.get(0)[3];
	String group_description=arr.get(0)[4];

	
	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=group_editor_"+group_id+">");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" align=right>");
	sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:deleteMadGroup('"+group_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-remove\">");
	sb.append(" Delete Group \"" + group_name +"\"" );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Group Name : </label>");
	sb.append("</div>");
	
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("group_name", group_name, " onchange=\"saveMadGroupField(this, '"+group_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Group Type : </label>");
	sb.append("</div>");

	sql="select 'USER', 'User Group' from dual union all select 'NOTIFICATION','Notification Group' from dual";
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeCombo(conn, sql, "", "id=group_type disabled  onchange=\"saveMadGroupField(this, '"+group_id+"');\"", group_type, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	

	if (group_type.equals("USER")) {
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Manager : </label>");
		sb.append("</div>");
		sql="select id, concat(fname, ' ', lname) from tdm_user where valid='Y' order by 2";
		sb.append("<div class=\"col-md-9\">");
		sb.append(makeCombo(conn, sql, "", "id=manager_user_id   onchange=\"saveMadGroupField(this, '"+group_id+"');\"", manager_user_id, 0));
		sb.append("</div>");
		sb.append("</div>");
	}
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Common Email Address : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("common_email_address", common_email_address, "onchange=\"saveMadGroupField(this, '"+group_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Description : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append("<textarea rows=2 style=\"width:100%\" id=group_description onchange=\"saveMadGroupField(this, '"+group_id+"');\" >"+group_description+"</textarea>");
	sb.append("</div>");
	sb.append("</div>");
	
	
	String event_listener="";
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Users In Group : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select id, concat(username,  '  [',lname, ', ', fname,']') from tdm_user order by 2";
	bindlist.clear();
	ArrayList<String[]> usersAllArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	sql="select member_id, concat(username,  '  [',lname, ', ', fname,']') " 
		+"	from mad_group_members m, tdm_user u  " 
		+"	where member_type='USER' and group_id=? " 
		+"	and member_id=u.id  " 
		+"	order by 2";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",group_id});
	ArrayList<String[]> usersInGrpArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	event_listener="javascript:addRemoveGroupMember(\""+group_id+"\",\"#\",\"USER\");";
	
	sb.append(makePickList("0", "users_in_group_"+group_id, usersAllArr, usersInGrpArr, "", event_listener));
	sb.append("</div>");
	sb.append("</div>");

	
	sb.append("<div class=row>"); 
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Groups In Group : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select id, group_name from mad_group where id!=? order by 2";
	//user group can only have user groups
	if (group_type.equals("USER")) 
		sql="select id, group_name from mad_group where id!=? and group_type='USER' order by 2";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",group_id});
	ArrayList<String[]> groupsAllArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	sql="select member_id, group_name " 
		+"	from mad_group_members m, mad_group u  " 
		+"	where member_type='GROUP' and group_id=? " 
		+"	and member_id=u.id  " 
		+"	order by 2";


	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",group_id});
	ArrayList<String[]> groupsInGrpArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	event_listener="javascript:addRemoveGroupMember(\""+group_id+"\",\"#\",\"GROUP\");";
	sb.append(makePickList("0", "groups_in_group_"+group_id, groupsAllArr, groupsInGrpArr, "", event_listener));
	sb.append("</div>");
	sb.append("</div>");
	
	
	if (group_type.equals("USER")) {
		
		sb.append("<div class=row>"); 
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Permissions Granted : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		sql="select id, permission_name from mad_permission  order by 2";
		bindlist.clear();
		ArrayList<String[]> permsAllArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		sql="select permission_id, permission_name " 
			+"	from mad_group_permission m, mad_permission p  " 
			+"	where  group_id=? " 
			+"	and permission_id=p.id  " 
			+"	order by 2";


		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",group_id});
		ArrayList<String[]> permsInGrpArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		event_listener="javascript:addRemoveGroupPermission(\""+group_id+"\",\"#\");";
		sb.append(makePickList("0", "permissions_in_group_"+group_id, permsAllArr, permsInGrpArr, "", event_listener));
		sb.append("</div>");
		sb.append("</div>");
		
		
		
		
		sb.append("<div class=row>"); 
		sb.append("<div class=\"col-md-3\" align=right>");
		sb.append("<label class=\"label label-info\">Role Grant/Revoke : </label>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-9\">");
		
		sb.append("<button type=button class=\"bt btn-sm btn-success\" onclick=assignRoleToGroup('"+group_id+"','GRANT')>");
		sb.append("<span class=\"glyphicon glyphicon-plus\"> Grant a Role to Group ["+group_name+"]</span>");
		sb.append("</button>");
		
		sb.append(" ");
		
		sb.append("<button type=button class=\"bt btn-sm btn-danger\" onclick=assignRoleToGroup('"+group_id+"','REVOKE')>");
		sb.append("<span class=\"glyphicon glyphicon-minus\"> Revoke a Role from Group ["+group_name+"]</span>");
		sb.append("</button>");

		sb.append("</div>");
		sb.append("</div>");
	} //if (group_type.equals("USER"))
	
		
	sb.append("</div>");
	sb.append("</div>");
	
	
	return sb.toString();
}


//********************************************************************************
String makeEmailTemplateEditor(
		Connection conn,
		HttpSession session,
		String email_template_id
		) {
	
	
	String sql="";
	sql="select template_name, email_subject, email_body, from_type, from_email, from_name from mad_email_template where id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",email_template_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String template_name=arr.get(0)[0];
	String email_subject=arr.get(0)[1];
	String email_body=arr.get(0)[2];
	String from_type=arr.get(0)[3];
	String from_email=arr.get(0)[4];
	String from_name=arr.get(0)[5];
	
	
	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=email_template_editor_"+email_template_id+">");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" align=right>");
	sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:deleteMadEmailTemplate('"+email_template_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-remove\">");
	sb.append(" Delete Template \"" + template_name +"\"" );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Template Name : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("template_name", template_name, " onchange=\"saveMadEmailTemplateField(this, '"+email_template_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Sender Type: </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	ArrayList<String[]> arrFType=new ArrayList<String[]>();
	arrFType.add(new String[]{"FIXED","Fixed Email Sender"});
	arrFType.add(new String[]{"OPENER","Request Opener"});
	arrFType.add(new String[]{"ACTION","Action Taker"});
	sb.append(makeComboArr(arrFType, "", "id=from_type  onchange=\"saveMadEmailTemplateField(this, '"+email_template_id+"');\"", from_type, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Fixed Sender Email Address : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("from_email", from_email, " onchange=\"saveMadEmailTemplateField(this, '"+email_template_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Fixed Sender Name : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("from_name", from_name, " onchange=\"saveMadEmailTemplateField(this, '"+email_template_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");

	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Email Subject : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("email_subject", email_subject, " onchange=\"saveMadEmailTemplateField(this, '"+email_template_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Email Body : </label>");
	sb.append("<a href=\"javascript:showNotificationParams();\"><span class=badge>?</span></a>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append("<textarea rows=8 style=\"width:100%\" id=email_body onchange=\"saveMadEmailTemplateField(this, '"+email_template_id+"');\" >"+email_body+"</textarea>");
	sb.append("</div>");
	sb.append("</div>");
	
		
	sb.append("</div>");
	sb.append("</div>");
	
	
	return sb.toString();
}

//********************************************************************************
void updateMadPlatformParameterValue(
		Connection conn,
	HttpSession session,
	String platform_id,
	String flex_field_id,
	String new_value) {
	
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select id from mad_platform_fields where platform_id=? and flex_field_id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",platform_id});
	bindlist.add(new String[]{"INTEGER",flex_field_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==0) {
		bindlist.clear();
		sql="insert into mad_platform_fields (platform_id,flex_field_id,field_value ) values(?,?,?) ";
		bindlist.add(new String[]{"INTEGER",platform_id});
		bindlist.add(new String[]{"INTEGER",flex_field_id});
		bindlist.add(new String[]{"STRING",new_value});
		execDBConf(conn, sql, bindlist);
	} else{
		bindlist.clear();
		sql="update  mad_platform_fields set  field_value=? where platform_id=? and flex_field_id=? ";
		bindlist.add(new String[]{"STRING",new_value});
		bindlist.add(new String[]{"INTEGER",platform_id});
		bindlist.add(new String[]{"INTEGER",flex_field_id});
		execDBConf(conn, sql, bindlist);
		
		String mad_platform_field_id=arr.get(0)[0];
		
		createGenericHistory(conn, session, "UPDATE", "mad_platform_fields", mad_platform_field_id, "field_value"); 

	}
}

//********************************************************************************
void addRemovePlatformEnv(
		Connection conn,
		HttpSession session,
		String environment_id,
		String addremove,
		String platform_id) {
	
	String sql="insert into mad_platform_env (environment_id,platform_id ) values (?,?)";
	if (addremove.equals("REMOVE"))
		sql="delete from mad_platform_env where environment_id=? and platform_id=?";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",environment_id});
	bindlist.add(new String[]{"INTEGER",platform_id});
	
	execDBConf(conn, sql, bindlist);
	
}

//********************************************************************************
void addRemoveGroupMember(
		Connection conn,
		HttpSession session,
		String group_id,
		String member_type,
		String addremove,
		String member_id) {
	
	String sql="insert into mad_group_members (group_id,member_id, member_type ) values (?,?,?)";
	if (addremove.equals("REMOVE"))
		sql="delete from mad_group_members where group_id=? and member_id=? and member_type=?";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",group_id});
	bindlist.add(new String[]{"INTEGER",member_id});
	bindlist.add(new String[]{"STRING",member_type}); 
	
	execDBConf(conn, sql, bindlist);
	
}


//********************************************************************************
void addRemoveUserMembership(
		Connection conn,
		HttpSession session,
		String user_id,
		String addremove,
		String group_id) {
	
	String sql="insert into mad_group_members (group_id, member_id, member_type ) values (?,?,'USER')";
	if (addremove.equals("REMOVE"))
		sql="delete from mad_group_members where group_id=? and member_id=? and member_type='USER'";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",group_id});
	bindlist.add(new String[]{"INTEGER",user_id});
	
	execDBConf(conn, sql, bindlist);
	
}


//********************************************************************************
void addRemoveRequestTypeApplication(
		Connection conn,
		HttpSession session,
		String request_type_id,
		String addremove,
		String application_id) {
	
	String sql="insert into mad_request_type_application (request_type_id, application_id ) values (?,?)";
	if (addremove.equals("REMOVE"))
		sql="delete from mad_request_type_application where request_type_id=? and application_id=?";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",request_type_id});
	bindlist.add(new String[]{"INTEGER",application_id});
	
	execDBConf(conn, sql, bindlist);
	
}

//********************************************************************************
void addRemoveRequestTypeEnvironment(
		Connection conn,
		HttpSession session,
		String request_type_id,
		String addremove,
		String environment_id) {
	

	String sql="insert into mad_request_type_environment (request_type_id, environment_id ) values (?,?)";
	if (addremove.equals("REMOVE"))
		sql="delete from mad_request_type_environment where request_type_id=? and environment_id=?";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	bindlist.add(new String[]{"INTEGER",request_type_id});
	bindlist.add(new String[]{"INTEGER",environment_id});
	
	execDBConf(conn, sql, bindlist);
	
}

//********************************************************************************
void addRemoveDependedApplication(
		Connection conn,
		HttpSession session,
		String application_id,
		String addremove,
		String depended_application_id) {
	
	String sql="insert into mad_application_dependency (application_id, depended_application_id ) values (?,?)";
	if (addremove.equals("REMOVE"))
		sql="delete from mad_application_dependency where application_id=? and depended_application_id=? ";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",application_id});
	bindlist.add(new String[]{"INTEGER",depended_application_id});
	
	execDBConf(conn, sql, bindlist);
	
}

//********************************************************************************
void addRemoveGroupPermission(
		Connection conn,
		HttpSession session,
		String group_id,
		String addremove,
		String permission_id) {
	
	String sql="insert into mad_group_permission (group_id,permission_id ) values (?,?)";
	if (addremove.equals("REMOVE"))
		sql="delete from mad_group_permission where group_id=? and permission_id=? ";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",group_id});
	bindlist.add(new String[]{"INTEGER",permission_id});
	
	execDBConf(conn, sql, bindlist);
	
}

//********************************************************************************
void addRemoveActionGroup(
		Connection conn,
		HttpSession session,
		String flow_state_action_id,
		String addremove,
		String group_id) {
	
	String sql="insert into mad_flow_state_action_groups (group_id,flow_state_action_id ) values (?,?)";
	if (addremove.equals("REMOVE"))
		sql="delete from mad_flow_state_action_groups where group_id=? and flow_state_action_id=? ";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",group_id});
	bindlist.add(new String[]{"INTEGER",flow_state_action_id});
	
	execDBConf(conn, sql, bindlist);
	
}

//********************************************************************************
void addRemoveActionPermission(
		Connection conn,
		HttpSession session,
		String flow_state_action_id,
		String addremove,
		String permission_id) {
	
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	if (addremove.equals("REMOVE")) {
		
	}
	
	sql="insert into mad_flow_state_action_permissions (flow_state_action_id,permission_id ) values (?,?)";
	if (addremove.equals("REMOVE"))
		sql="delete from mad_flow_state_action_permissions where flow_state_action_id=? and permission_id=? ";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",flow_state_action_id});
	bindlist.add(new String[]{"INTEGER",permission_id});
	
	execDBConf(conn, sql, bindlist);
	
}


//********************************************************************************
void addRemoveStateEditPermission(
		Connection conn,
		HttpSession session,
		String flow_state_id,
		String addremove,
		String permission_id) {
	
	String sql="insert into mad_flow_state_edit_permissions (flow_state_id,permission_id ) values (?,?)";
	if (addremove.equals("REMOVE"))
		sql="delete from mad_flow_state_edit_permissions where flow_state_id=? and permission_id=? ";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",flow_state_id});
	bindlist.add(new String[]{"INTEGER",permission_id});
	
	execDBConf(conn, sql, bindlist);
	
}
//********************************************************************************
void addRemoveUserRole(
		Connection conn,
		HttpSession session,
		String user_id,
		String addremove,
		String role_id) {
	
	String sql="insert into tdm_user_role (user_id, role_id ) values (?,?)";
	if (addremove.equals("REMOVE"))
		sql="delete from tdm_user_role where user_id=? and role_id=? ";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",user_id});
	bindlist.add(new String[]{"INTEGER",role_id});
	
	execDBConf(conn, sql, bindlist);
	
}
//********************************************************************************
void reorderTableOrderByGroup(
		Connection conn,
		HttpSession session,
		String table_name,
		String table_id,
		String updown,
		String group_field_name,
		String order_field_name,
		String group_field_id
		) {
	
	String sql="";
	ArrayList<String[]> arr=new ArrayList<String[]>();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String curr_order="";
	String swap_id="";
	String swap_order="";
	
	sql="select  " + order_field_name + " from " + table_name + " where id=?";
	
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",table_id});

	arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==0) {
		System.out.println("current order not found !");
		return;
	}
	curr_order=arr.get(0)[0];
	
	
	//DOWN
	sql="select  id," + order_field_name + " from " + table_name + " where "+group_field_name+"=? and "+order_field_name+">? order by 2 ";
	if (updown.equals("UP"))
		sql="select  id, " + order_field_name + " from " + table_name + " where "+group_field_name+"=? and "+order_field_name+"<? order by 2 desc ";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",group_field_id});
	bindlist.add(new String[]{"INTEGER",curr_order});
	
	arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==0) {
		System.out.println("swap record not found !");
		return;
	}
	
	swap_id=arr.get(0)[0];
	swap_order=arr.get(0)[1];
	
	
	sql="update " + table_name +  " set " + order_field_name  + "=? where id=?";

	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",swap_order});
	bindlist.add(new String[]{"INTEGER",table_id});
	execDBConf(conn, sql, bindlist);
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",curr_order});
	bindlist.add(new String[]{"INTEGER",swap_id});
	execDBConf(conn, sql, bindlist);
		
}



//********************************************************************************
String makeMadEnvironmentEditor(
		Connection conn,
		HttpSession session,
		String environment_id,
		String active_platform_type_id) {
	
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();

	sql="select environment_name, permission, on_error_action, deployment_slot_id from mad_environment where id=?";
	bindlist.add(new String[]{"INTEGER",environment_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==0) return "Environment Not Found";
	

	String environment_name=arr.get(0)[0];
	String permission_id=arr.get(0)[1];
	String on_error_action=arr.get(0)[2];
	String deployment_slot_id=arr.get(0)[3];
	
	StringBuilder sb=new StringBuilder();
	StringBuilder sbEnvPlatBody=new StringBuilder();
	
	
	
	
	sb.append(makePlatformHeader(environment_id));
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Environment Name : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("environment_name", environment_name, " onchange=\"saveMadEnvironmentField(this, '"+environment_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Action on Error : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	ArrayList<String[]> arrErrAct=new ArrayList<String[]>();
	arrErrAct.add(new String[]{"CONTINUE","> Continue next step"});
	arrErrAct.add(new String[]{"STOP","! Stop"});
	arrErrAct.add(new String[]{"ROLLBACK","< Rollback"});
	
	sb.append(makeComboArr(arrErrAct, "", "size=1 id=on_error_action onchange=\"saveMadEnvironmentField(this, '"+environment_id+"');\"", on_error_action, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Deployment Plan : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select id, slot_name from mad_deployment_slot where is_valid='YES'  order by 2";
	bindlist.clear();
	ArrayList<String[]> slotsAllArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	sb.append(makeComboArr(slotsAllArr, "", "id=deployment_slot_id onchange=\"saveMadEnvironmentField(this, '"+environment_id+"');\"", deployment_slot_id, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Permissions Needed : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select id, concat(permission_name,' [',permission_level,']') from mad_permission  order by 2";
	bindlist.clear();
	ArrayList<String[]> permsAllArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	sb.append(makeComboArr(permsAllArr, "", "id=permission onchange=\"saveMadEnvironmentField(this, '"+environment_id+"');\"", permission_id, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	
	
	
	sb.append("<div class=row>");  //row 2
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Platforms in Environment : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	
	sql=" select 0, 'ALL' platform_type_name from dual " + 
		" union all " + 
		"select id, platform_type_name  from mad_platform_type " + 
		"	where id in " + 
		"	( " + 
		"	select platform_type_id  " + 
		"	from mad_platform p,mad_platform_env e  " + 
		"	where e.platform_id=p.id  " + 
		"	and e.environment_id=? " + 
		"	)";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",environment_id});
	ArrayList<String[]> platTypeList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	sb.append("<div role=\"tabpanel\">");
	sb.append("<ul class=\"nav nav-pills\" role=\"tablist\">");
	
	sbEnvPlatBody.setLength(0);
	int active_count=0;
	for (int pt=0;pt<platTypeList.size();pt++) {
		String platform_type_id=platTypeList.get(pt)[0];
		String platform_type_name=platTypeList.get(pt)[1];
		
		
sql="select  id, platform_name from mad_platform";
		
		bindlist.clear();
		if (!platform_type_id.equals("0")) {
			sql=sql + " where platform_type_id=?";
			bindlist.add(new String[]{"INTEGER",platform_type_id});
		}
		
		ArrayList<String[]> source_arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		sql="select  pe.platform_id, p.platform_name "+
			" from mad_platform_env pe, mad_platform p "+
			" where "+
			" pe.platform_id=p.id " + 
			" and pe.environment_id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",environment_id});
		if (!platform_type_id.equals("0")) {
			sql=sql +" and p.platform_type_id=? ";
			bindlist.add(new String[]{"INTEGER",platform_type_id});
		}
			
		
		ArrayList<String[]> picked_arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		
		String active="";

		if (platform_type_id.equals(active_platform_type_id)) {active="active";active_count++;}
		if (pt==platTypeList.size()-1 && active_count==0) active="active";
		
		sb.append("<li role=\"presentation\" class=\""+active+"\"><a href=\"#tab_"+environment_id+"_"+platform_type_id+"\" aria-controls=\"tab_"+environment_id+"_"+platform_type_id+"\" role=\"tab\" data-toggle=\"tab\">");
		sb.append(platform_type_name + "<span class=\"badge\">"+picked_arr.size()+"</span>");
		sb.append("</a></li>");
		
		
		
		
		
		sbEnvPlatBody.append("<div role=\"tabpanel\" class=\"tab-pane "+active+"\" id=\"tab_"+environment_id+"_"+platform_type_id+"\">");
		
		
		
		
		String event_listener="javascript:addRemovePlatformEnv(\""+environment_id+"\",\"#\",\""+platform_type_id+"\");";
		sbEnvPlatBody.append(makePickList("0", "pick_platform_"+environment_id+"_"+platform_type_id, source_arr, picked_arr, "",event_listener));	
	
		sbEnvPlatBody.append("</div>");			
		
		
	}
	sb.append("</ul>");
	
	sb.append("<div class=\"tab-content\">");
	sb.append(sbEnvPlatBody.toString());
	sb.append("</div>");
	
	sb.append("</div>"); //role=tabpanel

	sb.append("</div>"); ////row 2
	sb.append("</div>"); ////col-md-9
	
	return sb.toString();
}

//********************************************************************************
String makeMadFlexFieldList(
		Connection conn,
		HttpSession session) {
	String sql="";
	StringBuilder sb=new StringBuilder();
	
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select id, title from mad_flex_field order by 2";
	bindlist.clear();
	
	String filter=nvl((String) session.getAttribute("search_for_flexible_fields"),"");
	if (filter.trim().length()>0) {
		sql="select id, title from mad_flex_field where title like ? order by 2";
		filter=filter.replace(" ", "%");
		filter="%"+filter+"%";
		bindlist.add(new String[]{"STRING",filter});
	}
	
	
	ArrayList<String[]> fieldList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	StringBuilder sbAppContent=new StringBuilder();
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();

	for (int i=0;i<fieldList.size();i++) {
		
		String field_id=fieldList.get(i)[0];
		String field_title=fieldList.get(i)[1];
		
		
		sbAppContent.setLength(0);
		sbAppContent.append(makeFlexFieldEditor(conn, session, field_id));
		
		collapseItems.add(new String[]{"colFlexFieldContent_"+field_id,field_title,sbAppContent.toString(),"field.png"});
		
	}

	sb.append(makeFlexFieldHeader(session));
	sb.append(addCollapse("listFlexField",collapseItems));
	
	return sb.toString();
}

//********************************************************************************
String makeMadRequestTypeList(
		Connection conn,
		HttpSession session) {
	String sql="";
	StringBuilder sb=new StringBuilder();
	
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select id, request_type,request_group from mad_request_type order by request_group";
	bindlist.clear();
	ArrayList<String[]> typeList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	StringBuilder sbAppContent=new StringBuilder();
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();

	for (int i=0;i<typeList.size();i++) {
		
		String request_type_id=typeList.get(i)[0];
		String request_type_name=typeList.get(i)[1];
		String request_group=typeList.get(i)[2];
		
		
		sbAppContent.setLength(0);
		sbAppContent.append(makeRequestTypeEditor(conn, session, request_type_id));
		
		collapseItems.add(new String[]{"colReqTypeContent_"+request_type_id,request_type_name,sbAppContent.toString(),request_group+".png"});
		
	}

	sb.append(makeRequestTypeHeader());
	sb.append(addCollapse("listReqType",collapseItems));
	
	return sb.toString();
}


//********************************************************************************
String makeMadPlatformTypeList(
		Connection conn,
		HttpSession session) {
	String sql="";
	StringBuilder sb=new StringBuilder();
	
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select id, platform_type_name  from mad_platform_type order by 2";
	bindlist.clear();
	ArrayList<String[]> typeList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	StringBuilder sbContent=new StringBuilder();
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();

	for (int i=0;i<typeList.size();i++) {
		
		String platform_type_id=typeList.get(i)[0];
		String platform_type_name=typeList.get(i)[1];
		
		
		sbContent.setLength(0);
		sbContent.append(makePlatformTypeEditor(conn, session, platform_type_id));
		
		collapseItems.add(new String[]{"colPlatTypeContent_"+platform_type_id,platform_type_name,sbContent.toString(),"plattype.png"});
		
	}

	sb.append(makePlatformTypeHeader());
	
	sb.append(addCollapse("listPlatType",collapseItems));
	
	return sb.toString();
}




//********************************************************************************
String makeMadRepositoryList(
		Connection conn,
		HttpSession session) {
	String sql="";
	StringBuilder sb=new StringBuilder();
	
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select id, repository_name from mad_repository";
	bindlist.clear();
	ArrayList<String[]> repoList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	StringBuilder sbContent=new StringBuilder();
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();

	
	for (int i=0;i<repoList.size();i++) {
		
		String repository_id=repoList.get(i)[0];
		String repository_name=repoList.get(i)[1];
		
		
		
		
		sbContent.setLength(0);
		sbContent.append(makeRepositoryEditor(conn, session, repository_id));
		
		collapseItems.add(new String[]{"colRepositoryContent_"+repository_id,repository_name,sbContent.toString(),"repository.png"});

		
		
		
	}

	
	sb.append(makeRepositoryHeader());
	sb.append(addCollapse("listRepository",collapseItems));

	return sb.toString();
}


//********************************************************************************
String makeMadStringList(
		Connection conn,
		HttpSession session) {
	String sql="";
	StringBuilder sb=new StringBuilder();
	
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select id, string_name, lang from mad_string order by 2,3 ";
	bindlist.clear();
	
	
	String filter=nvl((String) session.getAttribute("search_for_strings"),"");
	if (filter.trim().length()>0) {
		sql="select id, string_name, lang from mad_string where string_name like ? order by 2";
		filter=filter.replace(" ", "%");
		filter="%"+filter+"%";
		bindlist.add(new String[]{"STRING",filter});
	}
	
	ArrayList<String[]> strList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	StringBuilder sbContent=new StringBuilder();
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();

	
	for (int i=0;i<strList.size();i++) {
		
		String string_id=strList.get(i)[0];
		String string_name=strList.get(i)[1];
		String lang=strList.get(i)[2];
		
		if (lang.length()>0) 
			string_name=string_name+" ("+lang+")";
		
		
		sbContent.setLength(0);
		sbContent.append(makeStringEditor(conn, session, string_id));
		
		collapseItems.add(new String[]{"colStringContent_"+string_id,string_name,sbContent.toString(),"string.png"});

		
		
		
	}

	
	sb.append(makeStringHeader(session));
	sb.append(addCollapse("listString",collapseItems));

	return sb.toString();
}



//********************************************************************************
String makeMadLangList(
		Connection conn,
		HttpSession session) {
	String sql="";
	StringBuilder sb=new StringBuilder();
	
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select id, lang, lang_desc from mad_lang order by 2 ";
	bindlist.clear();
	
	ArrayList<String[]> langList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	StringBuilder sbContent=new StringBuilder();
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();

	
	for (int i=0;i<langList.size();i++) {
		
		String lang_id=langList.get(i)[0];
		String lang=langList.get(i)[1];
		String lang_desc=langList.get(i)[2];
		
		if (lang.length()>0) 
			lang_desc=lang_desc+" ("+lang+")";
		
		
		sbContent.setLength(0);
		sbContent.append(makeLangEditor(conn, session, lang_id));
		
		collapseItems.add(new String[]{"colLangContent_"+lang_id,lang_desc,sbContent.toString(),"lang.png"});

		
		
		
	}

	
	sb.append(makeLangHeader());
	sb.append(addCollapse("listLang",collapseItems));

	return sb.toString();
}

//********************************************************************************
String makeMadClassList(
		Connection conn,
		HttpSession session) {
	String sql="";
	StringBuilder sb=new StringBuilder();
	
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select id, class_name, class_type from mad_class order by class_type";
	bindlist.clear();
	ArrayList<String[]> classList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	StringBuilder sbContent=new StringBuilder();
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();

	
	
	for (int i=0;i<classList.size();i++) {
		
		String class_id=classList.get(i)[0];
		String class_name=classList.get(i)[1];
		String class_type=classList.get(i)[2];
		
		sbContent.setLength(0);
		sbContent.append(makeClassEditor(conn, session, class_id));
		
		collapseItems.add(new String[]{"colClassContent_"+class_id,class_type+" : "+class_name,sbContent.toString(),"class.png"});

		
		
		
	}

	
	sb.append(makeClassHeader());
	sb.append(addCollapse("listClass",collapseItems));

	return sb.toString();
}
//********************************************************************************
String makeMadDriverList(
		Connection conn,
		HttpSession session) {
	String sql="";
	StringBuilder sb=new StringBuilder();
	
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select id, driver_name from mad_driver order by driver_type";
	bindlist.clear();
	ArrayList<String[]> driverList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	StringBuilder sbContent=new StringBuilder();
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();

	
	for (int i=0;i<driverList.size();i++) {
		
		String driver_id=driverList.get(i)[0];
		String driver_name=driverList.get(i)[1];
		
		sbContent.setLength(0);
		sbContent.append(makeDriverEditor(conn, session, driver_id));
		
		collapseItems.add(new String[]{"colDriverContent_"+driver_id,driver_name,sbContent.toString(),"driver.png"});

		
		
		
	}

	
	sb.append(makeDriverHeader());
	sb.append(addCollapse("listDriver",collapseItems));

	return sb.toString();
}


//********************************************************************************
String makeMadModifierGroupList(
		Connection conn,
		HttpSession session) {
	String sql="";
	StringBuilder sb=new StringBuilder();
	
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select id, modifier_group_name from mad_modifier_group";
	bindlist.clear();
	ArrayList<String[]> modiGrList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	StringBuilder sbContent=new StringBuilder();
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();

	
	for (int i=0;i<modiGrList.size();i++) {
		
		String modifier_group_id=modiGrList.get(i)[0];
		String modifier_group_name=modiGrList.get(i)[1];
		
		
		sbContent.setLength(0);
		sbContent.append(makeMadModifierGroupEditor(conn, session, modifier_group_id));
		
		collapseItems.add(new String[]{"colModifierGroupContent_"+modifier_group_id,modifier_group_name,sbContent.toString(),"modifier.png"});

		
		
		
	}

	
	sb.append(makeModifierGroupHeader());
	sb.append(addCollapse("listModifierGroup",collapseItems));

	return sb.toString();
}


//********************************************************************************
String makeMadPlatformList(
		Connection conn,
		HttpSession session) {
	String sql="";
	StringBuilder sb=new StringBuilder();
	
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select id, platform_name, edit_permission_id from mad_platform order by 2";
	bindlist.clear();
	ArrayList<String[]> platList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	StringBuilder sbContent=new StringBuilder();
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();

	for (int i=0;i<platList.size();i++) {
		
		String platform_id=platList.get(i)[0];
		String platform_name=platList.get(i)[1];
		String edit_permission_id=nvl(platList.get(i)[2],"-9999");
		
		boolean to_be_listed=false;
		
		if (checkrole(session, "MADRM") || checkrole(session, "ADMIN") || (checkrole(session, "MADPLN") && checkpermissionById(session, edit_permission_id)) )
				 to_be_listed=true;
		
		if (!to_be_listed) continue;
		
		sbContent.setLength(0);
		sbContent.append(makePlatformEditor(conn, session, platform_id));
		
		collapseItems.add(new String[]{
				"colPlatformContent_"+platform_id,
				platform_name,
				sbContent.toString(),
				"platform.png",
				"makeMadPlatformEditor('"+platform_id+"');"
				});
		
	}

	if (checkrole(session, "MADRM") || checkrole(session, "ADMIN"))
		sb.append(makePlatformHeader());
	sb.append(addCollapse("listPlatform",collapseItems));
	
	return sb.toString();
}

//********************************************************************************
String makeMadEnvironmentList(
		Connection conn,
		HttpSession session) {
	String sql="";
	StringBuilder sb=new StringBuilder();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select id, environment_name from mad_environment order by 2";
	ArrayList<String[]> envList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	sb.append(makeEnvHeader());
	
	StringBuilder sbEnvPlat=new StringBuilder();
	StringBuilder sbEnvPlatBody=new StringBuilder();
	
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();

	for (int i=0;i<envList.size();i++) {
		
		String environment_id=envList.get(i)[0];
		String environment_name=envList.get(i)[1];
		
		sbEnvPlat.setLength(0);
		sbEnvPlat.append(makeMadEnvironmentEditor(conn, session, environment_id,"0"));

		
		collapseItems.add(new String[]{
				"NOFADE_colEnvPlat_"+environment_id,
				environment_name,
				sbEnvPlat.toString(),
				"environment.png",
				"makeMadEvironmentEditor('"+environment_id+"','0');"
				});
		
	}
	
	sb.append(addCollapse("listEnvPlat",collapseItems));
	
	return sb.toString();
}

//********************************************************************************
String makeMadApplicationList(
		Connection conn,
		HttpSession session) {
	String sql="";
	StringBuilder sb=new StringBuilder();
	
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select id, application_name from mad_application order by 2";
	bindlist.clear();
	ArrayList<String[]> appList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	StringBuilder sbAppContent=new StringBuilder();
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();

	for (int i=0;i<appList.size();i++) {
		
		String application_id=appList.get(i)[0];
		String application_name=appList.get(i)[1];
		
		
		sbAppContent.setLength(0);
		sbAppContent.append(makeApplicationEditor(conn, session, application_id));
		
		collapseItems.add(new String[]{
				"colAppContent_"+application_id,
				application_name,
				sbAppContent.toString(),
				"application.png",
				"makeMadApplicationEditor('"+application_id+"');"});
		
	}

	sb.append(makeAppHeader());
	sb.append(addCollapse("listApp",collapseItems));
	
	return sb.toString();
}

//********************************************************************************
String makeMadPermissionList(
		Connection conn,
		HttpSession session) {
	String sql="";
	StringBuilder sb=new StringBuilder();
	
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select id, permission_name from mad_permission order by 2";
	bindlist.clear();
	ArrayList<String[]> permList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	StringBuilder sbAppContent=new StringBuilder();
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();

	for (int i=0;i<permList.size();i++) {
		
		String permission_id=permList.get(i)[0];
		String permission_name=permList.get(i)[1];
		
		
		sbAppContent.setLength(0);
		sbAppContent.append(makePermissionEditor(conn, session, permission_id));
		
		collapseItems.add(new String[]{
				"colPermissionContent_"+permission_id,
				permission_name,
				sbAppContent.toString(),
				"application.png",
				"makeMadPermissionEditor('"+permission_id+"');"});
		
	}

	sb.append(makePermissionHeader());
	sb.append(addCollapse("listPermission",collapseItems));
	
	return sb.toString();
}

//********************************************************************************
String makeMadMethodList(
		Connection conn,
		HttpSession session) {
	String sql="";
	StringBuilder sb=new StringBuilder();
	
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select id, method_name, method_type from mad_method order by 2";
	bindlist.clear();
	ArrayList<String[]> methodList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	StringBuilder sbAppContent=new StringBuilder();
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();

	for (int i=0;i<methodList.size();i++) {
		
		String method_id=methodList.get(i)[0];
		String method_name=methodList.get(i)[1];
		String method_type=methodList.get(i)[2];

		
		sbAppContent.setLength(0);
		sbAppContent.append(makeMethodEditor(conn, session, method_id));
		
		
		
		collapseItems.add(new String[]{
				"colMethodContent_"+method_id,
				method_name,
				sbAppContent.toString(),
				"method_"+method_type+".png",
				"makeMadMethodEditor('"+method_id+"');"});
		
	}

	sb.append(makeMethodHeader());
	sb.append(addCollapse("listMethod",collapseItems));
	
	return sb.toString();
}

//********************************************************************************
String makeMadFlowList(
		Connection conn,
		HttpSession session) {
	String sql="";
	StringBuilder sb=new StringBuilder();
	
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select id, flow_name from mad_flow order by 2";
	bindlist.clear();
	ArrayList<String[]> flowList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	StringBuilder sbAppContent=new StringBuilder();
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();

	for (int i=0;i<flowList.size();i++) {
		
		String flow_id=flowList.get(i)[0];
		String flow_name=flowList.get(i)[1];
		
		
		sbAppContent.setLength(0);
		sbAppContent.append(makeFlowEditor(conn, session, flow_id));
		
		collapseItems.add(new String[]{
				"colFlowContent_"+flow_id,
				flow_name,
				sbAppContent.toString(),
				"flow.png",
				"makeMadFlowEditor('"+flow_id+"');"});
		
	}

	sb.append(makeFlowHeader());
	sb.append(addCollapse("listFlow",collapseItems));
	
	return sb.toString();
}




//********************************************************************************
String makeMadDeploymentSlotList(
		Connection conn,
		HttpSession session) {
	String sql="";
	StringBuilder sb=new StringBuilder();
	
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select id, slot_type, slot_name from mad_deployment_slot order by 2";
	bindlist.clear();
	ArrayList<String[]> slotList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	StringBuilder sbAppContent=new StringBuilder();
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();

	for (int i=0;i<slotList.size();i++) {
		
		String slot_id=slotList.get(i)[0];
		String slot_type=slotList.get(i)[1];
		String slot_name=slotList.get(i)[2];
		
		
		sbAppContent.setLength(0);
		sbAppContent.append(makeDeploymentSlotEditor(conn, session, slot_id));
		
		collapseItems.add(new String[]{
				"colDeploymentSlotContent_"+slot_id,
				slot_name,
				sbAppContent.toString(),
				"slot_"+slot_type+".png",
				"makeMadDeploymentSlotEditor('"+slot_id+"');"});
		
	}

	sb.append(makeDeploymentSlotHeader());
	sb.append(addCollapse("listDeploymentSlot",collapseItems));
	
	return sb.toString();
}

//********************************************************************************
String makeMadDashSqlList(
		Connection conn,
		HttpSession session) {
	String sql="";
	StringBuilder sb=new StringBuilder();
	
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select id, sql_name from mad_dashboard_sql order by 2";
	bindlist.clear();
	ArrayList<String[]> sqlList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	StringBuilder sbAppContent=new StringBuilder();
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();

	for (int i=0;i<sqlList.size();i++) {
		
		String sql_id=sqlList.get(i)[0];
		String sql_name=sqlList.get(i)[1];
		
		
		sbAppContent.setLength(0);
		sbAppContent.append(makeDashSqlEditor(conn, session, sql_id));
		
		collapseItems.add(new String[]{
				"colDashSqlContent_"+sql_id,
				sql_name,
				sbAppContent.toString(),
				"sql.png",
				"makeMadDashSqlEditor('"+sql_id+"');"});
		
	}

	sb.append(makeDashSqlHeader());
	sb.append(addCollapse("listDashSql",collapseItems));
	
	return sb.toString();
}


//********************************************************************************
String makeMadDashParameterList(
		Connection conn,
		HttpSession session) {
	String sql="";
	StringBuilder sb=new StringBuilder();
	
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select id, parameter_title from mad_dashboard_parameter order by 2";
	bindlist.clear();
	ArrayList<String[]> paramList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	StringBuilder sbAppContent=new StringBuilder();
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();

	for (int i=0;i<paramList.size();i++) {
		
		String parameter_id=paramList.get(i)[0];
		String parameter_title=paramList.get(i)[1];
		
		
		sbAppContent.setLength(0);
		sbAppContent.append(makeDashParameterEditor(conn, session, parameter_id));
		
		collapseItems.add(new String[]{
				"colDashParameterContent_"+parameter_id,
				parameter_title,
				sbAppContent.toString(),
				"filter.png",
				"makeMadDashParameterEditor('"+parameter_id+"');"});
		
	}

	sb.append(makeDashParameterHeader());
	sb.append(addCollapse("listDashParameter",collapseItems));
	
	return sb.toString();
}
//********************************************************************************
String makeMadDashViewList(
		Connection conn,
		HttpSession session) {
	String sql="";
	StringBuilder sb=new StringBuilder();
	
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select id, view_name from mad_dashboard_view order by 2";
	bindlist.clear();
	ArrayList<String[]> viewList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	StringBuilder sbAppContent=new StringBuilder();
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();

	for (int i=0;i<viewList.size();i++) {
		
		String view_id=viewList.get(i)[0];
		String view_name=viewList.get(i)[1];
		
		
		sbAppContent.setLength(0);
		sbAppContent.append(makeDashViewEditor(conn, session, view_id));
		
		collapseItems.add(new String[]{
				"colDashViewContent_"+view_id,
				view_name,
				sbAppContent.toString(),
				"view.png",
				"makeMadDashViewEditor('"+view_id+"');"});
		
	}

	sb.append(makeDashViewHeader());
	sb.append(addCollapse("listDashView",collapseItems));
	
	return sb.toString();
}
//********************************************************************************
String makeMadUserList(
		Connection conn,
		HttpSession session) {
	String sql="";
	StringBuilder sb=new StringBuilder();
	
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select id, concat(username, ' [', lname, ', ', fname, ' ]')   from tdm_user order by 2";
	bindlist.clear();
	
	String filter=nvl((String) session.getAttribute("search_for_users"),"");
	if (filter.trim().length()>0) {
		sql="select id, concat(username, ' [', lname, ', ', fname, ' ]')   from tdm_user where concat(username,' ',fname,' ',lname) like ? order by 2";
		filter=filter.replace(" ", "%");
		filter="%"+filter+"%";
		bindlist.add(new String[]{"STRING",filter});
	}
	
	ArrayList<String[]> userList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	StringBuilder sbAppContent=new StringBuilder();
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();

	for (int i=0;i<userList.size();i++) {
		
		String user_id=userList.get(i)[0];
		String user_name=userList.get(i)[1];
		
		
		sbAppContent.setLength(0);
		sbAppContent.append(makeUserEditor(conn, session, user_id));
		
		collapseItems.add(new String[]{
				"colUserContent_"+user_id,
				user_name,
				sbAppContent.toString(),
				"user.png",
				"makeMadUserEditor('"+user_id+"');"});
		
	}

	sb.append(makeUserHeader(session));
	sb.append(addCollapse("listUser",collapseItems));
	
	return sb.toString();
}


//********************************************************************************
String makeDatabaseHeader() {
	StringBuilder sb=new StringBuilder();
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"javascript:addNewDatabase();\">");
	sb.append("<span class=\"glyphicon glyphicon-plus\">");
	sb.append(" Add New Database");
	sb.append("</span>");
	sb.append("</button>");
	
	sb.append("</div>");
	sb.append("</div>");

	return sb.toString();
}


//********************************************************************************
String makeDatabaseList(
		Connection conn,
		HttpSession session) {
	String sql="";
	StringBuilder sb=new StringBuilder();
	
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select id, name from tdm_envs order by 2";
	bindlist.clear();
	ArrayList<String[]> dbList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	StringBuilder sbAppContent=new StringBuilder();
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();

	for (int i=0;i<dbList.size();i++) {
		
		String db_id=dbList.get(i)[0];
		String db_name=dbList.get(i)[1];
		
		
		sbAppContent.setLength(0);
		sbAppContent.append(makeDatabaseEditor(conn, session, db_id)); 
		
		collapseItems.add(new String[]{
				"colDatabaseContent_"+db_id,
				db_name,
				sbAppContent.toString(),
				"database.png",
				"makeDatabaseEditor('"+db_id+"');"});
		
	}

	sb.append(makeDatabaseHeader());
	sb.append(addCollapse("listDatabase",collapseItems));
	
	return sb.toString();
}


//********************************************************************************
String makeDatabaseEditor(
		Connection conn,
		HttpSession session,
		String db_id
		) {
	
	
	String sql="";
	sql="select name,  db_driver, db_connstr, db_username, db_password   from tdm_envs where id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",db_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String db_name=arr.get(0)[0];
	String db_driver=arr.get(0)[1];
	String db_connstr=arr.get(0)[2];
	String db_username=arr.get(0)[3];
	String db_password=arr.get(0)[4];

	
	StringBuilder sb=new StringBuilder();
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" id=database_editor_"+db_id+">");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\" align=right>");
	
	
	sb.append("<button type=button class=\"btn btn-sm btn-warning\" onclick=\"javascript:testConnectionByDbId('"+db_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-ok-circle\">");
	sb.append(" Test Connection");
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");
	
	sb.append("<button type=button class=\"btn btn-sm btn-danger\" onclick=\"javascript:deleteDatabase('"+db_id+"');\">");
	sb.append("<span class=\"glyphicon glyphicon-remove\">");
	sb.append(" Delete Database \"" + db_name +"\"" );
	sb.append("</span>");
	sb.append("</button>");
	sb.append(" ");
	
	
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Database Name : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("name", db_name, " onchange=\"saveDatabaseField(this, '"+db_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">JDBC Driver : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sql="select ref_name, ref_desc from tdm_ref where ref_type='DB_TYPE' order by 2";
	bindlist.clear();
	ArrayList<String[]> arrDbDrv=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	sb.append(makeComboArr(arrDbDrv, "", "id=db_driver onchange=\"saveDatabaseField(this, '"+db_id+"');\"", db_driver, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">JDBC Connection Str : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("db_connstr", db_connstr, " onchange=\"saveDatabaseField(this, '"+db_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");

	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Username : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makeText("db_username", db_username, " onchange=\"saveDatabaseField(this, '"+db_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");

	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-3\" align=right>");
	sb.append("<label class=\"label label-info\">Password : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-9\">");
	sb.append(makePassword("db_password", db_password, " onchange=\"saveDatabaseField(this, '"+db_id+"');\"", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("</div>");
	sb.append("</div>");

	
	return sb.toString();
}

//**************************************************************************
void addDatabase(Connection conn, HttpSession session, String database_name) {
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="insert into tdm_envs (app_id, name) values (0,?)";
	bindlist.clear();
	bindlist.add(new String[]{"STRING",database_name});
	
	execDBConf(conn, sql, bindlist);


}

//**************************************************************************
boolean deleteDatabase(Connection conn, HttpSession session, String id) {
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="delete from tdm_envs where id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	createGenericHistory(conn, session, "DELETE", "tdm_envs", id, "ALL"); 
	
	boolean is_ok=execDBConf(conn, sql, bindlist);
	
	return is_ok;
}
//***************************************************************************
boolean testConnectionByDbId(Connection conn, HttpSession session, String db_id, StringBuilder errmsg) {
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String sql="select db_driver, db_connstr, db_username, db_password from tdm_envs where id=?";
	
	
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",db_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr==null || arr.size()==0) {
		errmsg.append("Db not found.");
		return false;
	}
	
	String db_driver=arr.get(0)[0];
	String db_connstr=arr.get(0)[1];
	String db_username=arr.get(0)[2];
	String db_password=arr.get(0)[3];
	
	sql="select flexval1, flexval2 from  tdm_ref where ref_type='DB_TYPE' and ref_name=?";
	
	bindlist.clear();
	bindlist.add(new String[]{"STRING",db_driver});
	arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr==null || arr.size()==0) {
		errmsg.append("Db type definition not found. : " + db_driver);
		return false;
	}
	
	String db_type=arr.get(0)[0];
	String template=arr.get(0)[1];
	
	String test_sql="";
	
	if (template.contains("|")) 
		test_sql=template.split("\\|")[0];
	
	boolean test_ok=false;
	Connection conntest = null;

	
	
	try {
		Class.forName(db_driver.replace("*",""));
		conntest = DriverManager.getConnection(db_connstr, db_username, db_password);
		
		Statement stmt = conntest.createStatement();
		ResultSet rset = stmt.executeQuery(test_sql);
		while (rset.next()) {rset.getString(1);	}
		return true;
				
	} catch (Exception ignore) {
		String conn_error=ignore.getMessage();
		errmsg.append(conn_error);
		ignore.printStackTrace();
		return false;
		
	} finally {
		if (conntest!=null) try{conntest.close();} catch(Exception e) {}
	}
		
		
	
	
	
}
//********************************************************************************
String makeMadGroupList(
		Connection conn,
		HttpSession session) {
	String sql="";
	StringBuilder sb=new StringBuilder();
	
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select id, group_type, group_name from mad_group order by group_type desc, group_name";
	bindlist.clear();
	ArrayList<String[]> groupList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	StringBuilder sbAppContent=new StringBuilder();
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();

	for (int i=0;i<groupList.size();i++) {
		
		String group_id=groupList.get(i)[0];
		String group_type=groupList.get(i)[1];
		String group_name=groupList.get(i)[2];
		
		
		sbAppContent.setLength(0);
		sbAppContent.append(makeGroupEditor(conn, session, group_id));
		
		collapseItems.add(new String[]{
				"colGroupContent_"+group_id,
				group_name,
				sbAppContent.toString(),
				"group_"+group_type+".png",
				"makeMadGroupEditor('"+group_id+"');"});
		
	}

	sb.append(makeGroupHeader());
	sb.append(addCollapse("listGroup",collapseItems));
	
	return sb.toString();
}


//********************************************************************************
String makeEmailTemplateList(
		Connection conn,
		HttpSession session) {
	String sql="";
	StringBuilder sb=new StringBuilder();
	
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select id, template_name from mad_email_template order by 2";
	bindlist.clear();
	ArrayList<String[]> templateList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	StringBuilder sbAppContent=new StringBuilder();
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();

	for (int i=0;i<templateList.size();i++) {
		
		String email_template_id=templateList.get(i)[0];
		String email_template_type=templateList.get(i)[1];
		
		
		sbAppContent.setLength(0);
		sbAppContent.append(makeEmailTemplateEditor(conn, session, email_template_id));
		
		collapseItems.add(new String[]{
				"colEmailTemplateContent_"+email_template_id,
				email_template_type,
				sbAppContent.toString(),
				"email.png",
				"makeMadEmailTemplateEditor('"+email_template_id+"');"});
		
	}

	sb.append(makeEmailTemplateHeader());
	sb.append(addCollapse("listEmailTemplate",collapseItems));
	
	return sb.toString();
}

//********************************************************************************
String makeMultipleFlexFieldEditor(
		Connection conn,
		HttpSession session,
		String flex_field_id,
		String platform_type_id
		) {
	
	StringBuilder sb=new StringBuilder();
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	ArrayList<String[]> arr=new ArrayList<String[]>();
	
	sql="select title from mad_flex_field where id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",flex_field_id});
	arr=getDbArrayConf(conn, sql, 1, bindlist);
	String title=arr.get(0)[0];
	
	
	
	//mad_platform_type_flex_fields
	String param_table="mad_platform_fields";
	String ref_table="mad_platform";
	String ref_field_name="platform_id";
	String ref_table_name_field="platform_name";
	

	sql="select m.id, "+ref_table_name_field+" f_name, field_value "+
		" from " + param_table + " m, " +ref_table + " ref  "+
		" where flex_field_id=? "+
		" and m."+ref_field_name+"=ref.id and platform_type_id=?";

	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",flex_field_id});
	bindlist.add(new String[]{"INTEGER",platform_type_id});
	
	arr=getDbArrayConf(conn, sql, 100, bindlist);
	
	sb.append("<span class=\"label label-warning\">"+title+"</span>");
	sb.append("<hr>"); 
	
	ArrayList<String[]> fexValsArr=new ArrayList<String[]>();
	
	for (int i=0;i<arr.size();i++) {
		
		String id=arr.get(i)[0];
		String ref_name=arr.get(i)[1];
		String curr_val=arr.get(i)[2];
		String is_mandatory="NO";
		String is_editable="YES";
		String is_visible="YES";
		
		String fire_event="saveMultiplePlatformFlexField("+id+",#)";
		
		sb.append("<div class=row>");
		
		sb.append("<div class=\"col-md-12\" align=center>");
		sb.append("<br>"); 
		sb.append("<label class=\"label label-info\">"+ref_name+" : </label>");
		sb.append("<br>"); 
		sb.append("</div>");
		sb.append("</div>");
		
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-8\" align=right>");
		sb.append(makeFlexField(conn, session, "multiple_flex_field_editor", i, "0",flex_field_id, "DUMMY_PARAMETER_NAME", fexValsArr, is_mandatory, is_editable, is_visible, curr_val, fire_event));
		sb.append("</div>");
		sb.append("</div>");
		
	}
	
	return sb.toString();
}
//********************************************************************************
void saveMultiplePlatformFlexField(
		Connection conn,
		HttpSession session,
		String platform_field_id,
		String new_value) {
	
	
	String sql="update mad_platform_fields set field_value=? where id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	bindlist.add(new String[]{"STRING",new_value});
	bindlist.add(new String[]{"INTEGER",platform_field_id});

	
	execDBConf(conn, sql, bindlist);
}
 
//********************************************************************************
boolean isDirectManager(
		Connection conn,
		HttpSession session,
		String request_user_id,
		String current_user_id) {

	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String sql="select 1 from mad_group g " + 
				" where group_type='USER' and manager_user_id=? " + 
				" and exists ( " + 
				" 	select 1  " + 
				" 	from mad_group_members  " + 
				"	where group_id=g.id  " + 
				"	and member_type='USER'  " + 
				"	and member_id=?)  "; 
	bindlist.add(new String[]{"INTEGER",current_user_id});
	bindlist.add(new String[]{"INTEGER",request_user_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	
	if (arr.size()==0) return false;
	
	return true;
}

//********************************************************************************
boolean isGroupMember(
		Connection conn,
		HttpSession session,
		String request_user_id,
		String current_user_id) {

	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String sql="select 1 from mad_group g " + 
				" where group_type='USER'   " + 
				" and exists ( " + 
				" 	select 1  " + 
				" 	from mad_group_members  " + 
				"	where group_id=g.id  " + 
				"	and member_type='USER'  " + 
				"	and member_id=? and member_id<>? )  " + 
				" and exists ( " + 
				" 	select 1  " + 
				" 	from mad_group_members  " + 
				"	where group_id=g.id  " + 
				"	and member_type='USER'  " + 
				"	and member_id=?)  "; 
	bindlist.add(new String[]{"INTEGER",current_user_id});
	bindlist.add(new String[]{"INTEGER",request_user_id});
	bindlist.add(new String[]{"INTEGER",request_user_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	
	if (arr.size()==0) return false;
	
	return true;
}



//********************************************************************************
ArrayList<String> getGroupMembers(
		Connection conn,
		HttpSession session,
		String current_user_id) {
	ArrayList<String> ret1=new ArrayList<String>();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String sql="select id from mad_group g " + 
				" where group_type='USER'   " + 
				" and exists ( " + 
				" 	select 1  " + 
				" 	from mad_group_members  " + 
				"	where group_id=g.id  " + 
				"	and member_type='USER'  " + 
				"	and member_id=? )  "; 
	bindlist.add(new String[]{"INTEGER",current_user_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	for (int i=0;i<arr.size();i++) {
		String group_id=arr.get(i)[0];
		sql="select member_id from mad_group_members where group_id=? and  member_type='USER'";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",group_id});
		
		ArrayList<String[]> users=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		for (int u=0;u<users.size();u++) {
			ret1.add(users.get(u)[0]);
		}
		
	}
	return ret1;
	
}


//********************************************************************************
ArrayList<String> getGroupManagers(
		Connection conn,
		HttpSession session,
		String current_user_id) {
	ArrayList<String> ret1=new ArrayList<String>();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String sql="select manager_user_id from mad_group g " + 
				" where group_type='USER'   " + 
				" and exists ( " + 
				" 	select 1  " + 
				" 	from mad_group_members  " + 
				"	where group_id=g.id  " + 
				"	and member_type='USER'  " + 
				"	and member_id=? )  "; 
	bindlist.add(new String[]{"INTEGER",current_user_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	for (int i=0;i<arr.size();i++) {
		String manager_user_id=arr.get(i)[0];
		ret1.add(manager_user_id);
	}
	return ret1;
	
}
//********************************************************************************
ArrayList<String[]> getRouteNextActionList(
		Connection conn,
		HttpSession session,
		String request_id, 
		String flow_state_id
		) {
	ArrayList<String[]> ret1=new ArrayList<String[]>();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String sql="select sa.id,action_name, sap.permission_id  " + 
				" 	from mad_flow_state_action sa , mad_flow_state_action_permissions sap " + 
				"	where sa.id=sap.flow_state_action_id " + 
				"   and action_type='HUMAN' and next_state_id>0 and flow_state_id=? " + 
				"	order by action_name";
	bindlist.add(new String[]{"INTEGER",flow_state_id});
	
	ArrayList<String[]> arrState=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	sql="select entuser from mad_request where id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	String request_user_id=arr.get(0)[0];
	
	
	ArrayList<String> checkArr=new ArrayList<String>();
	for (int i=0;i<arrState.size();i++) {
		String action_id=arrState.get(i)[0];
		String action_name=arrState.get(i)[1];
		String permission_id=arrState.get(i)[2];
		
		//duplicate check
		if (checkArr.contains(action_id)) continue;
		

		if (Integer.parseInt(permission_id)<0) {
			if (!checkPreDefinedPermissions(conn,session,permission_id,request_user_id)) 
				continue;
			
		}
		else 
			if (!checkpermissionById(session, permission_id)) {
				//System.out.println("Has Permission  ("+permission_id+") : Not  OK");
				continue;
			}
			
		
		ret1.add(new String[]{action_id, action_name});
		checkArr.add(action_id);
		
	}
	
	
	return ret1;
}

//********************************************************************************
boolean checkPreDefinedPermissions(Connection conn, HttpSession session, String permission_id, String request_user_id) {
	

	
	String curruser=""+((Integer) session.getAttribute("userid"));
	int s=Integer.parseInt(permission_id);
	
	switch(s) {
		case -1 : {
			if (!request_user_id.equals(curruser)) {
				//System.out.println("Request Opener  : Not OK");
				return false;
			}
		return true;
		}
		case -2 : {
			if (!isDirectManager(conn, session, request_user_id, curruser)) {
				//System.out.println("Direct Manager  : Not OK");
				return false;
			}
			return true;
		}
		case -3 : {
			if (!checkrole(session, "ADMIN")) {
				//System.out.println("Is Admin  : Not OK");
				return false;
			}
			return true;
		}
		case -4 : {
			if (!checkrole(session, "MADRM")) {
				//System.out.println("Is Relase Manager  : Not OK");
				return false;
			}
			return true;
		}
		case -5 : {
			if (!isGroupMember(conn, session, request_user_id, curruser)) {
				//System.out.println("Is Group Memeber  : Not OK");
				return false;
			}
			return true;
		}
		default : 
			return false;
		
	}
	
	
}
//********************************************************************************
String makeRouteMenu(
		Connection conn,
		HttpSession session,
		String request_id) {
	
	
	String sql="";
	StringBuilder sb=new StringBuilder();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select status, flow_id, is_saved from mad_request r, mad_request_type t where r.request_type_id=t.id and r.id=? ";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==0) {
		sb.append("<span class=\"label label-danger\"> <big><big>Sorry. No request to route ! </big></big></span>");
		return sb.toString();
	}
	
	
	sql="select wpc.id from mad_request_work_package rwp, tdm_work_package wpc " + 
			"	where work_package_id=wpc.id " + 
			"	and wpc.status in ('RUNNING','ASSIGNED') " + 
			" 	and exists (select 1 from tdm_master m where m.id=master_id and m.status!='FREE' ) "+
			"	and request_id=?";
	
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		ArrayList<String[]> inProgressArr=getDbArrayConf(conn, sql, 1, bindlist);
		if (inProgressArr.size()==1) {
			String wpc_id=inProgressArr.get(0)[0];
			sb.append("<span class=\"label label-danger\"> <big><big>Deployment work package ["+wpc_id+"] is inprogress. Cannot route the request ! </big></big></span>");

			return sb.toString();
		}
	
	String request_status=arr.get(0)[0];
	String flow_id=arr.get(0)[1];
	String is_saved=arr.get(0)[2];
	
	if (!is_saved.equals("YES")) {
		sb.append("<span class=\"label label-danger\"> <big><big>Request is not saved. Save it first! </big></big></span>");
		return sb.toString();
	}
	
	if (flow_id.length()==0) {
		sb.append("<span class=\"label label-danger\"> <big><big>Sorry. No flow defined for this request type! </big></big></span>");
		return sb.toString();
	}
	
	sql="select id, flow_state_id, flow_state_action_id, action_note " + 
		"	from mad_request_flow_logs " +
		"	where request_id=? and flow_id=? and status='OPEN'";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	bindlist.add(new String[]{"INTEGER",flow_id});
	
	arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==0) {
		sb.append("<center><span class=\"label label-danger\"><big><big>  No routing found for this request ! </big></big></span></center>");

		return sb.toString();
	}
	
	String request_flow_log_id=arr.get(0)[0];
	String flow_state_id=arr.get(0)[1];
	String flow_state_action_id=arr.get(0)[2];
	String action_note=arr.get(0)[3];
	
	sql="select state_title from mad_flow_state where id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",flow_state_id});
	
	arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String flow_state_title="";
	
	if (arr.size()==1) flow_state_title=arr.get(0)[0];
	
	
	sb.append("<input type=hidden id=routing_request_id value="+request_id+">");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-4\" align=right>");
	sb.append("<label class=\"label label-info\">"+decodeStringTitle(conn, session, "Request Id", "SYS_REQ_REQUEST_ID", false)+" : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-8\">");
	sb.append("<span class=badge>"+request_id+"</span>");
	sb.append("</div>");
	sb.append("</div>");
	
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-4\" align=right>");
	sb.append("<label class=\"label label-info\">"+decodeStringTitle(conn, session, "Request Title", "SYS_REQ_REQUEST_TITLE", false)+" : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-8\">");
	sql="select description from mad_request where id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	arr=getDbArrayConf(conn, sql, 1, bindlist);
	String request_description="";
	if (arr.size()==1) request_description=arr.get(0)[0];
	sb.append("<span class=badge>"+request_description+"</span>");
	sb.append("</div>");
	sb.append("</div>");
	

	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-4\" align=right>");
	sb.append("<label class=\"label label-info\">"+decodeStringTitle(conn, session, "Current Status", "SYS_REQ_ROUTE_CURRENT_STATUS", false)+" : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-8\">");
	sb.append("<span class=badge>"+nvl(flow_state_title,request_status)+"</span>");
	sb.append("</div>");
	sb.append("</div>");
	
	/*
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-4\" align=right>");
	sb.append("<label class=\"label label-info\">"+decodeStringTitle(conn, session, "Time Spent", "SYS_REQ_ROUTE_TIME_SPENT", false)+" : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-8\">");
	
	
	ArrayList<String[]> hourArr=new ArrayList<String[]>();
	for (int a=0;a<120;a++) hourArr.add(new String[]{""+a,""+a});
	
	ArrayList<String[]> minArr=new ArrayList<String[]>();
	for (int a=0;a<59;a++) minArr.add(new String[]{""+a,""+a});
	
	
	sb.append("<table>");
	sb.append("<tr>");
	sb.append("<td>");
	sb.append("<span class=\"glyphicon glyphicon-hourglass\"></span>");
	sb.append("</td>");
	sb.append("<td>");
	sb.append(makeComboArr(hourArr, "", "size=1 id=time_spent_hour", "0", 80));
	sb.append("</td>");
	sb.append("<td>");
	sb.append(". Hours ");
	sb.append("</td>");
	sb.append("<td>");
	sb.append(makeComboArr(minArr, "", "size=1 id=time_spent_minute", "0", 80));
	sb.append("</td>");
	sb.append("<td>");
	sb.append(". Minutes ");
	sb.append("</td>");
	sb.append("</tr>");
	sb.append("</table>");
	
	
	sb.append("</div>");
	sb.append("</div>");
	*/
	
	sb.append("<hr>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-4\" align=right>");
	sb.append("<label class=\"label label-info\">"+decodeStringTitle(conn, session, "Action", "SYS_REQ_ROUTE_ACTION", false)+" : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-8\">");
	
	ArrayList<String[]> actionArr=getRouteNextActionList(conn,session,request_id, flow_state_id);
	if (actionArr.size()==0) {
		sb.setLength(0);
		sb.append("<center><span class=\"label label-danger\"><big><big>  "+
				decodeStringTitle(conn, session, "No action to take!", "SYS_WARNING_NO_ACTION_TO_TAKE", false)+
				" </big></big></span></center>");
		 
		return sb.toString();
	}
	sb.append(makeComboArr(actionArr, "", "id=flow_state_action_id  onchange=\"saveMadRequestFlowLogField(this, '"+request_flow_log_id+"');\"  ", flow_state_action_id, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-4\" align=right>");
	sb.append("<label class=\"label label-info\">"+decodeStringTitle(conn, session, "Action Note", "SYS_REQ_ROUTE_ACTION_NOTE", false)+" : </label>");
	sb.append("</div>");
	sb.append("<div class=\"col-md-8\">");
	sb.append("<textarea rows=3 style=\"width:100%;\" id=action_note onchange=\"saveMadRequestFlowLogField(this, '"+request_flow_log_id+"');\" >"+action_note+"</textarea>");
	sb.append("</div>");
	sb.append("</div>");
	

	
	
	return sb.toString();
}
//********************************************************************************

String Min2Hour(String min) {
	String ret1=min;
	int min_int=0;
	try {min_int=Integer.parseInt(min);} catch(Exception e) {}
	String hour=""+(min_int/60);
	String minute=""+(min_int % 60);
	if (minute.length()==1) minute=minute+"0";
	return hour+"."+minute;
	
}

//********************************************************************************
String showRouteLogs(
		Connection conn,
		HttpSession session,
		String request_id) {
	
	
	String sql="";
	StringBuilder sb=new StringBuilder();
	StringBuilder sbContent=new StringBuilder();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String flow_id="0";
	
	sql="select flow_id from mad_request_type where id=(select request_type_id from mad_request where id=?)";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	if (arr.size()==1) flow_id=arr.get(0)[0];
	
	sql="select \n" + 
		"	log.id,  \n" + 
		"	curr_state_date, \n" + 
		"	log.status log_status, \n" + 
		"	currs.state_title curr_state, \n" + 
		"	next_state_date, \n" + 
		"	concat (lname, ', ', fname, ' [',username,']') action_user, \n" + 
		"	(select action_name from mad_flow_state_action where id=flow_state_action_id) action, \n" + 
		"	action_note, \n" + 
		"	(select state_title from mad_flow_state where id=next_state_id) next_state, \n" + 
		"	time_spent \n" + 
		"	from  \n" + 
		"	mad_request_flow_logs log, mad_flow_state currs, tdm_user curru \n" + 
		"	where log.request_id=? and log.status='CLOSED' \n" + 
		"	and log.curr_state_user=curru.id \n" + 
		"	and log.flow_state_id=currs.id \n" + 
		"	order by log.id desc";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	
	arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();
	
	
	
	if (arr.size()==0)  sb.append("<h4>"+decodeStringTitle(conn, session, "No log found!", "SYS_REQ_ROUTE_INFO_WARNING_NO_LOG_FOUND", false)+"</h4>");
	
	
	
	for (int i=0;i<arr.size();i++) {
		String log_id=arr.get(i)[0];
		String curr_state_date=arr.get(i)[1];
		String log_status=arr.get(i)[2];
		String curr_state=arr.get(i)[3];
		String next_state_date=arr.get(i)[4];
		String action_user=arr.get(i)[5];
		String action=arr.get(i)[6];
		String action_note=arr.get(i)[7];
		String next_state=arr.get(i)[8];
		String time_spent=arr.get(i)[9];
		
		String title=next_state_date + "<span class=badge>"+action+"</span>  :  <span class=\"label label-warning\">"+next_state+"</span>";
		sbContent.setLength(0);
		
		
		sbContent.append("<div class=row>");
		sbContent.append("<div class=\"col-md-4\" align=right> <span class=\"label label-info\">"+decodeStringTitle(conn, session, "Previous State Date", "SYS_REQ_ROUTE_INFO_OLD_STATE", false) +" : </span></div>");
		sbContent.append("<div class=\"col-md-8\">  " +curr_state_date+ " </div>");
		sbContent.append("</div>");
		
		sbContent.append("<div class=row>");
		sbContent.append("<div class=\"col-md-4\" align=right> <span class=\"label label-info\"> "+decodeStringTitle(conn, session, "Previous State", "SYS_REQ_ROUTE_INFO_OLD", false) +" : </span></div>");
		sbContent.append("<div class=\"col-md-8\">  " +curr_state+ " </div>");
		sbContent.append("</div>");
		
		sbContent.append("<div class=row>");
		sbContent.append("<div class=\"col-md-4\" align=right> <span class=\"label label-info\"> "+decodeStringTitle(conn, session, "Action User", "SYS_REQ_ROUTE_INFO_ACTION_USER", false) +" : </span></div>");
		sbContent.append("<div class=\"col-md-8\">  " +action_user+ "</div>");
		sbContent.append("</div>");
		
		sbContent.append("<div class=row>");
		sbContent.append("<div class=\"col-md-4\" align=right> <span class=\"label label-info\"> "+decodeStringTitle(conn, session, "Action Date", "SYS_REQ_ROUTE_INFO_ACTION_DATE", false) +" : </span></div>");
		sbContent.append("<div class=\"col-md-8\">  " +next_state_date+ " </div>");
		sbContent.append("</div>");

		sbContent.append("<div class=row>");
		sbContent.append("<div class=\"col-md-4\" align=right> <span class=\"label label-info\"> "+decodeStringTitle(conn, session, "Action Taken", "SYS_REQ_ROUTE_INFO_ACTION_TAKEN", false) +" : </span></div>");
		sbContent.append("<div class=\"col-md-8\">  " +action+ "</div>");
		sbContent.append("</div>");
		

		sbContent.append("<div class=row>");
		sbContent.append("<div class=\"col-md-4\" align=right> <span class=\"label label-info\"> "+decodeStringTitle(conn, session, "Next State", "SYS_REQ_ROUTE_INFO_NEXT_STATE", false) +" : </span></div>");
		sbContent.append("<div class=\"col-md-8\">  " +next_state+ " </div>");
		sbContent.append("</div>");
		
		sbContent.append("<div class=row>");
		sbContent.append("<div class=\"col-md-4\" align=right> <span class=\"label label-info\"> "+decodeStringTitle(conn, session, "Time Spent", "SYS_REQ_ROUTE_INFO_TIME_SPENT", false) +" : </span></div>");
		sbContent.append("<div class=\"col-md-8\">  " +Min2Hour(time_spent)+ " Hour(s) </div>");
		sbContent.append("</div>");
		
		sbContent.append("<div class=row>");
		sbContent.append("<div class=\"col-md-4\" align=right> <span class=\"label label-info\"> "+decodeStringTitle(conn, session, "Action Note", "SYS_REQ_ROUTE_INFO_ACTION_NOTE", false) +" : </span></div>");
		sbContent.append("<div class=\"col-md-8\"> <textarea disabled rows=3 style=\"width:100%;\"> " +action_note+ " </textarea></div>");
		sbContent.append("</div>");
		
		
		sbContent.append("<div class=row>");
		sbContent.append("<div class=\"col-md-4\" align=right> <span class=\"label label-info\"> "+decodeStringTitle(conn, session, "External Logs", "SYS_REQ_ROUTE_INFO_EXTERNAL_CALL", false) +" : </span></div>");
		sbContent.append("<div class=\"col-md-8\">");
		sbContent.append(addActionMethodCallSummary(conn, session, "0",log_id));
		sbContent.append("</div>");
		sbContent.append("</div>");
		
		
		collapseItems.add(new String[]{"routingLog_"+log_id,title,sbContent.toString(),"log.png",""});

		
	}

	sb.append(addCollapse("routingLogs", collapseItems));
	
	
	StringBuilder methodSb=new StringBuilder();
	
	methodSb.append(addActionMethodCallSummary(conn, session, request_id,"0"));
	
	
	StringBuilder waitingSb=new StringBuilder();
	
	//waitingSb.append(addActionMethodCallSummary(conn, session, request_id,"0"));
	waitingSb.append(getRequestWaitingList(conn, session, request_id));
	
	
	collapseItems.clear();
	
	collapseItems.add(new String[]{"tabRouteLogs",decodeStringTitle(conn, session, "Log Details", "SYS_REQ_ROUTE_INFO_LOG_DETAILS", false),sb.toString(),"log.png",""});
	
	collapseItems.add(new String[]{"tabWaitingList",decodeStringTitle(conn, session, "Waiting List", "SYS_REQ_ROUTE_INFO_WAITING_LIST", false),waitingSb.toString(),"waiting.png",""});

	collapseItems.add(new String[]{"tabMethodCalls",decodeStringTitle(conn, session, "Method Calls", "SYS_REQ_ROUTE_INFO_METHOD_CALLS", false),methodSb.toString(),"method.png",""});

	
	String flow_div="<br><br><br><div id=RequestFlowDiv style=\"background-color:#666666; overflow-x: scroll; overflow-y: scroll; \"></div>";
	String fire_event="makeMadFlowDrawingForRequest('"+flow_id+"','"+request_id+"')";
	collapseItems.add(new String[]{"tabRouteFlow",decodeStringTitle(conn, session, "Graphic Details", "SYS_REQ_ROUTE_INFO_GRAPH_DETAILS", false),flow_div,"flow.png",fire_event});
	
	
	sb.setLength(0);
	
	sb.append("<h4> "+decodeStringTitle(conn, session, "Routing Info For Request", "SYS_REQ_ROUTE_INFO_TITLE", false)+" [<span class=\"label label-info\"><big>"+request_id+"</big></span>] </h4>");

	
	sb.append(addTab("routeLogTab", collapseItems));
		
		
	return sb.toString();
}

//********************************************************************************
String showChangeLogs(
		Connection conn,
		HttpSession session,
		String request_id) {
	
	
	String sql="";
	StringBuilder sb=new StringBuilder();
	
	StringBuilder sbContent=new StringBuilder();
	
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();
	
	
	String request_group=getRequestGroup(conn, session, request_id);
	
	sb.append("<h4>Change history for : [<b>"+request_id+"</b>]</h4>");
	sb.append("<hr>");
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select "+ 
		"	description, status, date_format(deployment_date,?) deployment_date,  "+ 
		"	history_action,  "+ 
		"	concat(fname, ' ', lname) history_user,  "+ 
		"	date_format(history_date,?) history_date, "+
		" 	history_host "+ 
		"	from mad_request_history h, tdm_user u "+ 
		"	where request_id=? "+ 
		"	and history_user=u.id "+ 
		"	order by h.id desc ";
	
	bindlist.clear();
	bindlist.add(new String[]{"STRING",mysql_format});
	bindlist.add(new String[]{"STRING",mysql_format});
	bindlist.add(new String[]{"INTEGER",request_id});
		
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	//sb.append("<h4>Request Header</h4>");
	
	if (arr.size()==0) {
		sbContent.append("No history found.");
	}
	else {
		sbContent.append("<table class=\"table table-condensed table-stripted table-bordered\">");
		
		sbContent.append("<tr class=info>");
		sbContent.append("<td><b>Description</b></td>");
		sbContent.append("<td><b>Status</b></td>");
		sbContent.append("<td><b>Deployment Date</b></td>");
		sbContent.append("<td><b>Change</b></td>");
		sbContent.append("<td><b>Changed By</b></td>");
		sbContent.append("<td><b>Log Date</b></td>");
		sbContent.append("<td><b>@hostname</b></td>");
		sbContent.append("</tr>");
		
		for (int i=0;i<arr.size();i++) {
			
			String description=arr.get(i)[0];
			String status=arr.get(i)[1];
			String deployment_date=arr.get(i)[2];
			String change_type=arr.get(i)[3];
			String history_user=arr.get(i)[4];
			String history_date=arr.get(i)[5];
			String history_host=arr.get(i)[6];
			
			sbContent.append("<tr>");
			sbContent.append("<td nowrap>"+clearHtml(description)+"</td>");
			sbContent.append("<td nowrap>"+status+"</td>");
			sbContent.append("<td nowrap>"+deployment_date+"</td>");
			sbContent.append("<td nowrap class=active>"+change_type+"</td>");
			sbContent.append("<td nowrap class=active>"+history_user+"</td>");
			sbContent.append("<td nowrap class=active>"+history_date+"</td>");
			sbContent.append("<td nowrap class=active>"+history_host+"</td>");
			sbContent.append("</tr>");
			
			
		}
		
		sbContent.append("</table>");
	}
	
	collapseItems.add(new String[]{"changeLog_Req"+request_id,"Request Header",sbContent.toString(),"log.png",""});
	
	
	
	
	
	

	
	
	sql="select "+ 
			"   f.title, field_value, date_format(field_value_ts,?) field_value_ts, field_value_num, entry_type, "+
			"	history_action,  "+ 
			"	concat(fname, ' ', lname) history_user,  "+ 
			"	date_format(history_date,?) history_date, "+
			" 	history_host "+ 
			"	from mad_request_fields_history h,  mad_flex_field f, tdm_user u "+ 
			"	where  request_id=? "+ 
			"	and h.flex_field_id=f.id  " +
			"	and history_user=u.id "+ 
			"	order by h.id desc ";
		
	bindlist.clear();
	bindlist.add(new String[]{"STRING",mysql_format});
	bindlist.add(new String[]{"STRING",mysql_format});
	bindlist.add(new String[]{"INTEGER",request_id});
		
	arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	//sb.append("<h4>Request Fields</h4>");
	sbContent.setLength(0);
	
	if (arr.size()==0) {
		sbContent.append("No history found.");
	}
	else {
		
		sbContent.append("<table class=\"table table-condensed table-stripted table-bordered\">");
		
		sbContent.append("<tr class=info>");
		sbContent.append("<td><b>Field Name</b></td>");
		sbContent.append("<td><b>Text Value</b></td>");
		sbContent.append("<td><b>Date Value</b></td>");
		sbContent.append("<td><b>Numeric Value</b></td>");
		sbContent.append("<td><b>Change</b></td>");
		sbContent.append("<td><b>Changed By</b></td>");
		sbContent.append("<td><b>Log Date</b></td>");
		sbContent.append("<td><b>@hostname</b></td>");
		sbContent.append("</tr>");
		
		for (int i=0;i<arr.size();i++) {
			
			
			String field_title=arr.get(i)[0];
			String field_value=arr.get(i)[1];
			String field_value_ts=arr.get(i)[2];
			String field_value_num=arr.get(i)[3];
			String entry_type=arr.get(i)[4];
			String change_type=arr.get(i)[5];
			String history_user=arr.get(i)[6];
			String history_date=arr.get(i)[7];
			String history_host=arr.get(i)[8];
			
			if (entry_type.equals("PASSWORD") || field_title.toLowerCase().contains("password") || field_title.toLowerCase().contains("passcode")  || field_title.toLowerCase().contains("pin"))
				field_value="************";
			
			sbContent.append("<tr>");
			sbContent.append("<td nowrap>"+clearHtml(field_title)+"</td>");
			sbContent.append("<td nowrap>"+clearHtml(field_value)+"</td>");
			sbContent.append("<td nowrap>"+field_value_ts+"</td>");
			sbContent.append("<td nowrap>"+formatnum(field_value_num)+"</td>");
			sbContent.append("<td nowrap class=active>"+change_type+"</td>");
			sbContent.append("<td nowrap class=active>"+history_user+"</td>");
			sbContent.append("<td nowrap class=active>"+history_date+"</td>");
			sbContent.append("<td nowrap class=active>"+history_host+"</td>");
			sbContent.append("</tr>");
			
			
		}
		
		sbContent.append("</table>");
		
	}
		
	collapseItems.add(new String[]{"changeLog_ReqFields"+request_id,"Request Fields",sbContent.toString(),"log.png",""});	

		
	
	
	
	
	sql="select "+ 
			"	r.id linked_request_id, r.description,  "+ 
			"	history_action,  "+ 
			"	concat(fname, ' ', lname) history_user,  "+ 
			"	date_format(history_date,?) history_date, "+
			" 	history_host "+ 
			"	from mad_request_link_history h, mad_request r, tdm_user u "+ 
			"	where request_id=? and h.linked_request_id=r.id "+ 
			"	and history_user=u.id "+ 
			"	order by h.id desc ";
		
		bindlist.clear();
		bindlist.add(new String[]{"STRING",mysql_format});
		bindlist.add(new String[]{"INTEGER",request_id});
			
		arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		
		//sb.append("<h4>Linked Requests</h4>");
		sbContent.setLength(0);
		
		if (arr.size()==0) {
			sbContent.append("No history found.");
		}
		else {
			sbContent.append("<table class=\"table table-condensed table-stripted table-bordered\">");
			
			sbContent.append("<tr class=info>");
			sbContent.append("<td><b>Linked Request Id</b></td>");
			sbContent.append("<td><b>Linked Request Description</b></td>");
			sbContent.append("<td><b>Change</b></td>");
			sbContent.append("<td><b>Changed By</b></td>");
			sbContent.append("<td><b>Log Date</b></td>");
			sbContent.append("<td><b>@hostname</b></td>");
			sbContent.append("</tr>");
			
			for (int i=0;i<arr.size();i++) {
				
				String linked_request_id=arr.get(i)[0];
				String description=arr.get(i)[1];
				String change_type=arr.get(i)[2];
				String history_user=arr.get(i)[3];
				String history_date=arr.get(i)[4];
				String history_host=arr.get(i)[5];
				
				sbContent.append("<tr>");
				sbContent.append("<td nowrap>"+linked_request_id+"</td>");
				sbContent.append("<td nowrap>"+clearHtml(description)+"</td>");
				sbContent.append("<td nowrap class=active>"+change_type+"</td>");
				sbContent.append("<td nowrap class=active>"+history_user+"</td>");
				sbContent.append("<td nowrap class=active>"+history_date+"</td>");
				sbContent.append("<td nowrap class=active>"+history_host+"</td>");
				sbContent.append("</tr>");
				
				
			}
			
			sbContent.append("</table>");
		}
		

	collapseItems.add(new String[]{"changeLog_LinkReq"+request_id,"Linked Requests",sbContent.toString(),"log.png",""});
		
	
	
	
	if (request_group.equals("PACKAGE") || request_group.equals("DEPLOYMENT")) {
		
		sql="select "+ 
				"	application_name, member_name, member_path, member_version, member_order, to_skip, member_tag_info, "+
				"	history_action,  "+ 
				"	concat(fname, ' ', lname) history_user,  "+ 
				"	date_format(history_date,?) history_date, "+
				" 	history_host "+ 
				"	from mad_request_application_member_history h, mad_application a, tdm_user u "+ 
				"	where  request_id=? "+ 
				"	and h.application_id=a.id  " +
				"	and history_user=u.id "+ 
				"	order by h.id desc ";
			
			bindlist.clear();
			bindlist.add(new String[]{"STRING",mysql_format});
			bindlist.add(new String[]{"INTEGER",request_id});
				
			arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
			
			//sb.append("<h4>Items To Deploy</h4>");
			sbContent.setLength(0);
			
			if (arr.size()==0) {
				sbContent.append("No history found.");
			}
			else {
				sbContent.append("<table class=\"table table-condensed table-stripted table-bordered\">");
				
				
				
				sbContent.append("<tr class=info>");
				sbContent.append("<td><b>Application</b></td>");
				sbContent.append("<td><b>Member</b></td>");
				sbContent.append("<td><b>Full Path</b></td>");
				sbContent.append("<td><b>Version</b></td>");
				sbContent.append("<td><b>Tag Info</b></td>");
				sbContent.append("<td><b>Order</b></td>");
				sbContent.append("<td><b>Skip</b></td>");
				sbContent.append("<td><b>Change</b></td>");
				sbContent.append("<td><b>Changed By</b></td>");
				sbContent.append("<td><b>Log Date</b></td>");
				sbContent.append("<td><b>@hostname</b></td>");
				sbContent.append("</tr>");
				
				for (int i=0;i<arr.size();i++) {
					
					
					
					
					String application=arr.get(i)[0];
					String member_name=arr.get(i)[1];
					String member_path=arr.get(i)[2];
					String member_version=arr.get(i)[3];
					String member_order=arr.get(i)[4];
					String to_skip=arr.get(i)[5];
					String member_tag_info=arr.get(i)[6];
					String change_type=arr.get(i)[7];
					String history_user=arr.get(i)[8];
					String history_date=arr.get(i)[9];
					String history_host=arr.get(i)[10];
					
					sbContent.append("<tr>");
					sbContent.append("<td nowrap>"+application+"</td>");
					sbContent.append("<td nowrap>"+member_name+"</td>");
					sbContent.append("<td nowrap>"+member_path+"</td>");
					sbContent.append("<td nowrap>"+member_version+"</td>");
					sbContent.append("<td nowrap>"+member_tag_info+"</td>");
					sbContent.append("<td nowrap>"+member_order+"</td>");
					sbContent.append("<td nowrap>"+to_skip+"</td>");
					sbContent.append("<td nowrap class=active>"+change_type+"</td>");
					sbContent.append("<td nowrap class=active>"+history_user+"</td>");
					sbContent.append("<td nowrap class=active>"+history_date+"</td>");
					sbContent.append("<td nowrap class=active>"+history_host+"</td>");
					sbContent.append("</tr>");
					
					
				}
				
				sbContent.append("</table>");
				
			}
		
		
		collapseItems.add(new String[]{"changeLog_Items"+request_id,"Items To Deploy",sbContent.toString(),"log.png",""});
		
		
	} //if (request_group.equals("PACKAGE") || request_group.equals("DEPLOYMENT"))
	
	
	
	
	if (request_group.equals("DEPLOYMENT")) {
		
		sql="select "+ 
				"	application_name, environment_name, "+
				"	history_action,  "+ 
				"	concat(fname, ' ', lname) history_user,  "+ 
				"	date_format(history_date,?) history_date, "+
				" 	history_host "+ 
				"	from mad_request_app_env_history h, mad_application a, mad_environment e, tdm_user u "+ 
				"	where  request_id=? "+ 
				"	and h.application_id=a.id and h.environment_id=e.id " +
				"	and history_user=u.id "+ 
				"	order by h.id desc ";
			
			bindlist.clear();
			bindlist.add(new String[]{"STRING",mysql_format});
			bindlist.add(new String[]{"INTEGER",request_id});
				
			arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
			
			//sb.append("<h4>Application and Environment</h4>");
			sbContent.setLength(0);
			
			
			if (arr.size()==0) {
				sbContent.append("No history found.");
			}
			else {
				sbContent.append("<table class=\"table table-condensed table-stripted table-bordered\">");
				
				sbContent.append("<tr class=info>");
				sbContent.append("<td><b>Application</b></td>");
				sbContent.append("<td><b>Environment</b></td>");
				sbContent.append("<td><b>Change</b></td>");
				sbContent.append("<td><b>Changed By</b></td>");
				sbContent.append("<td><b>Log Date</b></td>");
				sbContent.append("<td><b>@hostname</b></td>");
				sbContent.append("</tr>");
				
				for (int i=0;i<arr.size();i++) {
					
					String application=arr.get(i)[0];
					String environment=arr.get(i)[1];
					String change_type=arr.get(i)[2];
					String history_user=arr.get(i)[3];
					String history_date=arr.get(i)[4];
					String history_host=arr.get(i)[5];
					
					sbContent.append("<tr>");
					sbContent.append("<td nowrap>"+application+"</td>");
					sbContent.append("<td nowrap>"+environment+"</td>");
					sbContent.append("<td nowrap class=active>"+change_type+"</td>");
					sbContent.append("<td nowrap class=active>"+history_user+"</td>");
					sbContent.append("<td nowrap class=active>"+history_date+"</td>");
					sbContent.append("<td nowrap class=active>"+history_host+"</td>");
					sbContent.append("</tr>");
					
					
				}
				
				sbContent.append("</table>");
			}
		
		collapseItems.add(new String[]{"changeLog_AppEnv"+request_id,"Application and Environment",sbContent.toString(),"log.png",""});
		
		
		
		
		
		
		
		sql="select "+ 
				"	(select application_name from mad_application a where a.id=h.application_id) application_name, "+
				"   environment_name, platform_name, f.title, field_value, entry_type, "+
				"	history_action,  "+ 
				"	concat(fname, ' ', lname) history_user,  "+ 
				"	date_format(history_date,?) history_date, "+
				" 	history_host "+ 
				"	from mad_request_env_fields_history h, mad_environment e , mad_platform p, mad_flex_field f, tdm_user u "+ 
				"	where  request_id=? "+ 
				"	and h.environment_id=e.id and h.platform_id=p.id and h.flex_field_id=f.id  " +
				"	and history_user=u.id "+ 
				"	order by h.id desc ";
			
			bindlist.clear();
			bindlist.add(new String[]{"STRING",mysql_format});
			bindlist.add(new String[]{"INTEGER",request_id});
				
			arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
			
			//sb.append("<h4>Platform and Parameters</h4>");
			sbContent.setLength(0);
			
			if (arr.size()==0) {
				sbContent.append("No history found.");
			}
			else {

				sbContent.append("<table class=\"table table-condensed table-stripted table-bordered\">");
				
				
				
				sbContent.append("<tr class=info>");
				sbContent.append("<td><b>Application</b></td>");
				sbContent.append("<td><b>Environment</b></td>");
				sbContent.append("<td><b>Platform</b></td>");
				sbContent.append("<td><b>Field Name</b></td>");
				sbContent.append("<td><b>Value</b></td>");
				sbContent.append("<td><b>Change</b></td>");
				sbContent.append("<td><b>Changed By</b></td>");
				sbContent.append("<td><b>Log Date</b></td>");
				sbContent.append("<td><b>@hostname</b></td>");
				sbContent.append("</tr>");
				
				for (int i=0;i<arr.size();i++) {
					
					
					String application=arr.get(i)[0];
					String environment_name=arr.get(i)[1];
					String platform_name=arr.get(i)[2];
					String field_title=arr.get(i)[3];
					String field_value=arr.get(i)[4];
					String entry_type=arr.get(i)[5];
					String change_type=arr.get(i)[6];
					String history_user=arr.get(i)[7];
					String history_date=arr.get(i)[8];
					String history_host=arr.get(i)[9];
					
					if (entry_type.equals("PASSWORD") || field_title.toLowerCase().contains("password") || field_title.toLowerCase().contains("passcode")  || field_title.toLowerCase().contains("pin"))
						field_value="************";
					
					sbContent.append("<tr>");
					sbContent.append("<td nowrap>"+application+"</td>");
					sbContent.append("<td nowrap>"+environment_name+"</td>");
					sbContent.append("<td nowrap>"+platform_name+"</td>");
					sbContent.append("<td nowrap>"+clearHtml(field_title)+"</td>");
					sbContent.append("<td nowrap>"+clearHtml(field_value)+"</td>");
					sbContent.append("<td nowrap class=active>"+change_type+"</td>");
					sbContent.append("<td nowrap class=active>"+history_user+"</td>");
					sbContent.append("<td nowrap class=active>"+history_date+"</td>");
					sbContent.append("<td nowrap class=active>"+history_host+"</td>");
					sbContent.append("</tr>");
					
					
				}
				
				sbContent.append("</table>");
			
			}
		
			collapseItems.add(new String[]{"changeLog_PFields"+request_id,"Platform and Parameters",sbContent.toString(),"log.png",""});
		


		
		
		sql="select "+ 
				"   platform_name, "+
				"	history_action,  "+ 
				"	concat(fname, ' ', lname) history_user,  "+ 
				"	date_format(history_date,?) history_date, "+
				" 	history_host "+ 
				"	from mad_request_platform_skip_history h,  mad_platform p, tdm_user u "+ 
				"	where  request_id=?  "+ 
				"	and platform_id=p.id  " +
				"	and history_user=u.id "+ 
				"	order by h.id desc ";
			
			bindlist.clear();
			bindlist.add(new String[]{"STRING",mysql_format});
			bindlist.add(new String[]{"INTEGER",request_id});
				
			arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
			
			//sb.append("<h4>Platform Skips</h4>");
			sbContent.setLength(0);
			
			if (arr.size()==0) {
				sbContent.append("No history found.");
			}
			else {
				
				sbContent.append("<table class=\"table table-condensed table-stripted table-bordered\">");
				
				
				
				sbContent.append("<tr class=info>");
				sbContent.append("<td><b>Platform Name</b></td>");
				sbContent.append("<td><b>Change</b></td>");
				sbContent.append("<td><b>Changed By</b></td>");
				sbContent.append("<td><b>Log Date</b></td>");
				sbContent.append("<td><b>@hostname</b></td>");
				sbContent.append("</tr>");
				
				for (int i=0;i<arr.size();i++) {
					
					
					String platform_name=arr.get(i)[0];
					String change_type=arr.get(i)[1];
					String history_user=arr.get(i)[2];
					String history_date=arr.get(i)[3];
					String history_host=arr.get(i)[4];
					
					sbContent.append("<tr>");
					sbContent.append("<td nowrap>"+platform_name+"</td>");
					sbContent.append("<td nowrap class=active>"+change_type+"</td>");
					sbContent.append("<td nowrap class=active>"+history_user+"</td>");
					sbContent.append("<td nowrap class=active>"+history_date+"</td>");
					sbContent.append("<td nowrap class=active>"+history_host+"</td>");
					sbContent.append("</tr>");
					
					
				}
				
				sbContent.append("</table>");
				
			}
		
		collapseItems.add(new String[]{"changeLog_Skip"+request_id,"Platform Skips",sbContent.toString(),"log.png",""});
		
		
	} //if (request_group.equals("DEPLOYMENT"))
	
	
	
	
	
	
	
	//sb.append(addCollapse("changeLogs", collapseItems));
	sb.append(addTab("changeLogs", collapseItems));
	
		
	return sb.toString();
}
//****************************************
String getRequestWaitingList(Connection conn, HttpSession session, String request_id) {
	StringBuilder sb=new StringBuilder();
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select flow_id, flow_state_id from mad_request_flow_logs  where request_id=? and status='OPEN'";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr==null|| arr.size()==0)  return "No state found";
	
	String flow_id=arr.get(0)[0];
	String flow_state_id=arr.get(0)[1];
	
	sql="select id, action_name from mad_flow_state_action where flow_state_id=? and action_type='HUMAN'";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",flow_state_id});
	
	arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	if (arr==null|| arr.size()==0)  return "No action defined";
	
	
	
	sb.append("<ul>");
	
	for (int i=0;i<arr.size();i++) {
		String action_id=arr.get(i)[0];
		String action_name=arr.get(i)[1];
		
		sb.append("<li><h4>"+action_name+"</h4></li>");
		
		sql="select permission_id from mad_flow_state_action_permissions where flow_state_action_id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",action_id});
		
		ArrayList<String[]> permArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		ArrayList<String> waitingUserArr=new ArrayList<String>();
		
		String current_user_id=""+(Integer) session.getAttribute("userid");
		
		for (int p=0;p<permArr.size();p++) {
			String permission_id=permArr.get(p)[0];
			if (permission_id.equals("-1")) 
				waitingUserArr.add(current_user_id);
			else if (permission_id.equals("-2")) { //direct manager
				waitingUserArr.addAll(getGroupManagers(conn, session, current_user_id));
			} 
			else if (permission_id.equals("-3")) { //administrator
				waitingUserArr.addAll(getUserListByRole(conn, session, "ADMIN"));
			}
			else if (permission_id.equals("-4")) { //relelase manager
				waitingUserArr.addAll(getUserListByRole(conn, session, "MADRM"));
			}
			else if (permission_id.equals("-5")) { //group members
				waitingUserArr.addAll(getGroupMembers(conn, session, current_user_id));
			}
			else {
				waitingUserArr.addAll(getGroupMembersByPermission(conn, session, permission_id));
			}
		}
		
		//clear the duplicates
		for (int u=waitingUserArr.size()-1;u>=0;u--) {
			int ind=waitingUserArr.indexOf(waitingUserArr.get(u));
			if (ind>-1 && ind<u) waitingUserArr.remove(ind);
		}
		
		
		
		if (waitingUserArr.size()==0) {
			sb.append("<ul>");
			sb.append("<li>No user defined to take this action.</li>");
			sb.append("</ul>");
		}
			
		else {
			sb.append("<table class=\"table table-condensed table-striped table-bordered\"> ");
			
			sb.append("<tr class=info>");
			sb.append("<td><b>Username</b></td>");
			sb.append("<td><b>First Name</b></td>");
			sb.append("<td><b>Last Name</b></td>");
			sb.append("<td><b>Email</b></td>");
			sb.append("</tr>");
			
			for (int u=0;u<waitingUserArr.size();u++) {
				String user_id=waitingUserArr.get(u);
				sql="select username, fname, lname, email from tdm_user where id=? ";
				bindlist.clear();
				bindlist.add(new String[]{"INTEGER",user_id});
				
				ArrayList<String[]> userInfo=getDbArrayConf(conn, sql, 1, bindlist);
				if (userInfo==null || userInfo.size()==0) continue;
				
				String username=userInfo.get(0)[0];
				String fname=userInfo.get(0)[1];
				String lname=userInfo.get(0)[2];
				String email=userInfo.get(0)[3];
				
				sb.append("<tr>");
				sb.append("<td>"+username+"</td>");
				sb.append("<td>"+fname+"</td>");
				sb.append("<td>"+lname+"</td>");
				sb.append("<td>"+email+"</td>");
				sb.append("</tr>");
				
				
			}
			sb.append("</table>");
		}
		
		
	}
	
	sb.append("</ul>");
	
	
	
	
	return sb.toString();
}

//***********************************************

ArrayList<String> getGroupMembersByPermission(Connection conn, HttpSession session, String permission_id) {
	ArrayList<String> ret1=new ArrayList<String>();
	
	String sql="select group_id from mad_group_permission where permission_id=?";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",permission_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	if (arr==null || arr.size()==0) return ret1;
	
	for (int i=0;i<arr.size();i++) {
		String group_id=arr.get(0)[0];
		sql="select member_id from mad_group_members where group_id=? and member_type='USER' ";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",group_id});
		
		ArrayList<String[]> memberArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		for (int m=0;m<memberArr.size();m++) 
			ret1.add(memberArr.get(m)[0]);
		
	}
		
	
	return ret1;
	
}

//***********************************************

ArrayList<String> getUserListByRole(Connection conn, HttpSession session, String role_short_code) {
	ArrayList<String> ret1=new ArrayList<String>();
	
	String sql="select user_id from tdm_user_role where role_id in (select id from tdm_role where shortcode=?)";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"STRING",role_short_code});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr==null || arr.size()==0) return ret1;
	
	for (int i=0;i<arr.size();i++)
		ret1.add(arr.get(i)[0]);
	
	return ret1;
	
}
//***********************************************
String addActionMethodCallSummary(Connection conn, HttpSession session, String request_id, String log_id) {
	
	StringBuilder sb=new StringBuilder();
	
	String sql="select \n"+
				"		cl.id, \n"+
				"		method_name,  \n"+
				"		date_format(last_execution_date,?) execution_date, \n"+
				"		status, \n"+
				"		execution_result \n"+
				"	from mad_method_call_logs cl, mad_method m \n"+
				"	where request_flow_logs_id=? \n"+
				"	and method_id=m.id \n"+
				"	order by cl.id";
	
	//list by request
	if (!nvl(request_id,"0").equals("0")) 
		sql="select \n"+
				"		cl.id, \n"+
				"		method_name,  \n"+
				"		date_format(last_execution_date,?) execution_date, \n"+
				"		status, \n"+
				"		execution_result \n"+
				"	from mad_method_call_logs cl, mad_method m \n"+
				"	where request_id=? \n"+
				"	and method_id=m.id \n"+
				"	order by cl.id desc";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"STRING",mysql_format});
	
	if (!nvl(request_id,"0").equals("0"))
		bindlist.add(new String[]{"INTEGER",request_id});
	else 
		bindlist.add(new String[]{"INTEGER",log_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	if (arr.size()==0) {
		return "-";
	}
	
	sb.append("<table class=\"table table-condensed table-bordered table-striped\">");
	
	sb.append("<tr class=info>");
	sb.append("<td><b>Method Name</b></td>");
	sb.append("<td><b>Status</b></td>");
	sb.append("<td><b>Executed@</b></td>");
	sb.append("<td><b>Result</b></td>");
	sb.append("<td><b></b></td>");
	sb.append("</tr>");
	
	for (int i=0;i<arr.size();i++) {
		String id=arr.get(i)[0];
		String method_name=clearHtml(arr.get(i)[1]);
		String execution_date=arr.get(i)[2];
		String status=arr.get(i)[3];
		String execution_result=arr.get(i)[4];
		
		if (execution_result.length()>50)
			execution_result=clearHtml(execution_result.substring(0,49))+"...";
		
		if (status.equals("NEW"))
			execution_date="-";
		
		sb.append("<tr>");
		sb.append("<td>"+method_name+"</td>");
		sb.append("<td>"+status+"</td>");
		sb.append("<td>"+execution_date+"</td>");
		sb.append("<td>"+execution_result+"</td>");
		sb.append("<td><a href=\"javascript:openMethodCallLogDetail('"+id+"');\"><b><span class=\"glyphicon glyphicon-share-alt\"></span></b></a></td>");
		sb.append("</tr>");
		
	}
	
	sb.append("</table>");
	
	return sb.toString();
}




//***********************************************

String getMethodCallLogDetail(Connection conn, HttpSession session, String log_id) {
	
	String sql="";
	
	StringBuilder sb=new StringBuilder();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select \n"+
			"	cl.id, \n"+
			"	r.id request_id,  \n"+
			"	r.description request_description, \n"+
			"	fsa.action_name, \n"+
			"	method_name,  \n"+
			"	date_format(cl.entdate,?) entdate, \n"+
			"	date_format(cl.last_execution_date,?) execution_date, \n"+
			"	cl.status, \n"+
			"	executable, \n"+
			"	parameters, \n"+
			"    duration, \n"+
			"	execution_result, \n"+
			"	execution_log \n"+
			"	from  \n"+
			"	mad_method_call_logs cl, mad_method m, mad_request r, mad_flow_state_action fsa \n"+
			"	where cl.id=? \n"+
			"	and method_id=m.id \n"+
			"	and request_id=r.id \n"+
			"	and flow_state_action_id=fsa.id ";

	bindlist.clear();
	bindlist.add(new String[]{"STRING",mysql_format});
	bindlist.add(new String[]{"STRING",mysql_format});
	bindlist.add(new String[]{"INTEGER",log_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr==null || arr.size()==0) 
		return "No log detail found. ID: "+ log_id;
	
	String request_id=arr.get(0)[1];
	String request_description=arr.get(0)[2];
	String action_name=arr.get(0)[3];
	String method_name=arr.get(0)[4];
	String entdate=arr.get(0)[5];
	String execution_date=arr.get(0)[6];
	String status=arr.get(0)[7];
	String executable=arr.get(0)[8];
	String parameters=arr.get(0)[9];
	String duration=arr.get(0)[10];
	String execution_result=arr.get(0)[11];
	String execution_log=arr.get(0)[12];
	
	
	sb.append("<table class=\"table table-condensed table-bordered table-striped\">");
	
	sb.append("<tr>");
	sb.append("<td align=right><b>Log Id : </b></td>");
	sb.append("<td>"+log_id+"</td>");
	sb.append("</tr>");
	
	sb.append("<tr>");
	sb.append("<td align=right><b>Request : </b></td>");
	sb.append("<td>"+request_id + " - "+clearHtml(request_description)+"</td>");
	sb.append("</tr>");
	
	
	sb.append("<tr>");
	sb.append("<td align=right><b>Flow Action : </b></td>");
	sb.append("<td>"+clearHtml(action_name)+"</td>");
	sb.append("</tr>");
	
	sb.append("<tr>");
	sb.append("<td align=right><b>Method Name : </b></td>");
	sb.append("<td>"+clearHtml(method_name)+"</td>");
	sb.append("</tr>");
	
	sb.append("<tr>");
	sb.append("<td align=right><b>Initialization Date : </b></td>");
	sb.append("<td>"+entdate+"</td>");
	sb.append("</tr>");
	
	sb.append("<tr>");
	sb.append("<td align=right><b>Execution Date : </b></td>");
	sb.append("<td>"+execution_date+"</td>");
	sb.append("</tr>");

	sb.append("<tr>");
	sb.append("<td align=right><b>Execution Status : </b></td>");
	sb.append("<td>"+status+"</td>");
	sb.append("</tr>");
	
	sb.append("<tr>");
	sb.append("<td align=right><b>Duration (msecs) : </b></td>");
	sb.append("<td>"+duration+"</td>");
	sb.append("</tr>");
	
	

	sb.append("</table>");
	
	
	sb.append(" <ul class=\"nav nav-tabs\"> " +
			 " <li><a data-toggle=\"tab\" href=\"#exres\">Result</a></li> " + 
			 " <li><a data-toggle=\"tab\" href=\"#exscript\">Executable Script</a></li> " + 
			 " <li><a data-toggle=\"tab\" href=\"#exparams\">Parameters</a></li> " + 
			 " <li class=\"active\"><a data-toggle=\"tab\" href=\"#exlog\" >Logs</a></li> " + 
			"</ul> ");
	
	sb.append("<div class=\"tab-content\">");
	
	sb.append("<div id=\"exres\" class=\"tab-pane fade\">");
	sb.append("<textarea rows=10 style=\"width:100%; background-color:black; color:white; font-family: monospace;\">"+clearHtml(execution_result)+"</textarea>");
	sb.append("</div>");

	
	sb.append("<div id=\"exscript\" class=\"tab-pane fade\">");
	sb.append("<textarea rows=10 style=\"width:100%; background-color:black; color:white; font-family: monospace;\">"+clearHtml(executable)+"</textarea>");
	sb.append("</div>");
	
	sb.append("<div id=\"exparams\" class=\"tab-pane fade\">");
	sb.append("<textarea rows=10 style=\"width:100%; background-color:black; color:white; font-family: monospace;\">"+clearHtml(parameters)+"</textarea>");
	sb.append("</div>");

	sb.append("<div id=\"exlog\" class=\"tab-pane fade in active\">");
	sb.append("<textarea rows=10 style=\"width:100%; background-color:black; color:white; font-family: monospace;\">"+clearHtml(execution_log)+"</textarea>");
	sb.append("</div>");

	sb.append("</div>");
	
	return sb.toString();
}


//***********************************************
String validatePackage(
		Connection conn, 
		HttpSession session, 
		String request_id, 
		String state_stage,
		String repository_action,
		String check_in_note
		) {
	

	
	if (repository_action.equals("NONE")) return "";
	
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	ArrayList<String[]> arr=new ArrayList<String[]>();
	
	StringBuilder sb=new StringBuilder();
	
	//check check out availability
	if (repository_action.equals("CHECKOUT")) {
		
		sql="select ram.application_id, ram.member_path,  ram.member_version \n"+
			"	from mad_request_application_member ram, mad_application a, mad_repository rep \n"+
			"	where \n"+
			"  ram.request_id=? \n"+ 	
			"	and ram.application_id=a.id  \n"+
			"	and a.repository_id=rep.id  \n"+
			"	and rep.class_name='oracle.jdbc.driver.OracleDriver' \n"+
			"	and exists ( \n"+
			"	select 1 from mad_checkout_log cl \n"+
			"	where cl.repository_id=rep.id and cl.member_path=ram.member_path \n"+
			"	and cl.request_id!=? \n"+
			"	and cl.status='OPEN' \n"+
			"	) \n"+
			"	order by member_order";
		
		

		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		bindlist.add(new String[]{"INTEGER",request_id});
		
		ArrayList<String[]> checkedOutList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		if (checkedOutList!=null && checkedOutList.size()>0) {
			sb.append("<label class=\"label label-warning\">Checked out members found!</label>");
			sb.append("<hr>");
			sb.append("<ul>");
			
			for (int i=0;i<checkedOutList.size();i++) {
				String application_id=checkedOutList.get(i)[0];
				String member_path=checkedOutList.get(i)[1];
				String member_version=checkedOutList.get(i)[2];
				
				sb.append("<li>"+member_path+" [<b>"+member_version+"</b>]"+" is checked out</li>");
			}
			sb.append("</ul>");
			
			return sb.toString();
		}
			
		
		sql="select ram.application_id, ram.id member_id, ram.member_path,  ram.member_version \n"+
				"	from mad_request_application_member ram, mad_application a, mad_repository rep \n"+
				"	where \n"+
				"  ram.request_id=? \n"+ 	
				"	and ram.application_id=a.id  \n"+
				"	and a.repository_id=rep.id  \n"+
				"	and rep.class_name='oracle.jdbc.driver.OracleDriver' \n"+
				"	order by member_order";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		
		ArrayList<String[]> toCheckOutList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		String check_out_user_info=nvl((String) session.getAttribute("username"),"unknown") ;
		String check_out_machine_info=gethostinfo();
		
		
		for (int i=0;i<toCheckOutList.size();i++) {
			
			String application_id=toCheckOutList.get(i)[0];
			String member_id=toCheckOutList.get(i)[1];
			String member_path=toCheckOutList.get(i)[2];
			
			String repository_id=getRepositoryIdByApplicationId(conn, session, application_id);
			
			sql="select class_name, par_hostname, par_username, par_password from mad_repository where id=?";
			bindlist.clear();
			bindlist.add(new String[]{"INTEGER",repository_id});
			arr=getDbArrayConf(conn, sql, 1, bindlist);
			String repo_class_name="";
			String repo_hostname="";
			String repo_username="";
			String repo_password="";
			
			if (arr!=null && arr.size()==1) {
				repo_class_name=arr.get(0)[0];
				repo_hostname=arr.get(0)[1];
				repo_username=arr.get(0)[2];
				repo_password=arr.get(0)[3];
				
			}
			
			
			
			String member_version=toCheckOutList.get(i)[2];
			
			sql="select max(member_version) member_version from mad_checkout_log where status='CLOSED' and repository_id=? and member_path=?";
			bindlist.clear();
			bindlist.add(new String[]{"INTEGER",repository_id});
			bindlist.add(new String[]{"STRING",member_path});
			
			arr=getDbArrayConf(conn, sql, 1, bindlist);
			
			int member_version_int=1;
			try {member_version_int=Integer.parseInt(arr.get(0)[0])+1;} catch(Exception e) {member_version_int=1;}
			
			
			
			sql="select 1 from mad_checkout_log where repository_id=? and request_id=? and member_path=? and status='OPEN'";
			bindlist.clear();
			bindlist.add(new String[]{"INTEGER",repository_id});
			bindlist.add(new String[]{"INTEGER",request_id});
			bindlist.add(new String[]{"STRING",member_path});
			arr=getDbArrayConf(conn, sql, 1, bindlist);
			
			if (arr!=null && arr.size()==1) {
				System.out.println(member_path+ " is already checked out.");
				continue;
			}
			
			sql="update mad_request_application_member set member_version=? where id=?";
			bindlist.clear();
			bindlist.add(new String[]{"STRING",""+member_version_int});
			bindlist.add(new String[]{"INTEGER",member_id});
			execDBConf(conn, sql, bindlist);
			
			
			
			ArrayList<String> arrCode=getFileContentFromDb(conn, session, repo_class_name, repo_hostname, repo_username, repo_password, member_path, "0");
			String check_out_code="";
			if (arrCode.size()>0) check_out_code=arrCode.get(0);
				
			sql="insert into mad_checkout_log (request_id, application_id, member_id, member_path, member_version, "+
					" status, repository_id, check_out_code, check_in_code, check_out_user_info, check_out_machine_info,  check_in_note, check_out_date) "+
				" values "+
					" (?, ?, ?, ?, ?, "+
					"  ?, ?, ?, ?, ?, ?, ?, now() ) ";
			
			bindlist.clear();
			bindlist.add(new String[]{"INTEGER",request_id});
			bindlist.add(new String[]{"INTEGER",application_id});
			bindlist.add(new String[]{"INTEGER",member_id});
			bindlist.add(new String[]{"STRING",member_path});
			bindlist.add(new String[]{"STRING",""+member_version_int});
			bindlist.add(new String[]{"STRING","OPEN"});
			bindlist.add(new String[]{"INTEGER",repository_id});
			bindlist.add(new String[]{"STRING",check_out_code});
			bindlist.add(new String[]{"STRING",check_out_code});
			bindlist.add(new String[]{"STRING",check_out_user_info});
			bindlist.add(new String[]{"STRING",check_out_machine_info});
			bindlist.add(new String[]{"STRING",check_in_note});
			
			execDBConf(conn, sql, bindlist);
		}
		
		
		
		


	}
	
	
	if (repository_action.equals("CHECKIN")) {
		sql="select ram.application_id, ram.member_path,  ram.member_version \n"+
				"	from mad_request_application_member ram, mad_application a, mad_repository rep \n"+
				"	where \n"+
				"  ram.request_id=? \n"+ 	
				"	and ram.application_id=a.id  \n"+
				"	and a.repository_id=rep.id  \n"+
				"	and rep.class_name='oracle.jdbc.driver.OracleDriver' \n"+
				"	and not exists ( \n"+
				"	select 1 from mad_checkout_log cl \n"+
				"	where cl.repository_id=rep.id and cl.member_path=ram.member_path \n"+
				"	and cl.request_id=? \n"+
				"	and cl.status='OPEN' \n"+
				"	) \n"+
				"	order by member_order";
		
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		bindlist.add(new String[]{"INTEGER",request_id});
		
		ArrayList<String[]> checkedOutList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		if (checkedOutList!=null && checkedOutList.size()>0) {
			sb.append("<label class=\"label label-warning\">Not Checked out members found!</label>");
			sb.append("<hr>");
			sb.append("<ul>");
			
			for (int i=0;i<checkedOutList.size();i++) {
				String application_id=checkedOutList.get(i)[0];
				String member_path=checkedOutList.get(i)[1];
				String member_version=checkedOutList.get(i)[2];
				
				sb.append("<li>"+member_path+" [<b>"+member_version+"</b>]"+" is not checked out for this package</li>");
			}
			sb.append("</ul>");
			
			return sb.toString();
		}
		
		
		sql="select ram.application_id, ram.id member_id, ram.member_path,  ram.member_version \n"+
				"	from mad_request_application_member ram, mad_application a, mad_repository rep \n"+
				"	where \n"+
				"  ram.request_id=? \n"+ 	
				"	and ram.application_id=a.id  \n"+
				"	and a.repository_id=rep.id  \n"+
				"	and rep.class_name='oracle.jdbc.driver.OracleDriver' \n"+
				"	";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		
		ArrayList<String[]> toCheckInList=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		String check_in_user_info=nvl((String) session.getAttribute("username"),"unknown") ;
		String check_in_machine_info=gethostinfo();
		
		
		for (int i=0;i<toCheckInList.size();i++) {
			
			String application_id=toCheckInList.get(i)[0];
			String member_id=toCheckInList.get(i)[1];
			String member_path=toCheckInList.get(i)[2];
			
			String repository_id=getRepositoryIdByApplicationId(conn, session, application_id);
			
			sql="select class_name, par_hostname, par_username, par_password from mad_repository where id=?";
			bindlist.clear();
			bindlist.add(new String[]{"INTEGER",repository_id});
			arr=getDbArrayConf(conn, sql, 1, bindlist);
			String repo_class_name="";
			String repo_hostname="";
			String repo_username="";
			String repo_password="";
			
			if (arr!=null && arr.size()==1) {
				repo_class_name=arr.get(0)[0];
				repo_hostname=arr.get(0)[1];
				repo_username=arr.get(0)[2];
				repo_password=arr.get(0)[3];
				
			}
			
			
			sql="select 1 from mad_checkout_log where repository_id=? and request_id=? and  member_id=? and member_path=? and status='OPEN'";
			bindlist.clear();
			bindlist.add(new String[]{"INTEGER",repository_id});
			bindlist.add(new String[]{"INTEGER",request_id});
			bindlist.add(new String[]{"INTEGER",member_id});
			bindlist.add(new String[]{"STRING",member_path});
			arr=getDbArrayConf(conn, sql, 1, bindlist);
			
			if (arr!=null && arr.size()==0) {
				System.out.println(member_path+ " is not checked out .");
				continue;
			}
			
			
			ArrayList<String> arrCode=getFileContentFromDb(conn, session, repo_class_name, repo_hostname, repo_username, repo_password, member_path, "0");
			String check_in_code="";
			if (arrCode.size()>0) check_in_code=arrCode.get(0);
			
			sql="update mad_checkout_log set "+
					" status='CLOSED',check_in_note=?, "+
					" check_in_code=?, check_in_user_info=?,check_in_machine_info=?, check_in_date=now() " +
					" where repository_id=? and request_id=? and member_id=? and member_path=?";
				
				bindlist.clear();
				bindlist.add(new String[]{"STRING",check_in_note});
				bindlist.add(new String[]{"STRING",check_in_code});
				bindlist.add(new String[]{"STRING",check_in_user_info});
				bindlist.add(new String[]{"STRING",check_in_machine_info});
				bindlist.add(new String[]{"INTEGER",repository_id});
				bindlist.add(new String[]{"INTEGER",request_id});
				bindlist.add(new String[]{"INTEGER",member_id});
				bindlist.add(new String[]{"STRING",member_path});

				execDBConf(conn, sql, bindlist);
		}
		
			
	}
	
	
	if (repository_action.equals("CANCEL")) {
		
		sql="select ram.application_id, ram.id member_id, ram.member_path,  ram.member_version \n"+
				"	from mad_request_application_member ram, mad_application a, mad_repository rep \n"+
				"	where \n"+
				"  ram.request_id=? \n"+ 	
				"	and ram.application_id=a.id  \n"+
				"	and a.repository_id=rep.id  \n"+
				"	and rep.class_name='oracle.jdbc.driver.OracleDriver'";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		ArrayList<String[]> arrCancel=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		
		
		if (arrCancel!=null) {
		
			String check_cancel_user_info=nvl((String) session.getAttribute("username"),"unknown") ;
			String check_cacel_machine_info=gethostinfo();
			
			for (int i=0;i<arrCancel.size();i++) {
				
				String application_id=arrCancel.get(i)[0];
				String member_id=arrCancel.get(i)[1];
				String member_path=arrCancel.get(i)[2];
				String member_version=arrCancel.get(i)[3];
				
				String repository_id=getRepositoryIdByApplicationId(conn, session, application_id);
				
				
				sql="select 1 from mad_checkout_log "+
					" where repository_id=? and request_id=? and member_id=? and member_path=? and status='OPEN'";
				bindlist.clear();
				bindlist.add(new String[]{"INTEGER",repository_id});
				bindlist.add(new String[]{"INTEGER",request_id});
				bindlist.add(new String[]{"INTEGER",member_id});
				bindlist.add(new String[]{"STRING",member_path});
				arr=getDbArrayConf(conn, sql, 1, bindlist);
				
				if (arr!=null && arr.size()==0) {
					System.out.println(member_path+ " is not checked out.");
					continue;
				}
				
				
				sql="select class_name, par_hostname, par_username, par_password from mad_repository where id=?";
				bindlist.clear();
				bindlist.add(new String[]{"INTEGER",repository_id});
				
				arr=getDbArrayConf(conn, sql, 1, bindlist);
				String repo_class_name="";
				String repo_hostname="";
				String repo_username="";
				String repo_password="";
				
				if (arr!=null && arr.size()==1) {
					repo_class_name=arr.get(0)[0];
					repo_hostname=arr.get(0)[1];
					repo_username=arr.get(0)[2];
					repo_password=arr.get(0)[3];
					
				}
				
				ArrayList<String> arrCode=getFileContentFromDb(conn, session, repo_class_name, repo_hostname, repo_username, repo_password, member_path, "0");
				String check_in_code="";
				if (arrCode.size()>0) check_in_code=arrCode.get(0);
				
				sql="update mad_checkout_log set "+
						" status='CANCEL',check_in_note=?, "+
						" check_in_code=?, check_in_user_info=?,check_in_machine_info=?, check_in_date=now() " +
						" where repository_id=? and request_id=? and member_id=? and member_path=?";
					
					bindlist.clear();
					bindlist.add(new String[]{"STRING",check_in_note});
					bindlist.add(new String[]{"STRING",check_in_code});
					bindlist.add(new String[]{"STRING",check_cancel_user_info});
					bindlist.add(new String[]{"STRING",check_cacel_machine_info});
					bindlist.add(new String[]{"INTEGER",repository_id});
					bindlist.add(new String[]{"INTEGER",request_id});
					bindlist.add(new String[]{"INTEGER",member_id});
					bindlist.add(new String[]{"STRING",member_path});

					execDBConf(conn, sql, bindlist);
					
			}
			
		}
		
		
	}
	return sb.toString();
	
}

//***********************************************
String validateDeploymentRequest(
		Connection conn, 
		HttpSession session, 
		String request_id, 
		String state_stage
		) {
	
	
	if (state_stage.equals("START")) return "";
	if (state_stage.equals("FINISH")) return "";
	if (state_stage.equals("DEPLOY_SUCCESS")) return "";
	if (state_stage.equals("DEPLOY_FAIL")) return "";
	if (state_stage.equals("WAIT")) return "";
	if (state_stage.equals("REJECTED")) return "";
	
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	ArrayList<String[]> arr=new ArrayList<String[]>();
	
	StringBuilder sb=new StringBuilder();
	
	
		
		
	
		if (state_stage.equals("DEPLOY")) {
			
		//check members with no tags	
		sql="select member_path from mad_request_application_member " + 
				" where to_skip='NO'  " + 
				" and (member_tag_info is null or member_tag_info='') " + 
				" and exists (select 1 from mad_application where id=application_id and app_repo_policy!='NO_TAG') " +
				" and request_id=? ";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		ArrayList<String[]> arrMemberNotag=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		if (arrMemberNotag.size()>0) {
			sb.append("<label class=\"label label-warning\">Misssing Tags Found!</label>");
			sb.append("<hr>");
			sb.append("<ul>");
			for (int i=0;i<arrMemberNotag.size();i++) {
				sb.append("<li>"+arrMemberNotag.get(i)[0]+"</li>");
			}
			sb.append("</ul>");
		}
		
		


		
		//check if newer version was already deployed before
		sql="select id, member_path, member_version, application_id "+
				" from mad_request_application_member" + 
				" where to_skip='NO' and (status='NOK' or status is null)  " + 
				" and request_id=? "+
				" order by member_order";
		
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		ArrayList<String[]> arrMember=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		sql="select environment_id from mad_request_app_env where request_id=? limit 0,1";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		ArrayList<String[]> arrEnv=getDbArrayConf(conn, sql, 1, bindlist);
		String request_environment_id=arrEnv.get(0)[0];
		
		ArrayList<String> arrAppToCheckList=new ArrayList<String>();
		sql="select id from  mad_application where prevent_older_version='YES'";
		bindlist.clear();
		ArrayList<String[]> arrApp=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		for (int i=0;i<arrApp.size();i++)
			arrAppToCheckList.add(arrApp.get(i)[0]);
		
		
		
		
		String ver_sql="select " + 
			"	r.id request_id, r.description, deployment_date, " + 
			"	member_version, environment_name " + 
			"	from  " + 
			"	mad_request_application_member mram,  " + 
			"	mad_request_app_env mrae,  " + 
			"	mad_request r,  " + 
			"	mad_environment e, " + 
			"	mad_application a " + 
			"	where  " + 
			"	 member_path=? " + 
			"	and mram.id!=? " + 
			"	and e.id=? " + 
			"	and mram.status='OK'   " + 
			"	and mram.request_id=mrae.request_id and mram.application_id=mrae.application_id " + 
			"	and mrae.request_id=r.id and mram.request_id=r.id " + 
			"	and mrae.environment_id=e.id " + 
			"	and mram.application_id=a.id and a.prevent_older_version='YES' " + 
			"	order by r.deployment_date desc";
			
			StringBuilder verOldCheck=new StringBuilder();
			
			
			
			for (int i=0;i<arrMember.size();i++) {
				
				String ver_member_id=arrMember.get(i)[0];
				String ver_member_path=arrMember.get(i)[1];
				String ver_member_version=arrMember.get(i)[2];
				String ver_member_application_id=arrMember.get(i)[3];

				if (arrAppToCheckList.indexOf(ver_member_application_id)==-1) continue;
				
				bindlist.clear();
				bindlist.add(new String[]{"STRING",ver_member_path});
				bindlist.add(new String[]{"INTEGER",ver_member_id});
				bindlist.add(new String[]{"INTEGER",request_environment_id});
				//bindlist.add(new String[]{"INTEGER",ver_member_version});
				
				
				ArrayList<String[]> arrNewVersions=getDbArrayConf(conn, ver_sql, 1, bindlist);
				
				if (arrNewVersions.size()==0) continue;
				
				String conf_request_id=arrNewVersions.get(0)[0];
				String conf_request_description=arrNewVersions.get(0)[1];
				String conf_deployment_date=arrNewVersions.get(0)[2];
				String conf_deployed_version=arrNewVersions.get(0)[3];
				
				boolean is_newer_found=false;
				int diff=0;
				try {diff=Integer.parseInt(conf_deployed_version)-Integer.parseInt(ver_member_version);} catch(Exception e) {diff=0;}
				if (diff<=0) continue;

				verOldCheck.append("<h4><font color=blue><b>"+ver_member_path+" (v"+ver_member_version+")"+"</b></font></h4>");
				
				verOldCheck.append("<table class=\"table table-condensed table-striped table-bordered\">");
						
				verOldCheck.append("<tr>");
				verOldCheck.append("<td class=info><b>Deployed Version</b></td>");
				verOldCheck.append("<td>"+conf_deployment_date+"</td>");
				verOldCheck.append("</tr>");

				verOldCheck.append("<tr>");
				verOldCheck.append("<td class=info><b>Deployment Date</b></td>");
				verOldCheck.append("<td>v"+conf_deployed_version+"</td>");
				verOldCheck.append("</tr>");

				verOldCheck.append("<tr>");
				verOldCheck.append("<td class=info><b>Deployment#</b></td>");
				verOldCheck.append("<td>"+conf_request_id+"</td>");
				verOldCheck.append("</tr>");

				verOldCheck.append("<tr>");
				verOldCheck.append("<td class=info><b>Description</b></td>");
				verOldCheck.append("<td>"+clearHtml(conf_request_description)+"</td>");
				verOldCheck.append("</tr>");

				verOldCheck.append("<table>");
				
			}
		
			
			
			if (verOldCheck.length()>0) {
				sb.append("<label class=\"label label-warning\">Newer versions found deployed before !</label>");
				sb.append("<hr>");
				sb.append(verOldCheck.toString());
			}
			
		
		//validate deployment date
		sql="select DATE_FORMAT(deployment_date,?) deployment_date  from mad_request where id=?";
		bindlist.clear();
		bindlist.add(new String[]{"STRING",mysql_format});
		bindlist.add(new String[]{"INTEGER",request_id});
		arr=getDbArrayConf(conn, sql, 1, bindlist);
		
		String deployment_date_str="";
		boolean is_deployment_date_valid=true;
		boolean is_deployment_date_expired=false;
		
		if (arr.size()==1) deployment_date_str=arr.get(0)[0];
		
		try { 	
			String JAVA_DATE_FORMAT="dd.MM.yyyy HH:mm:ss";
			Date d =new SimpleDateFormat(JAVA_DATE_FORMAT).parse(deployment_date_str);
			
			if (deployment_date_str.length()==0) is_deployment_date_valid=false;
			
			if (is_deployment_date_valid) {
				System.out.println("Checking deployment date expiry ["+d+"] "+(new Date(System.currentTimeMillis())));
				
				if (d.before(new Date(System.currentTimeMillis())))
						is_deployment_date_expired=true;
			}
			
			} catch(Exception e) { is_deployment_date_valid=false; }
		
		
		if (!is_deployment_date_valid) {
			sb.append("<label class=\"label label-warning\">Deployment time is missing or invalid !</label>");
			sb.append("<hr>");
			sb.append("<ul>");
			sb.append("<li>"+deployment_date_str+"</li>");
			sb.append("</ul>");
		}
		
		
		if (is_deployment_date_expired) {
			sb.append("<label class=\"label label-warning\">Deployment time is expired. Pick another deployment date !</label>");
			sb.append("<hr>");
			sb.append("<ul>");
			sb.append("<li>"+deployment_date_str+"</li>");
			sb.append("</ul>");
		}
		
		
		//linked packages should be approved 
		sql="select linked_request_id from mad_request_link where request_id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		for (int i=0;i<arr.size();i++) {
			String linked_request_id=arr.get(i)[0];
			
			sql="select r.status, rt.flow_id from mad_request r, mad_request_type rt where r.request_type_id=rt.id and r.id=?";
			bindlist.clear();
			bindlist.add(new String[]{"INTEGER",linked_request_id});
			ArrayList<String[]> arrReq=getDbArrayConf(conn, sql, 1, bindlist);
			
			if (arrReq==null || arrReq.size()==0) continue;
			
			String linked_request_status=arrReq.get(0)[0];
			String linked_request_flow_id=arrReq.get(0)[1];
			
			
			boolean is_status_approved=true;
			if (linked_request_flow_id.length()>0) {
				String linked_request_status_stage=getStateProperty(conn, session, 0, linked_request_flow_id, linked_request_status,"STAGE");
				System.out.println("linked_request_status_stage for linked_request_status is "+linked_request_status_stage );
				if (!linked_request_status_stage.equals("APPROVED"))  is_status_approved=false;
			}
			
			
			
			if (!is_status_approved) {
				String linked_request_status_title=linked_request_status;
				if (linked_request_flow_id.length()>0)  {
					linked_request_status_title=getStateProperty(conn, session, 0, linked_request_flow_id, linked_request_status,"TITLE");
				}
				
				sb.append("<div class=row>");
				sb.append("<div class=\"col-md-12\">");
				sb.append("<span class=\"label label-warning\">Package <span class=badge>"+linked_request_id + "</span> is not approved!  Current State : <span class=badge>" + linked_request_status_title + "</span> </span>");
				sb.append("</div>");		
				sb.append("</div>");
			}
			
		}
		
		
		//check if env and app parameters exists. 
		sql="select 1 from mad_request_env_fields where request_id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		arr=getDbArrayConf(conn, sql, 1, bindlist);
		
		if (arr.size()==0) {
			sb.append("<div class=row>");
			sb.append("<div class=\"col-md-12\">");
			sb.append("<span class=\"label label-warning\"> Platform parameters are missing!</span> </span>");
			sb.append("</div>");		
			sb.append("</div>");
		}
		else {
			
			
			//check if there is any missing platform for the applications in request for selected env 
			sql="select distinct application_name, platform_type_name "  +
				"	from mad_request_application_member mram, mad_application a, mad_platform_type pt "  +
				"	where mram.application_id=a.id and a.platform_type_id=pt.id and request_id=? and mram.to_skip='NO' "  +
				"	and not exists (select 1 from mad_request_env_fields where request_id=mram.request_id and application_id=mram.application_id)";
			bindlist.clear();
			bindlist.add(new String[]{"INTEGER",request_id});
			arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
			
			if (arr.size()>0) 
				for (int i=0;i<arr.size();i++) {
					String application_name=arr.get(i)[0];
					String platform_type_name=arr.get(i)[1];
					
					sb.append("<div class=row>");
					sb.append("<div class=\"col-md-12\">");
					sb.append("<span class=\"label label-warning\">Application <span class=badge>"+application_name + "</span> is not targeted to any <span class=badge>"+platform_type_name + "</span> type platform!  </span>");
					sb.append("</div>");		
					sb.append("</div>");
				}
			
		} //else
		
		
				
		
		
	}
	
	
	
	//check code conflicts 
	sql="select ram.id, ram.application_id, ram.member_name, ram.member_path, ram.member_version, ram.member_tag_info, rae.environment_id  "+
			" from mad_request_application_member ram, mad_request_app_env rae " + 
			" where "+
			" ram.request_id=rae.request_id and ram.application_id=rae.application_id " + 
			" and ram.to_skip='NO'  " + 
			" and ram.request_id=? ";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	ArrayList<String[]> arrConflict=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	if (arrConflict.size()==0) {
		sb.append("<hr>");
		sb.append("<label class=\"label label-warning\">Nothing to deploy.</label>");
		sb.append("<hr>");
	}
	else 
	{
		for (int i=0;i<arrConflict.size();i++) {
			
			String req_app_member_id=arrConflict.get(i)[0];
			String application_id=arrConflict.get(i)[1];
			String member_name=arrConflict.get(i)[2];
			String member_path=arrConflict.get(i)[3];
			String member_version=arrConflict.get(i)[4];
			String member_tag_info=arrConflict.get(i)[5];
			String environment_id=arrConflict.get(i)[6];
			
			int conflict_status=isCodeConflict(
					conn, 
					session, 
					request_id, 
					environment_id, 
					application_id, 
					req_app_member_id, member_name, member_path, member_version, member_tag_info);
			
			if (conflict_status>1) {
				sb.append("<hr>");
				sb.append("<label class=\"label label-warning\">There area 1 or more code conflicts to be solved!</label>");
				sb.append("<hr>");
				break;
			}
			
			
		}
	}
	
	
	
	if (sb.length()>0) {
		sb.insert(0, 
					"<div class=row>"+
					"<div class=\"col-md-2\"><img src=\"img/mad/error.png\" width=40 height=40></div>"+
					"<div class=\"col-md-10\">"+
					"<span class=\"label label-danger\">Validation Errors found for the request <span class=badge>"+request_id+"</span> </span>"+
		 			"<br>"+
					" Fix These errors to proceed."+
					"</div>"+
					"</div>"+
					"<hr>"
					);
	}
	
	return sb.toString();
}
//***********************************************
String routeRequest(
		Connection conn,
		HttpSession session,
		String request_id,
		String action_id,
		String action_note,
		String time_spent) {
	
	
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select next_state_id, state_name, flow_id, state_stage,  repository_action " +
		" from  mad_flow_state_action a, mad_flow_state s "+
		" where a.next_state_id=s.id and a.id=? ";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",action_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);

	if (arr.size()==0) 
		return "Next state not defined for this action.";
				
				
	
				
	int next_state_user=(Integer) session.getAttribute("userid");
	String next_state_id=arr.get(0)[0];
	String new_state=arr.get(0)[1];
	String flow_id=arr.get(0)[2];
	String state_stage=arr.get(0)[3];
	String repository_action=arr.get(0)[4];
	
	sql="select request_group from mad_request r, mad_request_type rt where r.request_type_id=rt.id and r.id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	arr=getDbArrayConf(conn, sql, 1, bindlist);

	if (arr.size()==0) {
		return "Request not found : "+request_id;
	}

	String request_group=arr.get(0)[0];
	
	
	boolean externalMethodCallSuccess=executeMadMethodsOnRequestStateChange(
			conn,
			session,
			request_id,
			action_id
			);
	
	if (!externalMethodCallSuccess) {
		
		sql="select max(id) from mad_method_call_logs where request_id=? and flow_state_action_id=? ";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",""+request_id});
		bindlist.add(new String[]{"INTEGER",""+action_id});
		arr=getDbArrayConf(conn, sql, 1, bindlist);
		
		String method_call_log_id="";
		try{method_call_log_id=arr.get(0)[0];} catch(Exception e) {method_call_log_id="0";}
		
		return "Method executions failed. <b><a href=\"javascript:openMethodCallLogDetail('"+method_call_log_id+"')\">click here</a></b> for details.";
	}
	
	if (request_group.equals("DEPLOYMENT") &&  state_stage.equals("DEPLOY")) {
		
		sql="select 1 from mad_request_application_member where request_id=? and (status is null or status!='OK') and to_skip!='YES' limit 0,1";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		arr=getDbArrayConf(conn, sql, 1, bindlist);
		
		if (arr!=null && arr.size()==0) return "Nothing found to deploy in request.";
	}
	
	if (request_group.equals("DEPLOYMENT")) {
		String deployment_validation_msg=validateDeploymentRequest(conn, session, request_id,state_stage);
		if (deployment_validation_msg.length()>0) return deployment_validation_msg;
	}
	else if (request_group.equals("PACKAGE")) {
		String pacakge_validation_msg=validatePackage(conn, session, request_id,state_stage, repository_action, action_note);
		if (pacakge_validation_msg.length()>0) return pacakge_validation_msg;
	}
	


	sql="update mad_request_flow_logs " +
		" set " +
		" status='CLOSED' , " +
		" flow_state_action_id=?, " +
		" action_note=?, " +
		" next_state_id=?, " +
		" next_state_user=?, " +
		" time_spent=?, "+
		" notification_attempt_date=DATE_ADD(now(), INTERVAL -10 MINUTE), "+
		" next_state_date=now() "+
		" where " +
		" request_id=? and status='OPEN'";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",action_id});
	bindlist.add(new String[]{"STRINE",action_note});
	bindlist.add(new String[]{"INTEGER",next_state_id});
	bindlist.add(new String[]{"INTEGER",""+next_state_user});
	bindlist.add(new String[]{"INTEGER",""+time_spent});
	bindlist.add(new String[]{"INTEGER",request_id});

	boolean close_state=execDBConf(conn, sql, bindlist);

	if (!close_state) return "State close error..";

	if (!state_stage.equals("FINISH")) {
		
		sql="insert into mad_request_flow_logs " + 
			 " (request_id, flow_id, flow_state_id, curr_state_user, curr_state_date, status) "+
			 " values (?, ?, ?, ?, now(),'OPEN') ";
		
		bindlist.clear(); 
		bindlist.add(new String[]{"INTEGER",request_id});
		bindlist.add(new String[]{"INTEGER",flow_id});
		bindlist.add(new String[]{"INTEGER",""+next_state_id});
		bindlist.add(new String[]{"INTEGER",""+next_state_user});
		
		boolean open_state=execDBConf(conn, sql, bindlist);
		if (!open_state) return "State open error..";
		
	}
	

	
	
	
	if (request_group.equals("DEPLOYMENT") &&  state_stage.equals("DEPLOY")) {
		
		
		
		sql="update mad_request set deployment_attempt_no=deployment_attempt_no+1 where id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		boolean is_ok=execDBConf(conn, sql, bindlist);
		
		if (!is_ok) return "Request setting deployment attempt error.";
		
		
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		
		
		
		
		sql="update mad_request_application_member set status=null, work_package_id=0 where request_id=? and status!='OK' and to_skip!='YES' ";

		
		execDBConf(conn, sql, bindlist);
		
		String del_sql="select id from mad_request_application_member "+
				" where  request_id=? and status!='OK' and to_skip!='YES' ";
		ArrayList<String[]> delArr=getDbArrayConf(conn, del_sql, Integer.MAX_VALUE, bindlist);
		for (int h=0;h<delArr.size();h++) {
			String update_id=delArr.get(h)[0];
			createHistory(conn, session, "UPDATE", "mad_request_application_member", update_id);
		}
		
	}
	
	sql="update mad_request set status=? where id=?";
	bindlist.clear();
	bindlist.add(new String[]{"STRING",new_state});
	bindlist.add(new String[]{"INTEGER",request_id});

	boolean is_success=execDBConf(conn, sql, bindlist);
	
	if (is_success) 
		createHistory(conn, session, "UPDATE", "mad_request", request_id);

	
	if (!is_success) return "Request routing error.";
	
	return "";
}



//****************************************************************
String writeMadDeployWPLInfo(Connection conn, HttpSession session, String work_plan_id, String request_id) {
	StringBuilder sb=new StringBuilder();
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select  wp.id, status, work_plan_name,  invalid_message " + 
		"	from tdm_work_plan_dependency d, tdm_work_plan wp " + 
		"	where d.depended_work_plan_id=wp.id " + 
		"	and d.work_plan_id=? " +
		"   and exists (select 1 from mad_request_work_package where work_plan_id=wp.id and request_id=?) "+
		"	order by dependency_order";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",work_plan_id});
	bindlist.add(new String[]{"INTEGER",request_id});
	ArrayList<String[]> wplArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();
	StringBuilder sbContent=new StringBuilder();
	
	for (int i=0;i<wplArr.size();i++) {
		String wpl_id=wplArr.get(i)[0];
		String wpl_status=wplArr.get(0)[1];
		String wpl_name=wplArr.get(i)[2];
		String wpl_invalid_message=wplArr.get(0)[3];
		
		sbContent.setLength(0);
		
		sbContent.append("<div class=row>");
		sbContent.append("<div class=\"col-md-4\" align=right><span class=\"label label-info\"> "+decodeStringTitle(conn, session, "Work Plan Id", "SYS_REQ_DEPLOYMENT_INFO_WORK_PLAN_ID", false)+" : </label></div>");
		sbContent.append("<div class=\"col-md-8\">");
		sbContent.append("<span class=badge>"+wpl_id+"</span>");
		sbContent.append("</div>");
		sbContent.append("</div>");
		
		sbContent.append("<div class=row>");
		sbContent.append("<div class=\"col-md-4\" align=right><span class=\"label label-info\"> "+decodeStringTitle(conn, session, "Status", "SYS_REQ_DEPLOYMENT_INFO_WORK_PLAN_STATUS", false)+" : </label></div>");
		sbContent.append("<div class=\"col-md-8\">");
		sbContent.append("<span class=badge>"+wpl_status+"</span>");
		sbContent.append("</div>");
		sbContent.append("</div>");

	
		
		if (wpl_invalid_message.length()>0) {
			sbContent.append("<br>");
			
			sbContent.append("<div class=row>");
			sbContent.append("<div class=\"col-md-4\" align=right><span class=\"label label-info\"> "+decodeStringTitle(conn, session, "Deployment Validation Message", "SYS_REQ_DEPLOYMENT_INFO_WORK_PLAN_VALIDATION_MSG", false)+" : </label></div>");
			sbContent.append("<div class=\"col-md-8\">");
			sbContent.append("<span class=badge>"+wpl_invalid_message+"</span>");
			sbContent.append("</div>");
			sbContent.append("</div>");
		}
		
		
		sql="select wpc.id, wp_name, status, mask_params from tdm_work_package wpc where  "+
			"  wpc.id in " + 
			" (select work_package_id from mad_request_work_package where work_plan_id=? and request_id=?)" + 
			" order by wpc.id ";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",wpl_id});
		bindlist.add(new String[]{"INTEGER",request_id});
		
		
		ArrayList<String[]> wpcArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		if (wpcArr.size()==0) {
			sbContent.append("<br>");
			sbContent.append("<div class=row>");
			sbContent.append("<div class=\"col-md-12\" align=left><span class=\"label label-warning\"> "+decodeStringTitle(conn, session, "No Work Pakcage Found", "SYS_REQ_DEPLOYMENT_INFO_WARNING_NO_WPACK_FOUND", false)+" </label></div>");
			sbContent.append("</div>");
		}
		
		for (int w=0;w<wpcArr.size();w++) {
			String wpc_id=wpcArr.get(w)[0];
			String wpc_name=wpcArr.get(w)[1];
			String wpc_status=wpcArr.get(w)[2];
			String wpc_deploy_params=wpcArr.get(w)[3];
			
			sbContent.append("<br>");
			
			sbContent.append("<div class=row>");
			sbContent.append("<div class=\"col-md-1\" align=center>");
			sbContent.append("<a href=\"javascript:showWorkPackageErrInfo('"+wpc_id+"','tdm_work_package','err_info');\">");
			sbContent.append("<span class=\"glyphicon glyphicon-share-alt\"></span>");
			sbContent.append("</a>");
			sbContent.append("</div>");
			sbContent.append("<div class=\"col-md-2\">");
			sbContent.append("<span class=badge>"+wpc_status+"</span>");
			sbContent.append("</div>");
			
			sbContent.append("<div class=\"col-md-2\" align=right>");
			sbContent.append("<b>"+wpc_id+"</b>");
			sbContent.append("</div>");
			
			sbContent.append("<div class=\"col-md-7\">");
			sbContent.append("<small>"+wpc_name+"</small>");
			sbContent.append("</div>");
			sbContent.append("</div>");
			
			
			
		}
		String title=" <font color=blue><b>["+wpl_status+"]</b></font> "+" <font color=green><b>["+wpl_id+"]</b></font> "+wpl_name;
		collapseItems.add(new String[]{"colWplSubForWpl"+wpl_id,title,sbContent.toString(),"log.png"});
		
	}
	
	
	sb.append(addCollapse("deplWplSubList_"+work_plan_id, collapseItems));
	//sb.append(addTab("deplWplSubList_"+work_plan_id, collapseItems));
	
	return sb.toString();
}

//****************************************************************
String showMadDeployProgress(Connection conn, HttpSession session, String request_id, String current_work_plan_id) {
	StringBuilder sb=new StringBuilder();
	String sql="";
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",request_id});
	
	sql="select id, concat('(', id, '). ', start_date, '  [', status ,']')  "+
		" from tdm_work_plan   "+
		" where wplan_type='DEPL' and run_type='MAIN'   " +
		" and id in (select work_plan_id from mad_request_work_plan where request_id=?) " + 
		" order by id desc";
	ArrayList<String[]> wplArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	if (wplArr.size()==0) {
		sb.append("<span class=\"label label-danger\">"+decodeStringTitle(conn, session, "No Deployent Work Plan Found For This Request", "SYS_REQ_DEPLOYMENT_INFO_WARNING_NO_WP_FOUND", false)+" : "+request_id+" </label>");
		return sb.toString();
	}
	
	String curr_wpl_id=current_work_plan_id;
	if (current_work_plan_id.equals("0"))
		curr_wpl_id=wplArr.get(0)[0];
	
	sb.append("<input type=hidden id=work_plan_request_id value="+request_id+">");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	
	sb.append("<table class=table>");
	
	sb.append("<tr>");
	
	sb.append("<td>");
	sb.append("<b>"+decodeStringTitle(conn, session, "Deployment Attempts", "SYS_REQ_DEPLOYMENT_INFO_DEPLOYMENT_ATTEMPTS", false)+" :</b> <br>");
	sb.append(makeComboArr(wplArr, "", "size=4 id=request_work_plans onchange=writeMadDeployWPLInfo('USER');", curr_wpl_id, 0)); 

	sb.append("</td>");
	
	sb.append("<td>");
	
	sb.append("</td>");
	
	sb.append("<td align=right>");
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=writeMadDeployWPLInfo('USER');>"); 
	sb.append("<span class=\"glyphicon glyphicon-refresh\"></span> Refresh");
	sb.append("</button>");
	
	sb.append("<br>");
	sb.append("<input type=checkbox  id=check_auto_refresh_deploy_info>"); 
	sb.append("Auto Refresh");
	
	sb.append("</td>");
	sb.append("</tr>");
	sb.append("</table>");
	
	
	
	
	
	
	sb.append("</div>");
	
	
	
	
	sb.append("</div>");
	sb.append("<br>");
	
	
	
	
	
	sb.append("<div class=jumbotron id=NOFADE_deploymentWPLInfoDiv style=\" border-radius: 25px; padding: 20px;    \">");
	sb.append(writeMadDeployWPLInfo(conn,session,curr_wpl_id, request_id));
	sb.append("<div>");
	
	return sb.toString();
}



//****************************************************************
String getNotificationParameters() {
	StringBuilder sb=new StringBuilder();
	
	ArrayList<String[]> confArr=new ArrayList<String[]>();
	
	confArr.add(new String[]{ "REQUEST_ID", "ID of Request" });
	confArr.add(new String[]{ "REQUEST_DESCRIPTION", "Request description" });
	confArr.add(new String[]{ "REQUEST_DATE", "Date of request" });
	confArr.add(new String[]{ "REQUEST_TYPE", "Type of request" });
	confArr.add(new String[]{ "REQUEST_USER", "Name of request owner" });
	confArr.add(new String[]{ "REQUEST_STATUS", "Current status of request" });
	confArr.add(new String[]{ "ACTION", "Action taken in this step" });
	confArr.add(new String[]{ "OLD_STATUS", "Status before action" });
	confArr.add(new String[]{ "NEW_STATUS", "Status after action" });
	confArr.add(new String[]{ "ACTION_USER", "Action taken by" });
	confArr.add(new String[]{ "ACTION_NOTE", "Note of action" });
	confArr.add(new String[]{ "ACTION_DATE", "Action date" });
	
	for (int i=0;i<confArr.size();i++) {
		String param_name=confArr.get(i)[0];
		String param_Desc=confArr.get(i)[1];
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-4\" align=right>");
		sb.append("<b>${"+param_name+"}</b>"); 
		sb.append("</div>");
		sb.append("<div class=\"col-md-8\">");
		sb.append(param_Desc); 
		sb.append("</div>");
		sb.append("</div>");
		sb.append("<br>");
		
	}
	
	
	
	return sb.toString();
}

//****************************************************************************************

void setMadReqAppMemberSkip(Connection conn, HttpSession session, String req_app_member_id, String to_skip, String skip_reason) {
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="update mad_request_application_member set to_skip=?, skip_reason=?  where id=?";
	bindlist.add(new String[]{"STRING",to_skip});
	bindlist.add(new String[]{"STRING",skip_reason});
	bindlist.add(new String[]{"INTEGER",req_app_member_id});
	 
	execDBConf(conn, sql, bindlist);
	
	createHistory(conn, session, "UPDATE", "mad_request_application_member", req_app_member_id);
	
}

//****************************************************************************************

void setMadReqPlatformSkip(Connection conn, HttpSession session, String request_id, String platform_id, String to_skip) {
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	bindlist.add(new String[]{"INTEGER",request_id});
	bindlist.add(new String[]{"INTEGER",platform_id});
	
	
	String hist_sql="select id from mad_request_platform_skip "+
			" where request_id=? and platform_id=?";
	ArrayList<String[]> histArr=getDbArrayConf(conn, hist_sql, Integer.MAX_VALUE, bindlist);
	for (int h=0;h<histArr.size();h++) {
		String hist_id=histArr.get(h)[0];
		createHistory(conn, session, "DELETE", "mad_request_platform_skip", hist_id);
	}

	 
	sql="delete from mad_request_platform_skip where request_id=? and platform_id=?";
	execDBConf(conn, sql, bindlist);
	
	if (to_skip.equals("YES")) {
		String next_val_sql="SELECT AUTO_INCREMENT FROM information_schema.tables WHERE table_name = 'mad_request_platform_skip' AND table_schema = DATABASE()";
		String next_id=getDBSingleVal(conn, next_val_sql);
		
		
		sql="insert into mad_request_platform_skip (id, request_id, platform_id) values (?, ?, ?)";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",next_id});
		bindlist.add(new String[]{"INTEGER",request_id});
		bindlist.add(new String[]{"INTEGER",platform_id});
		
		execDBConf(conn, sql, bindlist);
		
		createHistory(conn, session, "INSERT", "mad_request_platform_skip", next_id);
	}
	
}




//********************************************************************************
String loadConfigurationMenu(
		Connection conn,
		HttpSession session) {
	
	String sql="";
	StringBuilder sb=new StringBuilder();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	ArrayList<String[]> collapseItems=new ArrayList<String[]>();
	sql="";
	
	
	
	
	collapseItems.clear();
	if (checkrole(session, "MADRM") || checkrole(session, "ADMIN"))
		collapseItems.add(new String[]{"colLangs","Language","","lang.png","javascript:makeMadLangList()"});
	if (checkrole(session, "MADRM") || checkrole(session, "ADMIN"))
		collapseItems.add(new String[]{"colStrings","String","","string.png","javascript:makeMadStringList()"});
	if (checkrole(session, "MADRM") || checkrole(session, "ADMIN"))
		collapseItems.add(new String[]{"colClasses","Classes","","class.png","javascript:makeMadClassList()"});
	if (checkrole(session, "MADRM") || checkrole(session, "ADMIN"))
		collapseItems.add(new String[]{"colRepositories","Repository","","repository.png","javascript:makeMadRepositoryList()"});
	if (checkrole(session, "MADRM") || checkrole(session, "ADMIN"))
		collapseItems.add(new String[]{"colDrivers","Drivers","","driver.png","javascript:makeMadDriverList()"});
	if (checkrole(session, "MADRM") || checkrole(session, "ADMIN"))
		collapseItems.add(new String[]{"colPlatformTypes","Platform Type","","plattype.png","javascript:makeMadPlatformTypeList()"}); 
	if (checkrole(session, "MADRM") || checkrole(session, "ADMIN") || checkrole(session, "MADPLN"))
		collapseItems.add(new String[]{"colPlatforms","Platform","","platform.png","javascript:makeMadPlatformList()"});
	if (checkrole(session, "MADRM") || checkrole(session, "ADMIN"))
		collapseItems.add(new String[]{"colEnvironments","Environment","","environment.png","javascript:makeMadEnvironmentList()"});
	if (checkrole(session, "MADRM") || checkrole(session, "ADMIN"))
		collapseItems.add(new String[]{"colFlexFields","Fields","","field.png","javascript:makeMadFlexFieldList()"});
	if (checkrole(session, "MADRM") || checkrole(session, "ADMIN"))
		collapseItems.add(new String[]{"colModifierGroups","Checker & Modifier Group","","modifier.png","javascript:makeMadModifierGroupList()"});
	if (checkrole(session, "MADRM") || checkrole(session, "ADMIN"))
		collapseItems.add(new String[]{"colRequestTypes","Request Type","","reqtype.png","javascript:makeMadRequestTypeList()"}); 
	if (checkrole(session, "MADRM") || checkrole(session, "ADMIN"))
		collapseItems.add(new String[]{"colApplications","Application","","application.png","javascript:makeMadApplicationList()"});
	if (checkrole(session, "MADRM") || checkrole(session, "ADMIN"))
		collapseItems.add(new String[]{"colPermissions","Permission","","permission.png","javascript:makeMadPermissionList()"});
	if (checkrole(session, "MADRM") || checkrole(session, "ADMIN"))
		collapseItems.add(new String[]{"colUsers","User","","user.png","javascript:makeMadUserList()"});
	if (checkrole(session, "MADRM") || checkrole(session, "ADMIN"))
		collapseItems.add(new String[]{"colGroups","Group","","group.png","javascript:makeMadGroupList()"});
	if (checkrole(session, "MADRM") || checkrole(session, "ADMIN"))
		collapseItems.add(new String[]{"colEmailTemplates","Email","","email.png","javascript:makeMadEmailTemplateList()"});
	if (checkrole(session, "MADRM") || checkrole(session, "ADMIN"))
		collapseItems.add(new String[]{"colMethods","Method","","method.png","javascript:makeMadMethodList()"});
	if (checkrole(session, "MADRM") || checkrole(session, "ADMIN"))
		collapseItems.add(new String[]{"colFlows","Flow","","flow.png","javascript:makeMadFlowList()"});
	if (checkrole(session, "MADRM") || checkrole(session, "ADMIN"))
		collapseItems.add(new String[]{"colDeploymentSlots","Deployment Plan","","slot.png","javascript:makeMadDeploymentSlotList()"});
	if (checkrole(session, "MADRM") || checkrole(session, "ADMIN"))
		collapseItems.add(new String[]{"colDatabases","Database","","database.png","javascript:makeDatabaseList()"});
	if (checkrole(session, "MADRM") || checkrole(session, "ADMIN"))
		collapseItems.add(new String[]{"colDashSqls","Dashboard Sql","","sql.png","javascript:makeMadDashSqlList()"});
	if (checkrole(session, "MADRM") || checkrole(session, "ADMIN"))
		collapseItems.add(new String[]{"colDashParameters","Dashboard Filter","","filter.png","javascript:makeMadDashParameterList()"});
	if (checkrole(session, "MADRM") || checkrole(session, "ADMIN"))
		collapseItems.add(new String[]{"colDashViews","Dashboard View","","view.png","javascript:makeMadDashViewList()"});

	
	sb.append(addTab("madConfigurationMenu",collapseItems));

	
	
	return sb.toString();
}


//********************************************************
public Date getNextDayOfWeek(int week_day_id) {
	Calendar chcal=Calendar.getInstance();
	chcal.setTimeInMillis(System.currentTimeMillis());
	Integer[] daynums=new Integer[]{
				chcal.MONDAY,
				chcal.TUESDAY,
				chcal.WEDNESDAY,
				chcal.THURSDAY,
				chcal.FRIDAY,
				chcal.SATURDAY,
				chcal.SUNDAY
				};
	
	int target_day=daynums[week_day_id];
	
	while(true) {
		if (chcal.get(chcal.DAY_OF_WEEK)==target_day) break;
		chcal.add(chcal.DAY_OF_WEEK, 1);
	}
	
	
	
	return chcal.getTime();

}

//********************************************************
ArrayList<String[]> getSlotList(Connection conn, HttpSession session, String slot_id) {
	String mysql_format="%d.%m.%Y %H:%i:%s";
	String java_mysql_format="dd.MM.yyyy HH:mm:ss";
	String JAVA_DATE_FORMAT="dd/MM/yyyy";
	
	Date dnow=new Date();
	
	
	ArrayList<String[]> ret1=new ArrayList<String[]>();
	
	String sql="select "+
			"	d.id, d.slot_name, "+
			"   date_format(d.daily_time,?) daily_time, "+
			"   d.hourly_day_id, d.hourly_minute_id, "+
			"   m.slot_name, m.slot_type, freeze_period, freeze_period_after "+
			"	from  mad_deployment_slot_detail d, mad_deployment_slot m "+
			"	where d.slot_id=m.id and d.is_valid='YES' and m.is_valid='YES' " + 
			"	and slot_id=? "	+
			"   order by daily_time, hourly_day_id, hourly_minute_id";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	ArrayList<String[]> allTimes=new ArrayList<String[]>();
	if (slot_id.length()>0) {
		bindlist.add(new String[]{"STRING",mysql_format});
		bindlist.add(new String[]{"INTEGER",slot_id});
		allTimes=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	}
	
	String[] days=new String[]{"Mon","Tue","Wed","Thu","Fri","Sat","Sun"};
	Calendar cal=Calendar.getInstance();
	cal.setTimeInMillis(System.currentTimeMillis());
	Integer[] daynums=new Integer[]{cal.MONDAY,cal.TUESDAY,cal.WEDNESDAY,cal.THURSDAY,cal.FRIDAY,cal.SATURDAY,cal.SUNDAY};
	
	for (int i=0;i<allTimes.size();i++) {
		String slot_detail_id=allTimes.get(i)[0];
		String slot_detail_name=allTimes.get(i)[1];
		String daily_time=allTimes.get(i)[2];
		int hourly_day_id=Integer.parseInt(allTimes.get(i)[3]);
		int hourly_minute_id=Integer.parseInt(allTimes.get(i)[4]);
		String slot_name=allTimes.get(i)[5];
		String slot_type=allTimes.get(i)[6];
		String freeze_period=allTimes.get(i)[7];
		String freeze_period_after=allTimes.get(i)[8];
		
		Date ref_time=new Date();
		
		
		String readable_slot_name=slot_detail_name;
		if (slot_type.equals("HOURLY")) {
			try {
				String hours="00000"+(hourly_minute_id / 60);
				String minutes="00000"+(hourly_minute_id % 60);
				String timestr=hours.substring(hours.length()-2,hours.length())+":"+minutes.substring(minutes.length()-2,minutes.length());
				ref_time=getNextDayOfWeek(hourly_day_id); 
				String StrOfNextDayName=new SimpleDateFormat(JAVA_DATE_FORMAT).format(ref_time);
				readable_slot_name=timestr+"@"+days[hourly_day_id];
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		
		try {
			
			if (slot_type.equals("DAILY")) 
				ref_time= new SimpleDateFormat(java_mysql_format).parse(daily_time);
			else {
				ref_time= getNextDayOfWeek(hourly_day_id);
				
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			continue;
		}
		
		
		Date comp_start_date=ref_time;
		Date comp_end_date=ref_time;
		
		//if current date is after this release date
		if (slot_type.equals("DAILY") && dnow.after(ref_time))  {
	
			Calendar calendar = Calendar.getInstance();
			
			calendar.clear();
			calendar.setTime(dnow);
			calendar.add(calendar.MINUTE, -100);
			comp_start_date=calendar.getTime();
			
			
			calendar.clear();
			calendar.setTime(dnow);
			calendar.add(calendar.MINUTE, +100);
			comp_end_date=calendar.getTime();
		}
			
		
		int minutes_to_decrease=0;
		int minutes_to_increase=0;
		try {minutes_to_decrease=Integer.parseInt(freeze_period);} catch(Exception e) {}
		try {minutes_to_increase=Integer.parseInt(freeze_period_after);} catch(Exception e) {}
		
		if (minutes_to_decrease>0) {
			Calendar calendar = Calendar.getInstance();
			calendar.clear();
			calendar.setTime(comp_start_date);
			calendar.add(calendar.MINUTE, -1*minutes_to_decrease);
			comp_start_date=calendar.getTime();
		}
	
		if (minutes_to_increase>0) {
			Calendar calendar = Calendar.getInstance();
			calendar.clear();
			calendar.setTime(comp_end_date);
			calendar.add(calendar.MINUTE, minutes_to_increase);
			comp_end_date=calendar.getTime();
		}
	
		
		if (dnow.after(comp_start_date) && dnow.before(comp_end_date) ) continue;
		
		String formatted_ref_date=new SimpleDateFormat(JAVA_DATE_FORMAT).format(ref_time);
		ret1.add(new String[]{slot_detail_id,"["+formatted_ref_date+"] "+ readable_slot_name});
		
	
	}
	
	return ret1;
	
	
}

//********************************************************************************************
String showMadDeploymentSlot(Connection conn, HttpSession session, String request_id, String environment_id) {
	StringBuilder sb=new StringBuilder();
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	String sql="";
	
	sql="select r.deployment_slot_id, r.deployment_slot_detail_id, DATE_FORMAT(r.deployment_date,?), rt.deployment_slot_id "+ 
		" 	from mad_request r, mad_request_type rt where r.request_type_id=rt.id and r.id=?";
	bindlist.clear();
	bindlist.add(new String[]{"STRING",mysql_format});
	bindlist.add(new String[]{"INTEGER",request_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==0) return "no request with id " + request_id;
	
	String req_deployment_slot_id=arr.get(0)[0];
	String req_deployment_slot_detail_id=arr.get(0)[1];
	String req_deployment_date=nvl(arr.get(0)[2],"");
	String reqtype_deployment_slot_id=arr.get(0)[3];
	
	
	String env_deployment_slot_id="";
			
	if (reqtype_deployment_slot_id.length()>0) {
		env_deployment_slot_id=reqtype_deployment_slot_id;
	} else {
		sql="select deployment_slot_id from mad_environment where id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",environment_id});
		arr=getDbArrayConf(conn, sql, 1, bindlist);
		
		if (arr.size()==0) return "no environment with id " + environment_id;
		
		env_deployment_slot_id=arr.get(0)[0];
	}
	
	if (env_deployment_slot_id.length()==0) return "deployment slot not set for environment : " + environment_id;
	
	sql="select slot_type from mad_deployment_slot  where id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",env_deployment_slot_id});
	arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==0) return "no deployment slot with id " + env_deployment_slot_id;
	
	sb.append("<input type=hidden id=deployment_slot_request_id value=\""+request_id+"\">");
	
	
	String slot_type=arr.get(0)[0];
	if (slot_type.equals("FREE")) {
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-12\">");
		sb.append("<b> Deployment Time : </b>");
		sb.append("</div>");
		sb.append("</div>");
		
		if (req_deployment_date.length()==0) {
			//req_deployment_date="3.4.2015 11:12:13";
			String DT_FORMAT="dd.MM.yyyy HH:mm:ss";
			Date now=new Date();
			try {
				SimpleDateFormat df=new SimpleDateFormat(DT_FORMAT);
				req_deployment_date=df.format(now);
			} catch(Exception e) {};
			
		}
		
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-12\">");
		sb.append(makeDate("0", "free_deployment_time", req_deployment_date, ""));
		sb.append("</div>");
		sb.append("</div>");
		
	}
	else {
		ArrayList<String[]> deplArr=getSlotList(conn, session, env_deployment_slot_id);
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-4\" align=right>");
		sb.append("<span class=\"label label-info\"> Deployment Slot : </span>");
		sb.append("</div>");
		
		sb.append("<div class=\"col-md-8\">");
		sb.append(makeComboArr(deplArr, "", "size=1 id=list_deployment_slot_detail_id", req_deployment_slot_detail_id, 0));
		sb.append("</div>");
		sb.append("</div>");
	}
	
	
	
	return sb.toString();
}

//********************************************************************************************
void setMadDeploymentSlot(Connection conn, HttpSession session, String request_id, String slot_detail_id, String free_time) {
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	String sql="";
	
	String JAVA_DATE_FORMAT="dd.MM.yyyy HH:mm:ss";

	String date_to_set=free_time;
	String slot_id="0";
			
	if (!slot_detail_id.equals("0")) {
		sql="select hourly_day_id, hourly_minute_id, DATE_FORMAT(daily_time,?) daily_time, m.id slot_id, m.slot_type " + 
				" from mad_deployment_slot_detail d, mad_deployment_slot m " +
				" where d.slot_id=m.id and d.id=?";
			bindlist.clear();
			bindlist.add(new String[]{"STRING",mysql_format});
			bindlist.add(new String[]{"INTEGER",slot_detail_id});
			
			ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
			
			if (arr.size()==0) {
				System.out.println("No such slot detail found id : "  + slot_detail_id);
				return;
			}
			
			int hourly_day_id=Integer.parseInt(arr.get(0)[0]);
			int hourly_minute_id=Integer.parseInt(arr.get(0)[1]);
			String daily_time=arr.get(0)[2];
			slot_id=arr.get(0)[3];
			String slot_type=arr.get(0)[4];
			
			if (slot_type.equals("DAILY")) {
				date_to_set=daily_time;
			}
			else { 
				Calendar cal=Calendar.getInstance(); 
				cal.setTime(getNextDayOfWeek(hourly_day_id));
				cal.set(cal.HOUR_OF_DAY, 0);
				cal.set(cal.MINUTE, 0);
				cal.set(cal.SECOND, 0);
				cal.set(cal.MILLISECOND, 0);
				
				cal.add(cal.MINUTE, hourly_minute_id);
				
				date_to_set=new SimpleDateFormat(JAVA_DATE_FORMAT).format(cal.getTime());
				
			}
	}
	


	
	sql="update mad_request " + 
		" set deployment_slot_id=?, deployment_slot_detail_id=?, " + 
		" deployment_date=STR_TO_DATE(?,?)  " +
		" where id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",slot_id});
	bindlist.add(new String[]{"INTEGER",slot_detail_id});
	bindlist.add(new String[]{"STRING",date_to_set});
	bindlist.add(new String[]{"STRING",mysql_format});
	bindlist.add(new String[]{"INTEGER",request_id});
	
	execDBConf(conn, sql, bindlist);
	
	createHistory(conn, session, "UPDATE", "mad_request", request_id);
	
}

//----------------------------------------------------------------------------------------------
String changeWorkPlanProcessLimit(Connection conn, HttpSession session, String work_plan_id, String limit_type, String limit) {
	StringBuilder sb=new StringBuilder();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	String sql="";
	
	sql="update tdm_work_plan set worker_limit=? ";
	if (limit_type.equals("master")) sql="update tdm_work_plan set master_limit=? ";
	
	sql=sql + "where id=?";
	
	try {
		int limit_INT=Integer.parseInt(limit);
		
		
		bindlist=new ArrayList<String[]>();
		bindlist.add(new String[]{"INTEGER", ""+limit_INT});
		bindlist.add(new String[]{"INTEGER", work_plan_id});
		execDBConf(conn, sql, bindlist);
		
	} catch(Exception e) {
		e.printStackTrace();
	}

	return sb.toString();
}
//-----------------------------------------------------------------------------------------------
String makeProcessSummary(Connection conn, HttpSession session, boolean readonly) {
	StringBuilder sb=new StringBuilder();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	String sql="";
	
	//kill stalled manager
	sql="delete from tdm_manager where  last_heartbeat<DATE_ADD(NOW(), INTERVAL -15 MINUTE)";
	bindlist.clear();
	execDBConf(conn, sql, bindlist);
	
	//kill stalled masters
	sql="delete from tdm_master where  last_heartbeat<DATE_ADD(NOW(), INTERVAL -15 MINUTE)";
	bindlist.clear();
	execDBConf(conn, sql, bindlist);
	
	//kill stalled workers
	sql="delete from tdm_worker where  last_heartbeat<DATE_ADD(NOW(), INTERVAL -15 MINUTE)";
	bindlist.clear();
	execDBConf(conn, sql, bindlist);
	
	
	sql="select status, last_heartbeat, hostname, cancel_flag from tdm_manager";
	bindlist.clear();
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	
	String status="";
	String last_heartbeat="";
	String hostname="";
	String cancel_flag="";

	if (arr.size()==1) {
		status=arr.get(0)[0];
		last_heartbeat=arr.get(0)[0];
		hostname=arr.get(0)[0];
		cancel_flag=arr.get(0)[0];
	}
	else 
	{
		status="stopped";
	}
	
	
	String status_img="running.gif";
	if (status.equals("stopped")) status_img="stopping.png";
	if (cancel_flag.equals("YES")) status_img="cancelling.png";
	
	sb.append("<table border=0 cellpadding=0 cellspacing=0 width=\100%\">");
	
	sb.append("<tr>");
	sb.append("<td nowrap><small>Manager : </small></td>");
	sb.append("<td nowrap>");
	sb.append("<img src=\"img/"+status_img+"\" width=24 height=24 data-toggle=\"popover\" title=\""+ hostname +" ["+last_heartbeat+"]\"> ");
	
	String last_manager_heartbeat=getDBSingleVal(conn, "select DATE_FORMAT(last_heartbeat,'%H:%i:%s') last_heartbeat from tdm_manager");

	
	if (readonly) 
		sb.append("[<font color=green><b><small><small>"+last_manager_heartbeat+"</small></small></b></font>]");
	else  {
		if (status.equals("RUNNING") && !cancel_flag.equals("YES") ) {
				sb.append(
				    " <button type=\"button\" class=\"btn btn-sm  btn-danger\" onclick=setProcessStatus('manager',0,'stop')  data-toggle=\"tooltip\" data-placement=\"left\" title=\"Stop Manager\">\n" +
					  " <span class=\"glyphicon glyphicon-stop\" aria-hidden=\"true\" alt=\"Stop\">\n" +" </span>\n" +
					" </button>\n" +
			
					" <button type=\"button\" class=\"btn btn-sm  btn-warning\" onclick=setProcessStatus('manager',0,'restart')  data-toggle=\"tooltip\" data-placement=\"left\" title=\"Restart Manager\">\n" +
					  " <span class=\"glyphicon glyphicon-refresh\" aria-hidden=\"true\" alt=\"Restart\">\n" +" </span>\n" +
					" </button>\n"+
					" [<font color=green><b><small><small>"+last_manager_heartbeat+"</small></small></b></font>]");
		}
		
		if (status.equals("stopped")) {
			sb.append(
				" <button type=\"button\" class=\"btn btn-sm btn-success\" onclick=setProcessStatus('manager',0,'start') data-toggle=\"tooltip\" data-placement=\"left\" title=\"Start\">\n" +
				  " <span class=\"glyphicon glyphicon-play\" aria-hidden=\"true\" alt=\"Start\">\n" +" </span>\n" +
				" </button>\n");
		}
	} //if (!readonly)
	
	
	sb.append("</td>");
	
	//int p_target_worker_count=0;
	int p_target_master_count=0;

	try {
			p_target_master_count=Integer.parseInt(nvl(getParamByName(conn, "TARGET_MASTER_COUNT"),"0"));
			//p_target_worker_count=Integer.parseInt(nvl(getParamByName(conn, "TARGET_WORKER_COUNT"),"0"));	
		} catch(Exception e) {
			p_target_master_count=0;
			//p_target_worker_count=0;
		}
	
	
	sb.append("<td nowrap><small> Master : </small></td>");
	sb.append("<td nowrap>");
	if (readonly)
		sb.append("<font color=red>"+p_target_master_count+"</font>");
	else {
		sb.append("<input type=text name=TARGET_MASTER_COUNT id=TARGET_MASTER_COUNT size=2 maxlength=2 value=\""+p_target_master_count+"\"  style=\"color:red; \" onchange=setProcessStatus('master',this.value,'set_limit')>");
		sb.append(" <a href=\"javascript:showProcessWindow('master','ALL');\"><span class=\"glyphicon glyphicon-share-alt\"></span></a>");
		}
	sb.append("</td>");
	
	
	/*
	sb.append("<td nowrap><small> Worker : </small></td>");
	
	sb.append("<td nowrap>");
	if (readonly)
		sb.append("<font color=red>"+p_target_worker_count+"</font>");
	else {
			sb.append("<input type=text name=TARGET_WORKER_COUNT id=TARGET_WORKER_COUNT size=2 maxlength=2 value=\""+p_target_worker_count+"\"  style=\"color:red; \" onchange=setProcessStatus('worker',this.value,'set_limit')>");
			sb.append(" <a href=\"javascript:showProcessWindow('worker','ALL');\"><span class=\"glyphicon glyphicon-share-alt\"></span></a>");		
		}
	
	sb.append("</td>");
	
	*/
	
	sb.append("</tr>");
	
	
	sb.append("</table>");
	
	
	
	
	
	return sb.toString();
}

//-----------------------------------------------------------------------------------------------
String makeWorkPlanList(Connection conn, HttpSession session, 
		String work_plan_type_filter, 
		String work_plan_status_filter,
		String refresh_interval) {
	StringBuilder sb=new StringBuilder();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	String sql="";
	
	session.setAttribute("work_plan_type_filter", work_plan_type_filter);
	session.setAttribute("work_plan_status_filter", work_plan_status_filter);
	session.setAttribute("refresh_interval", nvl(refresh_interval,"manual"));
	
	sql="select "+
			" id, "+
			" wplan_type, "+
			" status, "+
			" work_plan_name,  " +
			" master_limit,  " +
			" worker_limit,  " +
			" DATE_FORMAT(start_date,?) start_date, " + 
			" DATE_FORMAT(end_date,?) end_date, " +
			" app_id, env_id " + 
			" from tdm_work_plan";
	
	bindlist.add(new String[]{"STRING",""+mysql_format});
	bindlist.add(new String[]{"STRING",mysql_format});
	
	if (work_plan_type_filter.length()>0) {
		if (!sql.contains("WHERE")) sql=sql+ " WHERE ";
		else sql=sql+ " AND ";
		
		sql=sql+ " wplan_type=?";
		bindlist.add(new String[]{"STRING",work_plan_type_filter});
	}
	
	if (work_plan_status_filter.length()>0) {
		if (!sql.contains("WHERE")) sql=sql+ " WHERE ";
		else sql=sql+ " AND ";
		
		sql=sql+ "  status=?";
		bindlist.add(new String[]{"STRING",work_plan_status_filter});
	}
		
	sql=sql+ " order by 1 desc";
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 100, bindlist);
	
	if (arr.size()==0) return "<br><font color=red> ! No work plan matched...</font>";

	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	
	int wpno=0;
	int wpperline=3;
	int col_md_size=(12-wpperline) /wpperline;
	
	
	
	for (int i=0;i<arr.size();i++) {
			String wp_id=arr.get(i)[0];
			String wplan_type=arr.get(i)[1];
			String status=arr.get(i)[2];
			String wplan_name=arr.get(i)[3];
			String master_limit=arr.get(i)[4];
			String worker_limit=arr.get(i)[5];
			String start_date=arr.get(i)[6];
			String end_date=arr.get(i)[7];
			String app_id=arr.get(i)[8];
			String env_id=arr.get(i)[9];
			
			wpno++;
			
			if (wpno % wpperline==1) sb.append("<div class=row>");
			
			String bgcolor="#996633";
			if (status.equals("NEW")) bgcolor="#999966";
			if (status.equals("PREPARATION")) bgcolor="#996633";
			if (status.equals("RUNNING")) bgcolor="#FF9933";
			if (status.equals("FINISHED")) bgcolor="#004700";
			if (status.equals("CANCELLED")) bgcolor="#B22400";
			if (status.equals("PAUSED")) bgcolor="#666633";
			if (status.equals("FAILED")) bgcolor="#B22400";
			
			
			String rounding_corner_style=" style=\"background: #FFFFD1; "+
							"height=300px; "+
							"-moz-border-radius: 6px; "+
							"-webkit-border-radius:6px; "+
							"border-radius: 6px; "+
							"box-shadow: 6px 6px 5px #888888; "+
							" border: 5px ridge #98bf21;padding:3px; border-color: #CCCCFF; " + 
							" \" ";
			
			if (wpno % wpperline!=1) {
				sb.append("<div class=\"col-md-1\">");
				sb.append("</div>");
			}

			
					
			sb.append("<div class=\"col-md-"+col_md_size+"\" id=wpDivForWpID"+wp_id+" "+rounding_corner_style+">");
			
			
		
			
			//---------------------
			sb.append("<div class=row>");
			
			rounding_corner_style=" style=\"background: "+bgcolor+"; "+
					"height=300px;  \" ";
			
			sb.append("<div class=\"col-md-3\" align=center "+rounding_corner_style+">"); //left div
			
			sb.append("<b><font color=white>["+wp_id+"]</font></b>");
			sb.append("<br>");
			sb.append("<font color=lightgreen><span class=\"glyphicon glyphicon-folder-open\" onclick=openWorkPlanWindow('"+wp_id+"');></span></font>");
			sb.append("&nbsp;<font color=lightblue><span class=\"glyphicon glyphicon-cog\" onclick=editWorkPlan('"+wp_id+"');></span></font>");
			sb.append("<br>");
			sb.append("</div>");
			
			
			
			sb.append("<div class=\"col-md-9\">");  //main div md 9
			
			
			
			sb.append("<div class=row>");
			sb.append("<div class=\"col-md-10\" align=center>");
			sb.append("  <small><small><b><font color=#663300>"+wplan_name+"</font></b></small></small></span>");
			sb.append("</div>");
			
			sb.append("<div class=\"col-md-2\" align=left>");
			sb.append("<img width=18 height=18 src=\"img/wptypes/"+wplan_type+".png\" >");
			sb.append("</div>");
			
			sb.append("</div>");
			
			sb.append("<div class=row>");
			sb.append("<div class=\"col-md-4\" align=right><font color=#1A1A4C><small>Status :</small></font></div>");
			sb.append("<div class=\"col-md-8\">");
			sb.append("<font color=#003300><small><b>"+status+"</b></small></font>");
			sb.append("</div>");
			sb.append("</div>");
			
			
			
			int progress=getProgressRate(conn, wp_id);
			String progress_str="<div class=\"progress\" style=\"width:80%;  background-color:gray; \">"+
								"<div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\""+progress+"\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: "+progress+"%;\">"+
							 	progress+" %"+
								"</div>"+
								"</div>";
			
								
			sb.append("<div class=row>");
			sb.append("<div class=\"col-md-4\" align=right><font color=#1A1A4C><small>Progress :</small></font></div>");
			sb.append("<div class=\"col-md-8\">");
			sb.append(progress_str);
			sb.append("</div>");
			sb.append("</div>");
			
			
			
			if (wplan_type.equals("DISC") || wplan_type.equals("MASK") || wplan_type.equals("MASK2") || wplan_type.equals("COPY")) {
				
				String app_name=getDBSingleVal(conn,"select name from tdm_apps where id="+app_id);
				String env_name=getDBSingleVal(conn,"select name from tdm_envs where id="+env_id);
				
				sb.append("<div class=row>");
				sb.append("<div class=\"col-md-4\" align=right><font color=#1A1A4C><small>App. :</small></font></div>");
				sb.append("<div class=\"col-md-8\"><font color=#003300><small><b>"+nvl(app_name,"-")+"</b></small></font></div>");
				sb.append("</div>");
				
				sb.append("<div class=row>");
				sb.append("<div class=\"col-md-4\" align=right><font color=##1A1A4C><small>Env. :</small></font></div>");
				sb.append("<div class=\"col-md-8\"><font color=#003300><small><b>"+nvl(env_name,"-")+"</b></small></font></div>");
				sb.append("</div>");
					
			}


			sb.append("<div class=row>");
			sb.append("<div class=\"col-md-4\" align=right><font color=#1A1A4C><small>Start :</small></font></div>");
			sb.append("<div class=\"col-md-8\"><font color=#003300><small><b>"+start_date+"</b></small></font></div>");
			sb.append("</div>");

			if (end_date.length()>0) {
				sb.append("<div class=row>");
				sb.append("<div class=\"col-md-4\" align=right><font color=#1A1A4C><small>Finish :</small></font></div>");
				sb.append("<div class=\"col-md-8\"><font #003300=yellow><small><b>"+end_date+"</b></small></font></div>");
				sb.append("</div>");
			}
			
			
			sb.append("<div class=row>");
			sb.append("<div class=\"col-md-4\" align=right><font color=#1A1A4C><small>Process :</small></font></div>");
			sb.append("<div class=\"col-md-8\"><font color=#003300><small><b>"+master_limit+" / "+worker_limit+" </b></small></font></div>");
			sb.append("</div>");
			
			
			
			//---------------------
			
			sb.append("</div>"); // sb.append("<div class=\"col-md-9\">"); 
			sb.append("</div>");
			sb.append("</div>");
			
			if (wpno % wpperline==0)  {
				sb.append("</div>");
				
				sb.append("<br>");
			}
			
	}
	
	sb.append("</div>");
	sb.append("</div>");

	
	
	return sb.toString();
}
//-----------------------------------------------------------------------------------------------
String makeWorkPlanDiv(Connection conn, HttpSession session) {
	StringBuilder sb=new StringBuilder();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	String sql="";
	
	String work_plan_type_filter=nvl((String) session.getAttribute("work_plan_type_filter"),"");
	String work_plan_status_filter=nvl((String) session.getAttribute("work_plan_status_filter"),"");
	String curr_refresh_interval=nvl((String) session.getAttribute("refresh_interval"),"manual");
	
	
	
	sb.append("<table border=0 cellspacing=0 cellpadding=0 width=\"100%\">");
	sb.append("<tr>");
	
	
	
	
	
	
	sb.append("<td nowrap><b>Type : </b></td>");
	sb.append("<td>");	
	
	sql=	" select '','All' from dual union all "+
			" select 'DEPL','Deployment' from dual";
	sb.append(makeCombo(conn, sql, "", "size=0 id=work_plan_type_filter onchange=makeWorkPlanList() ", work_plan_type_filter, 120));
	
	sb.append("</td>");

	
	
	
	sb.append("<td nowrap><b>Status : </b></td>");
	sb.append("<td>");	
	sb.append("<div class=\"col-md-8\">");
	sql=	"select '','All' from dual union all "+
			"select  'NEW','New' from dual union all "+
			" select 'RUNNING','Running' from dual union all " +
			" select 'COMPLETED','Completed' from dual union all"+
			" select 'FINISHED','Finished' from dual union all"+
			" select 'CANCELLED','Cancelled' from dual union all"+
			" select 'PAUSED','Paused' from dual union all"+
			" select 'PREPARATION','Preparation' from dual union all"+
			" select 'INVALID','Invalid' from dual";
	sb.append(makeCombo(conn, sql, "", "size=0 id=work_plan_status_filter onchange=makeWorkPlanList() ", work_plan_status_filter, 120));
	sb.append("</td>");	
	
	
	sb.append("<td nowrap><b>Refresh : </b></td>");
	
	sb.append("<td nowrap>");	
	ArrayList<String[]> arr=new ArrayList<String[]>();
	arr.add(new String[]{"manual","Manual"});
	arr.add(new String[]{"1","Realtime"});
	arr.add(new String[]{"15","15 sec"});
	arr.add(new String[]{"30","30 sec"});
	arr.add(new String[]{"60","1 min"});
	arr.add(new String[]{"120","2 min"});
	arr.add(new String[]{"180","3 min"});
	arr.add(new String[]{"300","5 min"});
	arr.add(new String[]{"600","10 min"});
	arr.add(new String[]{"1200","20 min"});
	arr.add(new String[]{"1800","30 min"});
	sb.append(makeComboArr(arr, "", "size=1 id=refresh_interval onchange=setRefreshInterval()", curr_refresh_interval, 0));
	sb.append("</td>");
	
	sb.append("<td nowrap>");	
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=makeWorkPlanList()>");
	sb.append("<span class=\"glyphicon glyphicon-refresh\"></span>");
	sb.append("</button>");
	sb.append("</td>");
	
	sb.append("</tr>");
	sb.append("</table>");
	
	return sb.toString();
}


String drawMonitoringAreas(Connection conn, ServletContext application, HttpSession session) {
	StringBuilder sb=new StringBuilder();
	
	boolean is_process_readonly=false;
	if (!checkrole(session, "ADMIN")) is_process_readonly=true;
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-6\">");
	
	
	sb.append(makeProcessSummary(conn, session, is_process_readonly));
	sb.append("</div>");
	sb.append("<div class=\"col-md-6\">");
	sb.append(makeWorkPlanDiv(conn, session));
	sb.append("</div>");
	
	sb.append("<div class=row>");
	
	
	sb.append("<div class=\"col-md-12\" id=monitoringRightDiv style=\"min-height: 500px; max-height: 500px; overflow-y: scroll;\">");
	
	String work_plan_type_filter=nvl((String) session.getAttribute("work_plan_type_filter"),"");
	String work_plan_status_filter=nvl((String) session.getAttribute("work_plan_status_filter"),"");
	String curr_refresh_interval=nvl((String) session.getAttribute("refresh_interval"),"manual");
	
	sb.append("<div id=workPlanListDiv>");
	sb.append(makeWorkPlanList(conn, session, work_plan_type_filter, work_plan_status_filter,curr_refresh_interval));
	sb.append("</div>");
	sb.append("</div>"); 
	
	sb.append("</div>");
	    
	    
	return sb.toString();
}


//---------------------------------------------------
String makeProcessWindow(Connection conn, HttpSession session, String ptype, String pstatus) {
	StringBuilder sb=new StringBuilder();
	
	String sql="select id, status, hostname, start_date, cancel_flag, "+
				" last_heartbeat, TIMESTAMPDIFF(MINUTE,last_heartbeat,NOW()) last_heartbeat_as_minute "+
				" from tdm_"+ptype;
	
	if (!pstatus.equals("ALL")) {
		sql = sql + " where status='"+ pstatus +"'";
	}
	
	sql=sql + " order by id";
	
	
	
	ArrayList<String[]> pArr=getDbArrayConf(conn, sql, 1000, new ArrayList<String[]>());
	
	sb.append("<div class=\"panel panel-primary\">");

	sb.append("<div class=\"panel-heading\">");

	if (ptype.equals("master")) 
		sb.append("Masters ("+pstatus+") : <span class=badge>"+pArr.size()+"</span>");

	if (ptype.equals("worker")) 
		sb.append("Workers ("+pstatus+") : <span class=badge>"+pArr.size()+"</span>");

	sb.append("</div> <!-- panel heading -->");
	sb.append("<div class=\"panel-body\">");

	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-2\" align=right>");
	sb.append("<b> Process Status : </b> ");
	sb.append("</div>");
	
	sb.append("<div class=\"col-md-3\">");
	ArrayList<String[]> pStateArr=new ArrayList<String[]>();
	pStateArr.add(new String[]{"ALL","All"});
	pStateArr.add(new String[]{"FREE","Free"});
	pStateArr.add(new String[]{"BUSY","Busy"});
	pStateArr.add(new String[]{"ASSIGNED","Assigned"});
	
	sb.append(makeComboArr(pStateArr, "", "size=0 id=process_status_filter onchange=refreshProcessWindow('"+ptype+"'); ", pstatus, 0));
	sb.append("</div>");
	
	sb.append("<div class=\"col-md-1\">");
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=refreshProcessWindow('"+ptype+"'); >");
	sb.append("<span class=\"glyphicon glyphicon-refresh\"></span>");
	sb.append("</button>");
	sb.append("</div>");
	
	
	sb.append("</div>");
		
	sb.append("<table class=\"table table-striped\">"+
		"<tr>"+
			"<td><b>ID</b></td>"+
			"<td><b>STATUS</b></td>"+
			"<td><b>HOST INFO</b></td>"+
			"<td><b>START</b></td>"+
			"<td><b>HEARTBEAT</b></td>"+
			"<td><b>BUSY ON</b></td>"+
			"<td><b>STOP PROCESS</b></td>"+
		"</tr>");
		
	for (int m=0;m<pArr.size();m++) {
		
		String tr_class="success";
		String status=pArr.get(m)[1];
		
		if (status.equals("BUSY")) tr_class="warning";
		if (status.equals("ASSIGNED")) tr_class="warning";
		
		String busy_on="IDDLE";
		
		if (status.equals("BUSY")) {
			if (ptype.equals("master")) 
				sql="select wp_name from tdm_work_package where master_id="+pArr.get(m)[0];
			else 
				sql="select max(wp_name) from tdm_work_package "+
					" where id in(select work_package_id from tdm_task_assignment where worker_id="+pArr.get(m)[0]+") ";
			busy_on=getDBSingleVal(conn, sql);
		}
	
		String process_id=pArr.get(m)[0];
		String host_info=pArr.get(m)[2];
		String start_time=pArr.get(m)[3];
		String cancel_flag=pArr.get(m)[4];
		String last_heartbeat=pArr.get(m)[5];
		Integer last_heartbeat_as_minute=Integer.parseInt(pArr.get(m)[6]);
		
		if (last_heartbeat_as_minute>5) {
			last_heartbeat="<font color=red><span class=\"glyphicon glyphicon-remove-sign\"></span></font> " +last_heartbeat;
		} else {
			last_heartbeat=" <font color=green><span class=\"glyphicon glyphicon-ok-sign\"></span></font> " +last_heartbeat;
		}
		
		if (cancel_flag.equals("YES")) {
			cancel_flag="<font color=red><span class=\"glyphicon glyphicon-remove\"></span></font>";
		}
			
		else 
			cancel_flag="<input type=\"button\" class=\"button btn-danger\" value=\"Stop\" onclick=\"setProcessAction('"+ptype+"','"+process_id+"','stop','"+pstatus+"');\">";
		
			
		
		sb.append(""+
					"<tr class=\""+tr_class+"\">"+
					"<td>"+process_id+"</td>"+
					"<td>"+status+"</td>"+
					"<td>"+host_info+"</td>"+
					"<td>"+start_time+"</td>"+
					"<td>"+last_heartbeat+"</td>"+
					"<td>"+nvl(busy_on,"-")+"</td>"+
					"<td>"+cancel_flag+"</td>"+
					"</tr>");
				
	}
	
	sb.append("</table>");

	sb.append("</div> <!-- panel body -->");

	sb.append("</div> <!-- panel-->");
	
	return sb.toString();
}

//***************************************************************
String makeWorkPlanParamEditor(Connection conn, HttpSession session, String work_plan_id) {
	StringBuilder sb=new StringBuilder();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	String sql="select work_plan_name, status, email_address, on_error_action, execution_type, REC_SIZE_PER_TASK, " + 
				" master_limit, worker_limit " + 
				" from tdm_work_plan where id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",work_plan_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==0) 
		return "workplan not found " + work_plan_id;
	
	String work_plan_name=arr.get(0)[0];
	String status=arr.get(0)[1];
	String email_address=arr.get(0)[2];
	String on_error_action=arr.get(0)[3];
	String execution_type=arr.get(0)[4];
	String REC_SIZE_PER_TASK=arr.get(0)[5];
	String master_limit=arr.get(0)[6];
	String worker_limit=arr.get(0)[7];
	
	
	sb.append("<input type=hidden id=editing_work_plan_id value="+work_plan_id+">");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-4\" align=right><b> Work Plan Id : </b></div>");
	sb.append("<div class=\"col-md-8\">");
	sb.append("<span class=badge>"+work_plan_id+"</span>");
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-4\" align=right><b> Status : </b></div>");
	sb.append("<div class=\"col-md-8\">");
	sb.append("<span class=badge>"+status+"</span>");
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-4\" align=right><b> Notification E-Mail : </b></div>");
	sb.append("<div class=\"col-md-8\">");
	sb.append(makeText("wp_email_address", email_address, "", 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-4\" align=right><b> Execution Type : </b></div>");
	sb.append("<div class=\"col-md-8\">");
	ArrayList<String[]> arrExType=new ArrayList<String[]>();
	arrExType.add(new String[]{"PARALLEL","Parallel Execution"});
	arrExType.add(new String[]{"SERIAL","! Serial Executions"});	
	sb.append(makeComboArr(arrExType, "", "id=wp_execution_type size=0 ", execution_type, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-4\" align=right><b> On error : </b></div>");
	sb.append("<div class=\"col-md-8\">");
	ArrayList<String[]> arrOnErr=new ArrayList<String[]>();
	arrOnErr.add(new String[]{"CONTINUE","> Continue"});
	arrOnErr.add(new String[]{"STOP","! Stop"});	
	sb.append(makeComboArr(arrOnErr, "", "id=wp_on_error_action size=0 ", on_error_action, 0));
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-4\" align=right><b> Record count in task : </b></div>");
	sb.append("<div class=\"col-md-8\">");
	sb.append(makeNumber("0", "wp_REC_SIZE_PER_TASK", REC_SIZE_PER_TASK, "", "EDIT", "6","0", ",", "", "", "1", "100000"));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-4\" align=right><b> Master Limit : </b></div>");
	sb.append("<div class=\"col-md-8\">");
	sb.append(makeNumber("0", "wp_master_limit", master_limit, "", "EDIT", "4","0", ",", "", "", "1", "999"));
	sb.append("</div>");
	sb.append("</div>");
	
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-4\" align=right><b> Worker Limit : </b></div>");
	sb.append("<div class=\"col-md-8\">");
	sb.append(makeNumber("0", "wp_worker_limit", worker_limit, "", "EDIT", "4","0", ",", "", "", "1", "999"));
	sb.append("</div>");
	sb.append("</div>");
	
	return sb.toString();
}

//***************************************************************
void saveWorkPlanParams(Connection conn, HttpSession session,
		String work_plan_id,
		String wp_email_address,
		String wp_execution_type,
		String wp_on_error_action,
		String wp_options) {
	
	
	String sql="update  tdm_work_plan "+
				" set email_address=?, execution_type=?, on_error_action=?, REC_SIZE_PER_TASK=?, "+
				" master_limit=?, worker_limit=? " + 
				" where id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String wp_REC_SIZE_PER_TASK="1000";
	String wp_master_limit="";
	String wp_worker_limit="";
	
	String[] arr=wp_options.split(":");
	try {
		wp_REC_SIZE_PER_TASK=arr[0];
		wp_master_limit=arr[1];
		wp_worker_limit=arr[2];
	} catch(Exception e) {
		
		e.printStackTrace();
		return;
	}
	
	
	
	bindlist.clear();
	bindlist.add(new String[]{"STRING",wp_email_address});
	bindlist.add(new String[]{"STRING",wp_execution_type});
	bindlist.add(new String[]{"STRING",wp_on_error_action});
	bindlist.add(new String[]{"INTEGER",wp_REC_SIZE_PER_TASK});
	bindlist.add(new String[]{"INTEGER",wp_master_limit});
	bindlist.add(new String[]{"INTEGER",wp_worker_limit});
	bindlist.add(new String[]{"INTEGER",work_plan_id});
	
	execDBConf(conn, sql, bindlist);
	
}


//--------------------------------------------------------------------------------
String makeWorkPlanWindow(Connection conn, HttpSession session, String work_plan_id) {
	StringBuilder sb=new StringBuilder();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	String sql="select work_plan_name " + 
				" from tdm_work_plan " + 
				" where id=?";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",work_plan_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==0) return "work plan not found : "  + work_plan_id;
	
	String work_plan_name=arr.get(0)[0];
	
	sb.append("<input type=hidden id=detailed_work_plan_id value="+work_plan_id+">");
	
	sb.append("<div id=workPlanGraphDataDiv>");
	sb.append(makeGraphData(conn,session,work_plan_id));
	sb.append("</div>");
	
	sb.append("<table class=\"table table-condensed\">");
	sb.append("<tr class=info>");
	
	
	sb.append("<td>");

	sb.append("<big><span class=\"label label-info\">["+work_plan_id+"] "+work_plan_name+"</span></big>");
	sb.append("</td>");
	
	
	sb.append("<td align=right>");
	sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=openWorkPlanWindow('"+work_plan_id+"')>");
	sb.append("<span class=\"glyphicon glyphicon-refresh\"></span>");
	sb.append("</button>");
	sb.append("</td>");
	
	sb.append("</tr>");
	
	
	
	sb.append("<tr>");
	sb.append("<td colspan=2>");
	
	sb.append(makeWorkPlanWindowDetail(conn,session,work_plan_id));
	sb.append("</td>");
	sb.append("</tr>");
	
	
	sb.append("</table>");
	
	
	
	
	

	
	return sb.toString();
}


//-------------------------------------------------------------------------
String makeWorkPlanWindowDetail(Connection conn, HttpSession session, String work_plan_id) {
	
	StringBuilder sb=new StringBuilder();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	String sql="select "+
				" status, " +
				" wplan_type, " +
				" DATE_FORMAT(create_date,?) create_date, "+
				" DATE_FORMAT(start_date,?) start_date, "+
				" DATE_FORMAT(end_date,?) end_date, "+
				" app_id, "+
				" (select app_type from tdm_apps where id=app_id) app_type, " + 
				" env_id, "+
				" on_error_action, "+
				" execution_type, "+
				" length(prep_script_log) is_prep_script_log, " +
				" length(post_script_log) is_post_script_log, " +
				" master_limit, "+
				" worker_limit " +
				" from tdm_work_plan " + 
				" where id=?";
	
	bindlist.clear();
	bindlist.add(new String[]{"STRING",mysql_format});
	bindlist.add(new String[]{"STRING",mysql_format});
	bindlist.add(new String[]{"STRING",mysql_format});
	bindlist.add(new String[]{"INTEGER",work_plan_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String status=arr.get(0)[0];
	String wplan_type=arr.get(0)[1];
	String create_date=arr.get(0)[2];
	String start_date=arr.get(0)[3];
	String end_date=arr.get(0)[4];
	String app_id=arr.get(0)[5];
	String app_type=arr.get(0)[6];
	String env_id=arr.get(0)[7];
	String on_error_action=arr.get(0)[8];
	String execution_type=arr.get(0)[9];
	String is_prep_script_log=arr.get(0)[10];
	String is_post_script_log=arr.get(0)[11];
	String master_limit=arr.get(0)[12];
	String worker_limit=arr.get(0)[13];
	
	int prep_script_len=0;
	int post_script_len=0;
	
	try{prep_script_len=Integer.parseInt(is_prep_script_log);} catch(Exception e) {}
	try{post_script_len=Integer.parseInt(is_post_script_log);} catch(Exception e) {}
	
	String app_name=getDBSingleVal(conn,"select name from tdm_apps where id="+app_id);
	String env_name=getDBSingleVal(conn,"select name from tdm_envs where id="+env_id);

	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-4\" id=workPlanDetailLeftDiv>");
	
	sb.append("<table class=\"table table-condensed\">");
	
	sb.append("<tr>");
	sb.append("<td align=center colspan=2>");
	sb.append(makeWorkPlanActionButtons(work_plan_id,wplan_type,app_type,status,2));
	sb.append("</td>");
	sb.append("</tr>");
	
	
	sb.append("<tr>");
	sb.append("<td align=right><b>Configure : </b></td>");
	sb.append("<td>");
	sb.append("<a href=\"javascript:editWorkPlan('"+work_plan_id+"');\"><span class=\"glyphicon glyphicon-cog\"></span></a> ");
	sb.append("</td>");
	sb.append("</tr>");
	

	sb.append("<tr>");
	sb.append("<td align=right><b>Status : </b></td>");
	sb.append("<td>");
	sb.append("<span class=badge>"+status+"</span>");
	sb.append("</td>");
	sb.append("</tr>");
	
	
	
	if (wplan_type.equals("DISC") || wplan_type.equals("MASK") || wplan_type.equals("MASK2") || wplan_type.equals("COPY")) {
		sb.append("<tr>");
		sb.append("<td align=right><b>Application : </b></td>");
		sb.append("<td>");
		sb.append("<span class=badge>"+nvl(app_name,"-")+"</span>");
		sb.append("</td>");
		sb.append("</tr>");
		sb.append("<tr>");
		
		sb.append("<td align=right><b>Environment : </b></td>");
		sb.append("<td>");
		sb.append("<span class=badge>"+nvl(env_name,"-")+"</span>");
		sb.append("</td>");
		sb.append("</tr>");
		
		if (wplan_type.equals("MASK") || wplan_type.equals("MASK2")) {
			
			String current_filter="";
			
			String filter_combo="";
			sql=	" select 'ALL','All' from dual "+
					"union all " +
					"select id, concat(tab_name,'@',schema_name) tab " +
					" from tdm_tabs  " +
					" where app_id=(select app_id from tdm_work_plan where id="+work_plan_id+") " +
					" order by 2";
			filter_combo=makeCombo(conn, sql, "work_plan_filter", " size=1 onchange=changeWorkPlanTableFilter(this.value);", current_filter, 220);	

			
			sb.append("<td align=right><b>Filter : </b></td>");
			sb.append("<td>");
			sb.append(filter_combo);
			sb.append("</td>");
			sb.append("</tr>");
		}
	}
	
	
	
	sb.append("<tr>");
	sb.append("<td align=right><b>Created@ : </b></td>");
	sb.append("<td>");
	sb.append("["+create_date+"]");
	sb.append("</td>");
	sb.append("</tr>");
	
	if (start_date.length()>0) {
		sb.append("<tr>");
		sb.append("<td align=right><b>Start@ : </b></td>");
		sb.append("<td nowrap>");
		sb.append("["+start_date+"]");
		if (prep_script_len>0)
			sb.append(" <span class=\"glyphicon glyphicon-list-alt\" onclick=showWorkPlanScriptLog('"+work_plan_id+"','prep');></span>");
		sb.append("</td>");
		sb.append("</tr>");
	}
	
	if (end_date.length()>0) {
		sb.append("<tr>");
		sb.append("<td align=right><b>Finish@ : </b></td>");
		sb.append("<td nowrap>");
		sb.append("["+end_date+"]");
		if (post_script_len>0)
			sb.append(" <span class=\"glyphicon glyphicon-list-alt\" onclick=showWorkPlanScriptLog('"+work_plan_id+"','post');></span>");
		sb.append("</td>");
		sb.append("</tr>");
	}
	
	
	
	
	sb.append("<tr>");
	sb.append("<td colspan=2>");
	sb.append("<div id=workPackageStatusDiv>");
	sb.append(makeWorkPackageStatusTable(conn,session,work_plan_id));
	sb.append("</div>");
	sb.append("</td>");
	sb.append("</tr>");
	
	
	sb.append("</table>");
	
	sb.append("</div>");  // div col-md-4
	
	
	sb.append("<div class=\"col-md-8\" id=workPlanDetailMainDiv>");
	
	
	
	sb.append("<table class=table>");
	
	sb.append("<tr class=active>");
	sb.append("<td colspan=2 align=right>");
	sb.append(makeProcessSummary(conn, session, true));
	sb.append("</td>");
	sb.append("</tr>");
	
	sb.append("<tr>");
	sb.append("<td colspan=2>");
	sb.append(makeTaskSummaryTable(conn,session, work_plan_id));
	sb.append("</td>");
	sb.append("</tr>");


	sb.append("<tr>");
	sb.append("<td>");
	sb.append("<div id=taskGraphDiv style=\"height:250px; \"></div>");
	sb.append("</td>");
	sb.append("<td>");
	sb.append("<div id=speedGraphDiv style=\"height:250px; \"></div>");
	sb.append("</td>");
	sb.append("</tr>");
	
	sb.append("</table>");

	
	
	
	sb.append("</div>");  // div col-md-8
	
	
	
	
	sb.append("</div>");
	
	
	
	
	
	return sb.toString();
}

//-------------------------------------------------------------------------------------------
String makeWorkPackageStatusTable(Connection conn, HttpSession session, String work_plan_id) {
	StringBuilder sb=new StringBuilder();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	String sql="select status, count(*) wpc_count, sum(export_count) export_count " + 
				" from tdm_work_package where work_plan_id=? group by status  order by 1";
	
	bindlist.add(new String[]{"INTEGER",work_plan_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	if (arr==null || arr.size()==0) return "No work package found";
	
	
	sb.append("<table class=\"table table-condensed\">");
	
	sb.append("<tr class=active>");
	sb.append("<td><small><b>WPC Status</b></small></td>");
	sb.append("<td><small><b>Count</b></small></td>");
	sb.append("<td align=right><small><b>Export#</b></small></td>");
	sb.append("</tr>");
	
	int sum_wpc_count=0;
	long sum_rec_count=0;
	
	for (int i=0;i<arr.size();i++) {
		String wpc_status=arr.get(i)[0];
		String wpc_count=arr.get(i)[1];
		String wpc_export_count=arr.get(i)[2];
		
		try {sum_wpc_count+=Integer.parseInt(arr.get(i)[1]);} catch(Exception e) {e.printStackTrace();}
		try {sum_rec_count+=Long.parseLong(arr.get(i)[2]);} catch(Exception e) {e.printStackTrace();}
		
		
		
		
		
		sb.append("<tr>");
		sb.append("<td><small>");
		sb.append("<a href=\"javascript:showWorkPackageList('"+work_plan_id+"','"+wpc_status+"');\">" + wpc_status+"</a>");
		sb.append("</small></td>");
		sb.append("<td><small>"+wpc_count+"</small></td>");
		sb.append("<td align=right><small>"+formatnum(wpc_export_count)+"</small></td>");
		sb.append("</tr>");
	}
	
	
	sb.append("<tr class=active>");
	sb.append("<td><small>");
	sb.append("<a href=\"javascript:showWorkPackageList('"+work_plan_id+"','ALL');\"><b>ALL</b></a>");
	sb.append("</small></td>");
	sb.append("<td><small><b>"+sum_wpc_count+"</b></small></td>");
	sb.append("<td align=right><small><b>"+formatnum(""+sum_rec_count)+"</b></small></td>");
	sb.append("</tr>");
	
	sb.append("</table>");
	
	return sb.toString();
}

//-------------------------------------------------------------------------------------------
void setWorkPlanSummary(Connection conn, HttpSession session, String work_plan_id) {
String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	
	long all_task_count=0;
	long all_rec_count=0;
	long all_new_count=0;
	long all_assigned_count=0;
	long all_running_count=0;
	long all_finished_count=0;
	long all_retry_count=0;
	long all_failed_count=0;
	
	
	
	
	ArrayList<String[]> wpcArr=getWpcListByWorkPlan(conn, work_plan_id, "");
	for (int i=0;i<wpcArr.size();i++) {
		String work_package_id=wpcArr.get(i)[0];
		String work_package_status=wpcArr.get(i)[1];
		
		if (work_package_status.equals("NEW")) continue;
		
		sql="select status, "+
				" count(*) task_count, "+
				" sum(all_count) all_count, "+
				" sum(success_count) success_count, "+
				" sum(fail_count) fail_count "+
				" from tdm_task_"+work_plan_id+"_"+work_package_id  + 
				" group by status";
		
		ArrayList<String[]> taskArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		String task_status="";
		int task_count=0;
		int all_count=0;
		int success_count=0;
		int fail_count=0;
		
		for (int t=0;t<taskArr.size();t++) {
			
		
			task_status=taskArr.get(t)[0];
			try{task_count=Integer.parseInt(taskArr.get(t)[1]);} catch(Exception e) {task_count=0;} 
			try{all_count=Integer.parseInt(taskArr.get(t)[2]);} catch(Exception e) {all_count=0;} 
			try{success_count=Integer.parseInt(taskArr.get(t)[3]);} catch(Exception e) {success_count=0;} 
			try{fail_count=Integer.parseInt(taskArr.get(t)[4]);} catch(Exception e) {fail_count=0;} 
			
			all_task_count+=task_count;
			all_rec_count+=all_count;
			if (task_status.equals("NEW")) all_new_count+=all_count;
			if (task_status.equals("ASSIGNED")) all_assigned_count+=all_count;
			if (task_status.equals("RUNING")) all_running_count+=all_count;
			if (task_status.equals("FINISHED")) all_finished_count+=success_count;
			if (task_status.equals("RETRY")) all_retry_count+=all_rec_count;
			
			if (fail_count>0) all_failed_count+=fail_count;
			
			
			
		}
	}
	
	
	sql="select  abs(TIMESTAMPDIFF(MINUTE,  start_date, IFNULL(end_date,now()))) time_diff_as_hour from tdm_work_plan where id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",""+work_plan_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	int masked_recs_in_k=0;
	int exported_recs_in_k=0;
	
	if (arr.size()==1) {
		int time_diff_as_minute=Integer.parseInt(arr.get(0)[0]);
		long exported_count_as_k=all_rec_count/1000;
		long finished_count_as_k=all_finished_count/1000;

		
		if (time_diff_as_minute>0)
			exported_recs_in_k=Math.round(exported_count_as_k/time_diff_as_minute);
		if (time_diff_as_minute>0)
			masked_recs_in_k=Math.round(finished_count_as_k/time_diff_as_minute);

	}
			
	session.setAttribute("all_task_count", ""+all_task_count);
	session.setAttribute("all_rec_count", ""+all_rec_count);
	session.setAttribute("new_count", ""+all_new_count);
	session.setAttribute("assigned_count", ""+all_assigned_count);
	session.setAttribute("running_count", ""+all_running_count);
	session.setAttribute("finished_count", ""+all_finished_count);
	session.setAttribute("retry_count", ""+all_retry_count);
	session.setAttribute("failed_count", ""+all_failed_count);
	
	
	session.setAttribute("curr_exported_recs_in_k", ""+exported_recs_in_k);
	session.setAttribute("curr_masked_recs_in_k", ""+masked_recs_in_k);
	
	session.setAttribute("task_all_count", ""+all_rec_count);
	session.setAttribute("task_new_count", ""+all_new_count);
	session.setAttribute("task_assigned_count", ""+all_assigned_count);
	session.setAttribute("task_running_count", ""+all_running_count);
	session.setAttribute("task_completed_count", ""+all_finished_count);
	session.setAttribute("task_retry_count", ""+all_failed_count);
	session.setAttribute("task_failed_count", ""+all_retry_count);
	
	
}

//--------------------------------------
String makeTaskSummaryTable(Connection conn, HttpSession session, String work_plan_id) {
	StringBuilder sb=new StringBuilder();
	
	
	
	
	String sql="";
	
	
	
	long all_task_count=0;
	long all_rec_count=0;
	long new_count=0;
	long assigned_count=0;
	long running_count=0;
	long finished_count=0;
	long retry_count=0;
	long failed_count=0;
	
	int export_speed=0;
	int mask_speed=0;
	
	setWorkPlanSummary(conn, session, work_plan_id);
	
	try{all_task_count=Long.parseLong((String) session.getAttribute("all_task_count"));} catch(Exception e) {all_task_count=0;}
	try{all_rec_count=Long.parseLong((String) session.getAttribute("all_rec_count"));} catch(Exception e) {all_rec_count=0;}
	try{new_count=Long.parseLong((String) session.getAttribute("new_count"));} catch(Exception e) {new_count=0;}
	try{assigned_count=Long.parseLong((String) session.getAttribute("assigned_count"));} catch(Exception e) {assigned_count=0;}
	try{running_count=Long.parseLong((String) session.getAttribute("running_count"));} catch(Exception e) {running_count=0;}
	try{finished_count=Long.parseLong((String) session.getAttribute("finished_count"));} catch(Exception e) {finished_count=0;}
	try{retry_count=Long.parseLong((String) session.getAttribute("retry_count"));} catch(Exception e) {retry_count=0;}
	try{failed_count=Long.parseLong((String) session.getAttribute("failed_count"));} catch(Exception e) {failed_count=0;}
	
	try{export_speed=Integer.parseInt((String) session.getAttribute("curr_exported_recs_in_k"));} catch(Exception e) {export_speed=0;}
	try{mask_speed=Integer.parseInt((String) session.getAttribute("curr_masked_recs_in_k"));} catch(Exception e) {mask_speed=0;}


	
	sb.append("<table class=\"table table-condensed table-striped table-bordered\">");
	
	sb.append("<tr>");
	sb.append("<td class=primary align=left><b>Task Count</b></td>");
	sb.append("<td class=primary align=left><b>All</b></td>");
	sb.append("<td class=primary align=left><b>New</b></td>");
	sb.append("<td class=primary align=left><b>Assigned</b></td>");
	sb.append("<td class=primary align=left><b>Running</b></td>");
	sb.append("<td class=primary align=left><b>Finished</b></td>");
	sb.append("<td class=primary align=left><b>Retry</b></td>");
	sb.append("<td class=primary align=left><b>Failed</b></td>");
	sb.append("<td class=primary align=left><b>Export/Mask Speed</b></td>");
	sb.append("</tr>");

	
	sb.append("<tr>");
	sb.append("<td align=right>["+formatnum(""+all_task_count)+"]</td>");
	sb.append("<td align=right>["+formatnum(""+all_rec_count)+"]</td>");
	sb.append("<td align=right>["+formatnum(""+new_count)+"]</td>");
	sb.append("<td align=right>["+formatnum(""+assigned_count)+"]</td>");
	sb.append("<td align=right>["+formatnum(""+running_count)+"]</td>");
	sb.append("<td align=right>["+formatnum(""+finished_count)+"]</td>");
	
	if (retry_count==0) 
		sb.append("<td align=right>-</td>");
	else
		sb.append("<td align=right>["+formatnum(""+retry_count)+"]</td>");
	
	sb.append("<td align=right nowrap>");
	
	
	if (failed_count==0) 
		sb.append("-");
	else {
		
		
		sb.append("<a href=\"javascript:showFailedTaskList()\">");
		sb.append("["+formatnum(""+failed_count)+"]");
		sb.append("</a>");
		
		sb.append("<button type=button class=\"btn btn-warning btn-sm\" onclick=setWorkPlanStatus2('"+work_plan_id+"','REPEAT:ALL')>");
		sb.append("<span class=\"glyphicon glyphicon-repeat\">");
		sb.append("</button>");
	}
	sb.append("</td>");
	
	sb.append("<td align=right>[<b>"+formatnum(""+export_speed)+"</b>]/[<b>"+formatnum(""+mask_speed)+"</b>] <small>K rec/min</small></td>");
	sb.append("</tr>");
	
	
	sb.append("</table>");
	
	return sb.toString();
}


//------------------------------------
String makeGraphData(Connection conn, HttpSession session, String work_plan_id) {
	StringBuilder sb=new StringBuilder();
	
	long curr_exported_recs_in_k=0;
	long curr_masked_recs_in_k=0;

	long task_all_count=0;
	long task_new_count=0;
	long task_assigned_count=0;
	long task_running_count=0;
	long task_completed_count=0;
	long task_failed_count=0;
	long task_retry_count=0;
	
	curr_exported_recs_in_k=Long.parseLong(nvl((String) session.getAttribute("curr_exported_recs_in_k"),"0"));
	curr_masked_recs_in_k=Long.parseLong(nvl((String) session.getAttribute("curr_masked_recs_in_k"),"0"));
	
	task_all_count=Long.parseLong(nvl((String) session.getAttribute("task_all_count"),"0"));
	task_new_count=Long.parseLong(nvl((String) session.getAttribute("task_new_count"),"0"));
	task_assigned_count=Long.parseLong(nvl((String) session.getAttribute("task_assigned_count"),"0"));
	task_running_count=Long.parseLong(nvl((String) session.getAttribute("task_running_count"),"0"));
	task_completed_count=Long.parseLong(nvl((String) session.getAttribute("task_completed_count"),"0"));
	task_failed_count=Long.parseLong(nvl((String) session.getAttribute("task_failed_count"),"0"));
	task_retry_count=Long.parseLong(nvl((String) session.getAttribute("task_retry_count"),"0"));
	
	
	sb.append("<input type=hidden id=curr_masked_recs_in_k value="+curr_masked_recs_in_k+">");
	sb.append("<input type=hidden id=curr_exported_recs_in_k value="+curr_exported_recs_in_k+">");
	
	
	sb.append("<input type=hidden id=task_all_count value="+task_all_count+">");
	sb.append("<input type=hidden id=task_new_count value="+task_new_count+">");
	sb.append("<input type=hidden id=task_assigned_count value="+task_assigned_count+">");
	sb.append("<input type=hidden id=task_running_count value="+task_running_count+">");
	sb.append("<input type=hidden id=task_completed_count value="+task_completed_count+">");
	sb.append("<input type=hidden id=task_failed_count value="+task_failed_count+">");
	sb.append("<input type=hidden id=task_retry_count value="+task_retry_count+">");
	        		
	return sb.toString();
}


//------------------------------------
String getWorkPackageListByStatus(Connection conn, HttpSession session, String work_plan_id, String status) {
	
	StringBuilder sb=new StringBuilder();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	String sql="select id, wp_name, status,  DATE_FORMAT(start_date,?) start_date, DATE_FORMAT(end_date,?) end_date, " + 
				" round(duration/1000/60) duration_as_min, export_count,  success_count, fail_count " + 
				" from tdm_work_package "+
				" where work_plan_id=? ";
	if (!status.equals("ALL"))
		sql=sql + " and status=? ";
	
	sql=sql + " order by wp_name ";
	
	bindlist.clear();
	bindlist.add(new String[]{"STRING",mysql_format});
	bindlist.add(new String[]{"STRING",mysql_format});
	bindlist.add(new String[]{"INTEGER",work_plan_id});
	if (!status.equals("ALL"))
		bindlist.add(new String[]{"STRING",status});

	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	if (arr==null || arr.size()==0) return "No work package found";
	
	sb.append("<table class=\"table table-condensed\">");
	
	sb.append("<tr class=active>");
	sb.append("<td><b>#</b></td>");
	sb.append("<td><b>Name</b></td>");
	sb.append("<td><b>Status</b></td>");
	sb.append("<td><b>Start & Finish</b></td>");
	sb.append("<td><b>Duration (min)</b></td>");
	sb.append("<td><b>Exported#</b></td>");
	sb.append("<td><b>Success#</b></td>");
	sb.append("<td><b>Failed#</b></td>");
	sb.append("</tr>");
	
	for (int i=0;i<arr.size();i++) {
		
		String wpc_id=arr.get(i)[0];
		String wpc_name=arr.get(i)[1];
		String wpc_status=arr.get(i)[2];
		String start_date=arr.get(i)[3];
		String end_date=arr.get(i)[4];
		String duration_as_min=arr.get(i)[5];
		String export_count=arr.get(i)[6];
		String success_count=arr.get(i)[7];
		String fail_count=arr.get(i)[8];
		
		String progress=progressbar(success_count, export_count);

		
		
		sb.append("<tr class=active>");
		sb.append("<td>"+wpc_id+"</td>");
		sb.append("<td>"+wpc_name+"</td>");
		sb.append("<td>"+wpc_status+"<br>"+progress+"</td>");
		sb.append("<td>["+start_date+"] / ["+end_date+"]</td>");
		sb.append("<td align=right>"+formatnum(duration_as_min)+"</td>");
		sb.append("<td align=right>"+formatnum(export_count)+"</td>");
		sb.append("<td align=right>"+formatnum(success_count)+"</td>");
		sb.append("<td align=right>"+formatnum(fail_count)+"</td>");
		sb.append("</tr>");
	}
	
	        		
	return sb.toString();
}

//-------------------------------------------------------------------
String makeWorkPlanActionButtons(
		String work_plan_id,
		String work_plan_type,
		String app_type,
		String status,
		int type
		) {
	StringBuilder sb=new StringBuilder();
	
			
	if ("RUNNING,NEW,ASSIGNED,PREPARATION,BUILDING".indexOf(status)>-1)
		sb.append( 
					" <button type=\"button\" class=\"btn btn-danger btn-sm\" onclick=setWorkPlanStatus"+type+"('"+work_plan_id+"','CANCEL')  data-toggle=\"tooltip\" data-placement=\"left\" title=\"Stop\">"+
						"<span class=\"glyphicon glyphicon-stop\"></span>"+
					" </button>");
	
	if ("RUNNING".indexOf(status)>-1)
		sb.append( 
				" <button type=\"button\" class=\"btn btn-warning btn-sm\"  onclick=setWorkPlanStatus"+type+"('"+work_plan_id+"','PAUSE') data-toggle=\"tooltip\" data-placement=\"left\" title=\"Pause\">"+
					"<span class=\"glyphicon glyphicon-pause\" alt=\"Pause\"></span>"+
				" </button>");
	
	if ("PAUSED".indexOf(status)>-1)
		sb.append( 
				" <button type=\"button\" class=\"btn btn-warning btn-sm\"  onclick=setWorkPlanStatus"+type+"('"+work_plan_id+"','RESUME') data-toggle=\"tooltip\" data-placement=\"left\" title=\"Resume\">"+
					"<span class=\"glyphicon glyphicon-play\" alt=\"Resume\"></span>"+
				" </button>");
	if ("CANCELLED,INVALID,FINISHED,FAILED".indexOf(status)>-1 || status.contains("EXECUTING")) {
		sb.append(  
				" <button type=\"button\" class=\"btn btn-warning btn-sm\" onclick=setWorkPlanStatus"+type+"('"+work_plan_id+"','REPLAY') data-toggle=\"tooltip\" data-placement=\"left\" title=\"Replay\">"+
					"<span class=\"glyphicon glyphicon-repeat\" alt=\"Replay\"></span>"+
				" </button>");

		if (work_plan_type.equals("MASK") || work_plan_type.equals("COPY"))	
			sb.append( 
					" <button type=\"button\" class=\"btn btn-info btn-sm\" onclick=setWorkPlanStatus"+type+"('"+work_plan_id+"','ROLLBACK') data-toggle=\"tooltip\" data-placement=\"left\" title=\"Rollback\">"+
						"<span class=\"glyphicon glyphicon-fast-backward\" alt=\"Rollback\"></span>"+
					" </button>") ;
		sb.append( 		
				" <button type=\"button\" class=\"btn btn-danger btn-sm\"  onclick=setWorkPlanStatus"+type+"('"+work_plan_id+"','PURGE') data-toggle=\"tooltip\" data-placement=\"left\" title=\"Purge\">"+
					"<span class=\"glyphicon glyphicon-trash\" alt=\"Purge\"></span>"+
				" </button>");
	
	}
			
	if (work_plan_type.equals("DISC")) 	{
		
		
		if (app_type.equals("MASK"))
			sb.append( 
			" <button type=\"button\" class=\"btn btn-active btn-sm\"  onclick=showMaskingDiscoveryReport('"+work_plan_id+"') data-toggle=\"tooltip\" data-placement=\"left\" title=\"Discovery Report\">"+
				"<span class=\"glyphicon glyphicon-eye-open\" alt=\"Discovery Report\"></span>"+
			" </button>");
		else
			sb.append( 
			" <button type=\"button\" class=\"btn btn-active btn-sm\"  onclick=showCopyingDiscoveryReport('"+work_plan_id+"') data-toggle=\"tooltip\" data-placement=\"left\" title=\"Discovery Report\">"+
				"<span class=\"glyphicon glyphicon-eye-open\" alt=\"Discovery Report\"></span>"+
			" </button>");
	}
	
		
	return sb.toString();
	
}

//------------------------------------------------------------------------------------
ArrayList<String> getUserListByGroup(Connection conn, HttpSession session, String group_id) {
	ArrayList<String> ret1=new ArrayList<String>();
	
	String sql="select member_id, member_type from mad_group_members where group_id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",group_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	for (int i=0;i<arr.size();i++) {
		String member_id=arr.get(i)[0];
		String member_type=arr.get(i)[1];
		
		if (member_type.equals("GROUP")) {
			ret1.addAll(getUserListByGroup(conn,session,member_id));
			continue;
		}
		
		ret1.add(member_id);
	}
	
	return ret1;
}

//------------------------------------------------------------------------------------
int assignDeassignRoleToGroup(Connection conn, HttpSession session, String group_id, String role_id, String action) {
	int ret1=0;
	
	ArrayList<String> userList=getUserListByGroup(conn, session, group_id);
	
	String sql="select  1 from tdm_user_role where user_id=? and role_id=?";
	String insert_sql="insert into tdm_user_role (user_id, role_id) values (?,?)";
	if (action.equals("REVOKE"))
		insert_sql="delete from tdm_user_role where user_id=? and role_id=?";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	ArrayList<String[]> arr=new ArrayList<String[]>();
	
	for (int i=0;i<userList.size();i++) {
		String user_id=userList.get(i);
		System.out.println("user_id : " + user_id);
		
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",user_id});
		bindlist.add(new String[]{"INTEGER",role_id});
		
		arr=getDbArrayConf(conn, sql, 1, bindlist);
		
		if (action.equals("GRANT") && arr!=null && arr.size()==1) continue;
		
		if (action.equals("REVOKE") && arr!=null && arr.size()==0) continue;

		ret1++;
		
		execDBConf(conn, insert_sql, bindlist);
		
		
	}
	
	return ret1;
}




//-----------------------------------------------------------------------------
String testAppRepoScript(Connection conn,HttpSession session, String test_request_id, String application_id) {
	StringBuilder sb=new StringBuilder();
	String sql="select \n"+
				" member_name, member_path, member_version, member_tag_info, \n" + 
				" app_repo_root, app_repo_tag_path, app_repo_script, \n"+
				" par_hostname \n"+ 
				" from mad_request_application_member mem, mad_application app, mad_repository repo \n"+
				" where application_id=app.id and repository_id=repo.id \n" + 
				" and request_id=? and application_id=?";
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	bindlist.add(new String[]{"INTEGER",test_request_id});
	bindlist.add(new String[]{"INTEGER",application_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	if (arr==null || arr.size()==0) {
		return "No member found for the aplication selected.";
	}
	
	sb.append("<table class=\"table table-striped table-condensed\">");
				
				
	
	
	String app_repo_root=arr.get(0)[4];
	String app_repo_tag_path=arr.get(0)[5];
	String app_repo_script=arr.get(0)[6];
	String par_hostname=arr.get(0)[7];
	
	sb.append("<tr>");
	sb.append("<td align=right><b>Repository Address ${REPOSITORY_ADDR}: </b></td><td>"+par_hostname+"</td>");
	sb.append("</tr>");
	
	sb.append("<tr>");
	sb.append("<td align=right><b>Application Repo Root ${APP_REPO_ROOT}: </b></td><td>"+app_repo_root+"</td>");
	sb.append("</tr>");
	
	
	sb.append("<tr>");
	sb.append("<td align=right><b>Application Tag Root ${APP_TAG_ROOT}: </b></td><td>"+app_repo_tag_path+"</td>");
	sb.append("</tr>");
	
	
	
	sb.append("<tr>");
	sb.append("<td colspan=2 align=center><b>Path Conversion Script </b></td>");
	sb.append("</tr>");
	
	sb.append("<tr bgcolor=black>");
	sb.append("<td  colspan=2><small><font color=black>"+app_repo_script.replaceAll("\r|\n","<br>")+"</font></small></td>");
	sb.append("</tr>");
	
	
	
	sb.append("<tr class=info>");
	sb.append("<td colspan=2>");
	
	
	sb.append("<table class=\"table table-striped table-condensed\">");
	
	
	sb.append("<tr class=info>");
	sb.append("<td><b>Member <br><small>${MEMBER_NAME}</small></b></td>");
	sb.append("<td><b>Member Tag <br><small>${MEMBER_TAG}</small></b></td>");
	sb.append("<td><b>Member Version <br><small>${MEMBER_VERSION}</small></b></td>");
	sb.append("<td><b>Member Path <br><small>${MEMBER_FULL_PATH}</small></b></td>");
	sb.append("<td><b>Converted</b></td>");
	sb.append("</tr>");
	
	for (int i=0;i<arr.size();i++) {
		String member_name=arr.get(i)[0];
		String member_path=arr.get(i)[1];
		String member_version=arr.get(i)[2];
		String member_tag_info=arr.get(i)[3];
		
		
		String before=member_path;
		String after=convertRepositoryPath(
				app_repo_root,
				app_repo_tag_path,
				member_path,
				member_name,
				member_tag_info,
				member_version,
				app_repo_script);
		
		sb.append("<tr>");
		sb.append("<td class=active><small><small>"+member_name+"</small></small></td>");
		sb.append("<td class=active><small><small>"+member_tag_info+"</small></small></td>");
		sb.append("<td class=active><small><small>"+member_version+"</small></small></td>");
		sb.append("<td class=active><small><small>"+par_hostname+before+"</small></small></td>");
		sb.append("<td class=warning><small><small>"+par_hostname+after+"</small></small></td>");
		sb.append("</tr>");
		
	}
	sb.append("</table>");
	
	sb.append("</td>");
	sb.append("</tr>");
	
	sb.append("</table>");
	
	return sb.toString();
}


//--------------------------------------------------------------------------------------
String convertRepositoryPath(
		String app_repo_path,
		String app_tag_path,
		String original_member_path,
		String member_name,
		String member_tag,
		String member_version,
		String conversion_script
		) {
	String ret1=original_member_path;
	
	if (conversion_script.trim().length()==0)
		return ret1;

	String js_code=conversion_script;
	
	js_code=js_code.replaceAll("\\$\\{APP_REPO_ROOT\\}", app_repo_path);
	js_code=js_code.replaceAll("\\$\\{APP_TAG_ROOT\\}", app_tag_path);
	js_code=js_code.replaceAll("\\$\\{MEMBER_FULL_PATH\\}", original_member_path);
	js_code=js_code.replaceAll("\\$\\{MEMBER_NAME\\}", member_name);
	js_code=js_code.replaceAll("\\$\\{MEMBER_TAG\\}", member_tag);
	js_code=js_code.replaceAll("\\$\\{MEMBER_VERSION\\}", member_version);
	
	ScriptEngineManager factory=null;
	ScriptEngine engine=null;
	

	try {
		factory = new ScriptEngineManager();
		engine = factory.getEngineByName("JavaScript");
		ret1=""+ engine.eval(js_code);
	} catch (Exception e) {
		e.printStackTrace();
		ret1=original_member_path;
	}
	
	
	
	return ret1;
}


//--------------------------------------------------------------------------------------
String getMemberItemView(
		String member_path,
		String member_name,
		String member_version,
		String conversion_script
		) {
	String ret1=member_name;
	
	if (conversion_script.trim().length()==0)
		return ret1;

	String js_code=conversion_script;
	
	js_code=js_code.replaceAll("\\$\\{MEMBER_FULL_PATH\\}", member_path);
	js_code=js_code.replaceAll("\\$\\{MEMBER_NAME\\}", member_name);
	js_code=js_code.replaceAll("\\$\\{MEMBER_VERSION\\}", member_version);
	
	ScriptEngineManager factory=null;
	ScriptEngine engine=null;
	

	try {
		factory = new ScriptEngineManager();
		engine = factory.getEngineByName("JavaScript");
		ret1=""+ engine.eval(js_code);
	} catch (Exception e) {
		e.printStackTrace();
		ret1=member_name;
	}
	
	
	
	return ret1;
}
//********************************************************************
boolean checkRepoContentViewPermission(Connection conn, HttpSession session, String application_id) {
	return true;
}


//********************************************************************
String showFileContentByMemberId(Connection conn, HttpSession session, 
		String request_id,
		String member_id, 
		String member_version,
		String compare_version
		) {
	StringBuilder sb=new StringBuilder();
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	String sql="";
	
	sql="select  " + 
		"	class_name, par_hostname, par_username, par_password, " + 
		"	member_path, request_group, " + 
		"	app_repo_root, app_repo_tag_path, member_name, member_tag_info, app_repo_script,  "+
		"   application_id " + 
		"	from   " + 
		"	mad_request_application_member mram, mad_application app, mad_repository repo, mad_request req, mad_request_type rt " + 
		"	where mram.id=? " + 
		"	and mram.application_id=app.id " + 
		"	and app.repository_id=repo.id "+
		" 	and mram.request_id=req.id "+
		"	and req.request_type_id=rt.id ";
	
	bindlist.add(new String[]{"INTEGER",member_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr==null || arr.size()==0) 
		return "<span class=\"label label-danger\">record not found! </span>";

	String class_name=arr.get(0)[0];
	String repo_url=arr.get(0)[1];
	String user=arr.get(0)[2];
	String pass=arr.get(0)[3];
	String member_path=arr.get(0)[4];
	String request_group=arr.get(0)[5];
	String app_repo_path=arr.get(0)[6];
	String app_repo_tag_path=arr.get(0)[7];
	String member_name=arr.get(0)[8];
	String member_tag_info=arr.get(0)[9];
	String app_repo_script=arr.get(0)[10];
	String application_id=arr.get(0)[11];
	
	boolean has_permission=checkRepoContentViewPermission(conn, session, application_id);
	
	if (!has_permission) {
		return "<span class=\"label label-danger\">no permission to see this code.! </span>";
	}
	
	
	
	if (request_group.equals("DEPLOYMENT"))
		member_path=convertRepositoryPath(
				app_repo_path, 
				app_repo_tag_path, 
				member_path, 
				member_name, 
				member_tag_info, 
				member_version, 
				app_repo_script
				);
	
	sb.append(showFileContent(
			conn,
			session,
			request_id,
			member_id,
			class_name,
			repo_url,
			user,
			pass,
			member_path,
			member_version,
			compare_version));
	
	
	return sb.toString();
}


//********************************************************************
String showFileContentByUrl(Connection conn, HttpSession session, 
		String request_id,
		String member_id,
		String application_id, 
		String member_path) {
	StringBuilder sb=new StringBuilder();
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	String sql="";
	sql="select  " + 
		"	class_name, " + 
		"	par_hostname, " + 
		"	par_username, " + 
		"	par_password " + 
		"	from mad_application a, mad_repository repo " + 
		"	where a.repository_id=repo.id " + 
		"	and a.id=?";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",application_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	
	boolean has_permission=checkRepoContentViewPermission(conn, session, application_id);
	
	if (!has_permission) {
		return "<span class=\"label label-danger\">no permission to see this code.! </span>";
	}
	
	
	String class_name=arr.get(0)[0];
	String repo_url=arr.get(0)[1];
	String user=arr.get(0)[2];
	String pass=arr.get(0)[3];

	
	
	
	sb.append(showFileContent(
			conn,
			session,
			request_id,
			member_id,
			class_name,
			repo_url,
			user,
			pass,
			member_path,
			"-1",
			"-1"
			));
	
	
	return sb.toString();
}

//********************************************************************
String showFileContent(
		Connection conn, 
		HttpSession session,
		String request_id,
		String member_id,
		String class_name,
		String repo_url,
		String user,
		String pass,
		String member_path,
		String member_version,
		String compare_member_version
		) {
	StringBuilder sb=new StringBuilder();
	boolean to_split=false;
	
	ArrayList<String> lines=new ArrayList<String>();
	ArrayList<String[]> versions=new ArrayList<String[]>();
	
	
	if (class_name.equals("oracle.jdbc.driver.OracleDriver")) {
		versions=getVersioningInfoFromDb(conn, session, class_name,repo_url,user,pass,member_path);
		lines=getFileContentFromDb(conn, session, class_name,repo_url,user,pass,member_path,member_version);
		
		
	}
	else {
		RepoExplorer re=new RepoExplorer();
		versions=re.getVersioningInfo(class_name, repo_url, user, pass, member_path);
		lines=re.getFileContent(class_name,  repo_url, user, pass, member_path, member_version, to_split);
	}
	
	
	ArrayList<String[]> verArr=new ArrayList<String[]>();
	
	if (versions!=null)
	for (int v=0;v<versions.size();v++) 
		verArr.add(new String[]{versions.get(v)[0]});
	
	sb.append("<table class=\"table table-condensed\">");
	sb.append("<tr class=active>");
	sb.append("<td align=right>File Path :</td><td><span class=badge>"+repo_url+member_path+"</span></td>");
	sb.append("</tr>");
	
	sb.append("<tr class=active>");
	sb.append("<td align=right>View Version :</td>");
	sb.append("<td>");
	sb.append(makeComboArr(verArr, "", "id=file_content_version_"+request_id+" size=1 onchange=\"showFileContentOnVersionChange('"+request_id+"', '"+member_id+"');\" ", member_version, 0));
	sb.append("</td>");
	sb.append("</tr>");
	
	sb.append("<tr class=active>");
	sb.append("<td align=right>Compare to version :</td>");
	sb.append("<td>");
	sb.append(makeComboArr(verArr, "", "id=file_content_compare_version_"+request_id+" onchange=\"showFileContentOnVersionChange('"+request_id+"', '"+member_id+"');\" ", compare_member_version, 0));
	sb.append("</td>");
	sb.append("</tr>");
	

	sb.append("</table>");
	
	if (!compare_member_version.equals("-1") && compare_member_version.length()>0 && !compare_member_version.equals(member_version)) {
		String original_code=lines.get(0);
		String comparing_code="";
		
		if (class_name.equals("oracle.jdbc.driver.OracleDriver")) {
			lines=getFileContentFromDb(conn, session, class_name,repo_url,user,pass,member_path,compare_member_version);
		}
		else {
			RepoExplorer re=new RepoExplorer();
			lines=re.getFileContent(class_name,  repo_url, user, pass, member_path, compare_member_version, to_split);
		}
		if (lines.size()>0)  comparing_code=lines.get(0);
		
		sb.append(compareText(conn, session, member_version, original_code, compare_member_version, comparing_code));
	}
	else {
		sb.append("<textarea wrap=off style=\"width:100%; height:400px; font-family:monospace; background-color:black;font-size:1.2em; color:white; padding-left:20px; \">");
		if (lines.size()==0) 
			sb.append("Code couldn't be retrieved.");
		else 
			sb.append(clearHtml(lines.get(0)) );
		sb.append("</textarea>");
	}
	

	
	return sb.toString();
}
//-------------------------------------------------------------------

String compareText(Connection conn, HttpSession session, 
		String original_version, String new_code, 
		String comparing_version, String old_code
		) {
	StringBuilder sb=new StringBuilder();
	
	StringBuilder diff_code=new StringBuilder();
	
	List<String> new_lines  =Arrays.asList(new_code.split("\n|\r"));  
	List<String> old_lines=Arrays.asList(old_code.split("\n|\r"));  
	
	ArrayList<Integer> lineStatusArr=new ArrayList<Integer>();
	for (int i=0;i<new_lines.size();i++)
		lineStatusArr.add(-1);
	
	
	Patch patch = DiffUtils.diff(old_lines, new_lines);
	
	for (Delta delta: patch.getDeltas()) {
		
		
    }
	
	diff_code.append("Working on it !...Will be available soon.");

	
	sb.append("<ul class=\"nav nav-pills\" id=compareTextResults role=tablist>");

	sb.append("<li>");
	sb.append("<a href=#diffComparingText aria-controls=diffComparingText role=tab data-toggle=tab>");
	sb.append("Old  ( <b> "+comparing_version+" </b>) ");
	sb.append("</a>");
	sb.append("</li>");


	sb.append("<li>");
	sb.append("<a href=#diffOriginalText aria-controls=diffOriginalText role=tab data-toggle=tab>");
	sb.append("New ( <b> "+original_version+" </b>) ");
	sb.append("</a>");
	sb.append("</li>");
	
	sb.append("<li role=presentation class=active>");
	sb.append("<a href=#diffResults aria-controls=diffResults role=tab data-toggle=tab>");
	sb.append("Comparision Results (<b>Diff</b>)");
	sb.append("</a>");
	sb.append("</li>");
	
	//----------------------
	
	sb.append("<div class=\"tab-content\">");
	
	sb.append("<div class=\"tab-pane\" role=tabpanel id=diffComparingText>");
	sb.append("<textarea wrap=off style=\"width:100%; height:400px; font-family:monospace; background-color:gray;font-size:1.2em; color:white; padding-left:20px; \">");
	sb.append(clearHtml(old_code) );
	sb.append("</textarea>");
	sb.append("</div>");

	sb.append("<div class=\"tab-pane\" role=tabpanel id=diffOriginalText>");
	sb.append("<textarea wrap=off style=\"width:100%; height:400px; font-family:monospace; background-color:black;font-size:1.2em; color:white; padding-left:20px; \">");
	sb.append(clearHtml(new_code) );
	sb.append("</textarea>");
	sb.append("</div>");
	

	sb.append("<div class=\"tab-pane active\" role=tabpanel id=diffResults>");
	sb.append("<br>");
	sb.append("<br>");
	sb.append("<div style=\"width:100%;\">");
	sb.append(diff_code.toString() );
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("</div>"); //tab content

	
	sb.append("</ul>");

	
	
	

	
	return sb.toString();

}

String getRepositoryId(
		Connection conn,
		String class_name,
		String repo_url,
		String user,
		String pass) {
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String sql="select id from mad_repository where class_name=? and par_hostname=? and par_username=? and par_password=?";
	bindlist.clear();
	bindlist.add(new String[]{"STRING",class_name});
	bindlist.add(new String[]{"STRING",repo_url});
	bindlist.add(new String[]{"STRING",user});
	bindlist.add(new String[]{"STRING",pass});
	
	ArrayList<String[]> arrX=getDbArrayConf(conn, sql, 1, bindlist);
	
	String repository_id="0";
	
	try {repository_id=arrX.get(0)[0];} catch(Exception e) {}
	
	return repository_id;
}

//-------------------------------------------------------------------
ArrayList<String[]> getVersioningInfoFromDb(
		Connection conn, 
		HttpSession session, 
		String class_name,
		String repo_url,
		String user,
		String pass,
		String member_path
		) {
	
	ArrayList<String[]> ret1=new ArrayList<String[]>();
	
	ret1.add(new String[]{"0"});
	
	
	String object_type="";
	String object_owner="";
	String object_name="";
	
	String[] arr=member_path.split("\\[");
	
	try {object_type=arr[1].replaceAll("\\]\\.", "");} catch(Exception e) {}
	try {object_owner=arr[2].replaceAll("\\]\\.", "");} catch(Exception e) {}
	try {object_name=arr[3].replaceAll("\\]", "");} catch(Exception e) {}
	
	if (object_type=="")   return ret1; 
	if (object_owner=="") return ret1;
	if (object_name=="") return ret1;
	
	System.out.println("object_type : "+object_type);
	System.out.println("object_owner : "+object_owner);
	System.out.println("object_name : "+object_name);
	
	
	String repository_id=getRepositoryId(conn, class_name, repo_url, user, pass);
	
	
	if (repository_id.equals("0")) {
		System.out.println("Exception@getVersioningInfoFromDb : repository id not found");
		return ret1;
	}
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	String sql="select member_version from mad_checkout_log where repository_id=? and member_path=? order by 1";

	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",repository_id});
	bindlist.add(new String[]{"STRING",member_path});
	
	ret1=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);

	
	if (ret1==null || ret1.size()==0) {
		System.out.println("Exception@getVersioningInfoFromDb : no version found");
		ret1=new ArrayList<String[]>();
		
		ret1.add(new String[]{"0"});
	} 
	else 
		ret1.add(0, new String[]{"0"});
	
	
	return ret1;
}

//-------------------------------------------------------------------

ArrayList<String> getFileContentFromDb(
		Connection conn, 
		HttpSession session, 
		String class_name,
		String repo_url,
		String user,
		String pass,
		String member_path,
		String member_version) {
	

	ArrayList<String> ret1=new ArrayList<String>();
	
	String object_type="";
	String object_owner="";
	String object_name="";
	
	String[] arr=member_path.split("\\[");
	
	try {object_type=arr[1].replaceAll("\\]\\.", "");} catch(Exception e) {}
	try {object_owner=arr[2].replaceAll("\\]\\.", "");} catch(Exception e) {}
	try {object_name=arr[3].replaceAll("\\]", "");} catch(Exception e) {}
	
	if (object_type=="") {
		ret1.add("Object type not encoded");
		return ret1;
	}
	
	if (object_owner=="") {
		ret1.add("Object owner not encoded");
		return ret1;
	}
	
	if (object_name=="") {
		ret1.add("Object name not encoded");
		return ret1;
	}

	String[] xLines=null;
			
	
	//get from db
	if (member_version.equals("0") || member_version.equals("-1")) {
		
		String test_sql="select 1 from dual";
		Connection connApp=getconn(class_name, repo_url, user, pass, test_sql);
		xLines=getDDLFromDatabase(connApp,object_type,object_owner,object_name);
	} else {
		
		String repository_id=getRepositoryId(conn, class_name, repo_url, user, pass);
		ArrayList<String[]> bindlist=new ArrayList<String[]>();
		String sql="select check_in_code "+
					" from mad_checkout_log "+
					" where repository_id=? and member_path=? and member_version=? and status!='CANCEL'";
		
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",repository_id});
		bindlist.add(new String[]{"STRING",member_path});
		bindlist.add(new String[]{"STRING",member_version});
		
		ArrayList<String[]> arrLines=getDbArrayConf(conn, sql, 1, bindlist);
		
		if (arrLines==null || arrLines.size()==0) {
			return ret1;
		}
		
		
		String code=arrLines.get(0)[0];
		
		xLines=new String[]{code};
		
	}
	
	if (xLines!=null)
		for(int i=0;i<xLines.length;i++) 
			ret1.add(xLines[i]);
	
	
	return ret1;
}
//
String[] getDDLFromDatabase(Connection connApp,String object_type,String object_owner,String object_name) {
	String[] ret1=null;
	
	String code=getDDLFromOracle(connApp,object_type,object_owner,object_name);
	
	ret1=new String[]{code};
	
	return ret1;
}

//-------------------------------------------------------------------
String getDDLFromOracle(Connection connApp, String object_type, String object_owner, String object_name ) {
	String ret1="";
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	
	if (object_type.toUpperCase().equals("TABLE")) {
		oracleConverter dc=new oracleConverter(); 
		return dc.getOracleTableStructure(connApp, object_owner, object_name);
		
	}
	else  if (object_type.toUpperCase().equals("TABLE_DML")) {
		
		return "Oracle Table for  DML object";
		
	} 
	else  if (object_type.toUpperCase().equals("USER")) {
		
		return "Oracle User object";
		
	} else if (object_type.toUpperCase().equals("ROLE")) {
		
		
		return "Oracle Role object";
		
	} else {
		sql="select dbms_metadata.get_ddl(?,?,?) from dual";
		
		bindlist.clear();
		bindlist.add(new String[]{"STRING",object_type});
		bindlist.add(new String[]{"STRING",object_name});
		bindlist.add(new String[]{"STRING",object_owner});


		ArrayList<String[]> arr=getDbArrayApp(connApp, sql, 1, bindlist, null);
		String ddl=null;
		if (arr!=null && arr.size()==1) 
			ddl=arr.get(0)[0];
		if (ddl!=null) ret1=ddl;
	}
	
	
	
	
	
	
	return ret1;

}
	
//-------------------------------------------------------------------
void changeDeploymentEnvironmet(Connection conn, HttpSession session, String request_id, String environment_id) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	int curruser=(Integer) session.getAttribute("userid");
	
	
	String del_sql="select id from mad_request_app_env where request_id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	ArrayList<String[]> delArr=getDbArrayConf(conn, del_sql, Integer.MAX_VALUE, bindlist);
	for (int h=0;h<delArr.size();h++) {
		String request_app_env_id=delArr.get(h)[0];
		createHistory(conn, session, "DELETE", "mad_request_app_env", request_app_env_id);
	}
	
	
	sql="delete from mad_request_app_env where request_id=?";		
	execDBConf(conn, sql, bindlist);
	
	
	String hist_sql="select id from mad_request_platform_skip "+
			" where request_id=?";
	ArrayList<String[]> histArr=getDbArrayConf(conn, hist_sql, Integer.MAX_VALUE, bindlist);
	for (int h=0;h<histArr.size();h++) {
		String hist_id=histArr.get(h)[0];
		createHistory(conn, session, "DELETE", "mad_request_platform_skip", hist_id);
	}
	sql="delete from mad_request_platform_skip where request_id=?";
	execDBConf(conn, sql, bindlist);
	
	
	hist_sql="select id from mad_request_env_fields "+
			" where request_id=?";
	histArr=getDbArrayConf(conn, hist_sql, Integer.MAX_VALUE, bindlist);
	for (int h=0;h<histArr.size();h++) {
	String hist_id=histArr.get(h)[0];
	createHistory(conn, session, "DELETE", "mad_request_env_fields", hist_id);
	}
	
	sql="delete from mad_request_env_fields where request_id=?";
	execDBConf(conn, sql, bindlist);
	
	
	
	sql="select application_id, platform_type_id "+
		" from mad_request_application , mad_application a " +
		" where request_id=? and application_id=a.id ";
	
	
	
	ArrayList<String[]> arrApp=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	for (int i=0;i<arrApp.size();i++) {
		
		
		String application_id=arrApp.get(i)[0];
		String platform_type_id=arrApp.get(i)[1];
		
		//String next_val_sql="SELECT AUTO_INCREMENT FROM information_schema.tables WHERE table_name = 'mad_request_app_env' AND table_schema = DATABASE()";
		///String request_app_env_id=getDBSingleVal(conn, next_val_sql);
		
		sql="insert into mad_request_app_env (request_id, application_id, environment_id, entuser, entdate) values (?, ?, ?, ?, now())";
		
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",request_id});
		bindlist.add(new String[]{"INTEGER",application_id});
		bindlist.add(new String[]{"INTEGER",environment_id});
		bindlist.add(new String[]{"INTEGER",""+curruser});
		
		execDBConf(conn, sql, bindlist);
		
		//createHistory(conn, session, "INSERT", "mad_request_app_env", request_app_env_id);
		
		sql="select platform_id from mad_platform_env "+
			" where environment_id=? and platform_id in (select id from mad_platform where platform_type_id=?)";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",environment_id});
		bindlist.add(new String[]{"INTEGER",platform_type_id});
		
		ArrayList<String[]> arrPlatform=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		for (int p=0;p<arrPlatform.size();p++) {
			String platform_id=arrPlatform.get(p)[0];
			
			
			
			sql="select flex_field_id, field_value from mad_platform_fields where platform_id=?";
			
			bindlist.clear();
			bindlist.add(new String[]{"INTEGER",platform_id});
			
			ArrayList<String[]> arrPlatformParams=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
			
			for (int pp=0;pp<arrPlatformParams.size();pp++) {
				String platform_flex_field_id=arrPlatformParams.get(pp)[0];
				String platform_flex_field_value=arrPlatformParams.get(pp)[1];
				
				//next_val_sql="SELECT AUTO_INCREMENT FROM information_schema.tables WHERE table_name = 'mad_request_env_fields' AND table_schema = DATABASE()";
				//String next_id=getDBSingleVal(conn, next_val_sql);
				
				sql="insert into mad_request_env_fields ("+
					" request_id, "+
					" environment_id, "+
					" platform_id, "+
					" application_id, "+
					" flex_field_id, "+
					" field_value, "+
					" entuser, "+
					" entdate) "+
					" values (?, ?, ?, ?, ?, ?, ?, now())";
				
				bindlist.clear();
				//bindlist.add(new String[]{"INTEGER",next_id});
				bindlist.add(new String[]{"INTEGER",request_id});
				bindlist.add(new String[]{"INTEGER",environment_id});
				bindlist.add(new String[]{"INTEGER",platform_id});
				bindlist.add(new String[]{"INTEGER","0"}); //application_id
				bindlist.add(new String[]{"INTEGER",platform_flex_field_id});
				bindlist.add(new String[]{"STRING",platform_flex_field_value});
				bindlist.add(new String[]{"INTEGER",""+curruser});
				
				execDBConf(conn, sql, bindlist);
				
				//createHistory(conn, session, "INSERT", "mad_request_env_fields", next_id);
				
				
			}
			
			
			sql="select flex_field_id, default_value "+
				" from mad_application_flex_fields where application_id=? "+
				" order by field_order";
			bindlist.clear();
			bindlist.add(new String[]{"INTEGER",application_id});
			
			ArrayList<String[]> arrAppParams=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
			
			for (int ap=0;ap<arrAppParams.size();ap++) {
				String application_flex_field_id=arrAppParams.get(ap)[0];
				String application_flex_field_value=arrAppParams.get(ap)[1];
				
				//next_val_sql="SELECT AUTO_INCREMENT FROM information_schema.tables WHERE table_name = 'mad_request_env_fields' AND table_schema = DATABASE()";
				//String next_id=getDBSingleVal(conn, next_val_sql);
				
				sql="insert into mad_request_env_fields ("+
					//" id, "+
					" request_id, "+
					" environment_id, "+
					" platform_id, "+
					" application_id, "+
					" flex_field_id, "+
					" field_value, "+
					" entuser, "+
					" entdate) "+
					" values (?, ?, ?, ?, ?, ?, ?, now())";
				
				bindlist.clear();
				//bindlist.add(new String[]{"INTEGER",next_id});
				bindlist.add(new String[]{"INTEGER",request_id});
				bindlist.add(new String[]{"INTEGER",environment_id});
				bindlist.add(new String[]{"INTEGER",platform_id});
				bindlist.add(new String[]{"INTEGER",application_id}); //application_id
				bindlist.add(new String[]{"INTEGER",application_flex_field_id});
				bindlist.add(new String[]{"STRING",application_flex_field_value});
				bindlist.add(new String[]{"INTEGER",""+curruser});
				
				execDBConf(conn, sql, bindlist);
				
				
				//createHistory(conn, session, "INSERT", "mad_request_env_fields", next_id);
				
			}
		}
		
	}
	
	sql="select id from mad_request_app_env where request_id=?";
	ArrayList<String[]> arrHist1=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	for (int i=0;i<arrHist1.size();i++) {
		String request_app_env_id=arrHist1.get(i)[0];
		createHistory(conn, session, "INSERT", "mad_request_app_env", request_app_env_id);
	}
	
	sql="select id from mad_request_env_fields where request_id=?";
	ArrayList<String[]> arrHist2=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	for (int i=0;i<arrHist2.size();i++) {
		String next_id=arrHist2.get(i)[0];
		createHistory(conn, session, "INSERT", "mad_request_env_fields", next_id);
	}
	
	
	
	
	
}

//----------------------------------------------
String makeRequestEnvList(Connection conn, HttpSession session, String request_id) {
	StringBuilder sb=new StringBuilder();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	ArrayList<String[]> envList=getEnvironmentList(conn, session, request_id);
	
	String curr_env_id="0";
	String sql="select environment_id from mad_request_app_env where request_id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	try {curr_env_id=getDbArrayConf(conn, sql, 1, bindlist).get(0)[0];} catch(Exception e) {curr_env_id="0";}
	
	sb.append("<h4>Set Target Environment for <span class=badge>"+request_id+"</span> </h4>");
	
	if (envList.size()==0) {
		sb.append("<br>! <font color=red>No available environment</font>");
		return sb.toString();
	}
			
	sb.append("<table class=table>");
	for (int i=0;i<envList.size();i++) {
		String env_id=envList.get(i)[0];
		String env_name=envList.get(i)[1];

		if (curr_env_id.equals(env_id))
			sb.append("<tr class=warning>");
		else 
			sb.append("<tr>");
		
		sb.append("<td>");
		
		if (!curr_env_id.equals(env_id)) {
			sb.append("<button type=button class=\"btn btn-sm btn-success\" onclick=\"changeDeploymentEnvironmet('"+request_id+"','"+env_id+"','"+env_name+"');\" >");
			sb.append("<span class=\"glyphicon glyphicon-ok\"></span>");
			sb.append("</button>");
		}
		
		sb.append("</td>");
		
		sb.append("<td>");
		sb.append(env_name);
		sb.append("</td>");

		sb.append("</tr>");
	}
	sb.append("</table>");
	
	return sb.toString();
}


//-------------------------------------------------------------------------------------------
String getStringContent(Connection conn, HttpSession session, String string_id, String field) {

	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String sql="select short_desc, long_desc from mad_string where id=?";
	if (field.equals("short_desc")) 
		sql="select short_desc from mad_string where id=?";
	
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",string_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr==null || arr.size()==0) 
		return "no content for string id " + string_id;
	
	
				
	String short_desc="";
	String long_desc="";
	
	if (field.equals("short_desc")) {
		short_desc=arr.get(0)[0];
		
		return short_desc;
		
	} else {
		short_desc=arr.get(0)[0];
		long_desc=arr.get(0)[1];
		
		StringBuilder sb=new StringBuilder();
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-12\"></div>");
		sb.append("<h3> <span class=\"label label-warning\"> <span class=\"glyphicon glyphicon-info-sign\"></span> "+short_desc+"</span></h3>");
		sb.append("</div>");
		sb.append("</div>");
		

		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-12\" style=\"min-height: 0px; max-height: 400px; overflow-y: scroll;\">");
		if (long_desc.length()==0)
			sb.append("No Content is available");
		else 
			sb.append(long_desc);
		sb.append("</div>");
		sb.append("</div>");
		
		return sb.toString();		
	}
	
	
				
	
	
}

//----------------------------------------------
String getStringContentByName(Connection conn, HttpSession session, String string_name, String field) {

	String lang=nvl((String) session.getAttribute("curr_lang"),"EN");
	
	
	String string_id=getStringIdByName(conn, session, string_name);
	
	if (string_id.length()>0) {
		String session_string_content=nvl((String) session.getAttribute(string_id+"/"+field),"");
		
		if (session_string_content.length()>0) 
			return session_string_content;
		
		String content=getStringContent(conn, session, string_id, field);
		
		session.setAttribute(string_id+"/"+field, content);
		
		return content;
	}
		
	
			
	return "no content for string name (" + string_name + ") language ("+lang+")";	
	
}

//****************************************************************
String getStringIdByName(Connection conn, HttpSession session, String string_name) {
	
	String lang=nvl((String) session.getAttribute("curr_lang"),"");
	
	String session_string_id=nvl((String) session.getAttribute(string_name+"/"+lang),"");
	
	if (session_string_id.length()>0) return session_string_id;
	
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String sql="select id from mad_string where string_name=? and lang=?";
	
	bindlist.clear();
	bindlist.add(new String[]{"STRING",string_name});
	bindlist.add(new String[]{"STRING",lang});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr!=null && arr.size()==1) {
		String string_id=arr.get(0)[0];
		session.setAttribute(string_name+"/"+lang, string_id);	
		return string_id;
	}
		
	sql="select id from mad_string where string_name=?";
	
	bindlist.clear();
	bindlist.add(new String[]{"STRING",string_name});
	
	arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr!=null && arr.size()==1) {
		String string_id=arr.get(0)[0];
		session.setAttribute(string_name+"/"+lang, string_id);
		return string_id;
	}
	
	return "";
	
}

//****************************************************************
ArrayList<String> getParamNameList(StringBuilder js_code) {
	ArrayList<String> parameters=new ArrayList<String>();
	int cursor=0;
	while(true) {
		int param_start_loc=js_code.indexOf("${",cursor);
		if (param_start_loc==-1) break;
		
		cursor=param_start_loc+2;
		
		int param_end_loc=js_code.indexOf("}",cursor);
		if (param_end_loc==-1) break;
		
		String param_name=js_code.substring(param_start_loc+2,param_end_loc);
		
		if (param_name.length()>0 && param_name.length()<120 && parameters.indexOf(param_name)==-1) 
			parameters.add(param_name);
		
	}
	return parameters;
}
//****************************************************************
String testJsCode(Connection conn, HttpSession session, String tab_name, String col_name, String rec_id) {
	StringBuilder sb=new StringBuilder();
	
	String sql="select "+col_name+" from "+tab_name +" where id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	bindlist.add(new String[]{"INTEGER",rec_id});


	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr==null || arr.size()==0) {
		return "script is not retrieved";
	}
	
	StringBuilder js_code=new StringBuilder(); 
	
	js_code.append(arr.get(0)[0]);
	
	sb.append("<input type=hidden id=js_changed value=\"NO\">");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	sb.append("<span class=badge>Code to test</span>");
	sb.append("<textarea  id=jscode_original onchange=setJsChanged() rows=8 style=\"width:100%; font-family: monospace; \">");
	sb.append(js_code.toString());
	sb.append("</textarea>");
	sb.append("</div>");
	sb.append("</div>");
	
	
	ArrayList<String> parameters=getParamNameList(js_code);
	
	
	

	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	sb.append("<span class=badge>Parameters </span>");
	sb.append("<table class=\"table table-condensed table-striped\">");
	for (int i=0;i<parameters.size();i++) {
		
		String param_name=parameters.get(i);
		String param_val=nvl((String) session.getAttribute("JS_PARAM_"+param_name),"");
		sb.append("<tr>");
		sb.append("<td align=right>");
		sb.append("<b>"+parameters.get(i) + " : </b>");
		sb.append("</td>");
		sb.append("<td>");
		sb.append("<input type=hidden id=\"param_name_"+i+"\" value=\""+param_name+"\">");
		sb.append(makeText("js_param_"+i, param_val, "", 0));
		sb.append("</td>");
		sb.append("</tr>");
	}
	sb.append("</table>");
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	sb.append("<span class=badge>Test Result </span>");
	sb.append("<textarea id=js_test_result readonly rows=2 style=\"width:100%; background-color: #lightgreen; ;font-family: monospace; \">");
	sb.append("");
	sb.append("</textarea>");
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	sb.append("<span class=badge>Modified Code</span>");
	sb.append("<textarea id=jscode_modified readonly rows=8 style=\"width:100%; background-color=#FAFAFA;font-family: monospace; \">");
	sb.append("");
	sb.append("</textarea>");
	sb.append("</div>");
	sb.append("</div>");
	
	
	return sb.toString();
	
	
}

//********************************************
void setJSParameters(HttpSession session, String params_to_set) {
	String[] items=params_to_set.split("\\|::\\|");
	
	for (int i=0;i<items.length;i++) {
		String a_item=items[i];
		if (a_item.trim().length()==0) continue;
		String[] pair=a_item.split("=");
		String param_name="";
		String param_val="";
		
		try{param_name=pair[0];} catch(Exception e) {}
		try{param_val=pair[1];} catch(Exception e) {}
		
		if (param_name.length()>0) 
			session.setAttribute("JS_PARAM_"+param_name, param_val);
	}
}



//*****************************************************
String makeHintButton(Connection conn, HttpSession session, String string_name) {
	StringBuilder sb=new StringBuilder();

	
	String string_id=getStringIdByName(conn, session, string_name);
	
	
	if (string_id.length()>0) {
		sb.append(" <span class=badge onclick=\"viewHtmlContent('"+string_id+"');\">");
		sb.append("<small><span class=\"glyphicon glyphicon-info-sign\"></span></small>");
		sb.append("</span> ");
		return sb.toString(); 
	}
	
	sb.append(" <span class=badge onclick=\"myalert('Undefined string : ["+codehtml(string_name)+"]');\" >");
	sb.append("<span class=\"glyphicon glyphicon-info-sign\"></span>");
	sb.append("</span> ");
	
	return sb.toString();
}


//********************************************
void setUserLang(Connection conn, HttpSession session, String lang) {
	
	
	session.setAttribute("curr_lang", lang);
	
	String userid=""+(Integer) session.getAttribute("userid");
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String sql="update tdm_user set lang=? where id=?";
	
	bindlist.add(new String[]{"STRING",lang});
	bindlist.add(new String[]{"INTEGER",userid});
	
	execDBConf(conn, sql, bindlist);
	
	
	
	
}


//--------------------------------------------------------------------------
String decodeStringTitle(Connection conn, HttpSession session, String entry_title, String string_name, boolean hintbutton) {
	
	String string_id=getStringIdByName(conn, session, string_name);
	
	if (string_id.length()==0) return entry_title;
	
	String short_desc=getStringContentByName(conn, session, string_name,"short_desc");
	
	if (short_desc.trim().length()==0) return entry_title;
	if (hintbutton)
		return short_desc+ " " + makeHintButton(conn, session, string_name)+ "<!-- "+clearHtml(string_name)+" -->";
	else 
		return short_desc+ "<!-- "+clearHtml(string_name)+" -->";
	

}

//-------------------------------------------------------------------------
String getUserDashboardLayout(Connection conn, HttpSession session) {
	int user_id=(Integer) session.getAttribute("userid");
 	
	String sql="select parameters from mad_dashboard_user_configuration where user_id=? and divid='LAYOUT'";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",""+user_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String curr_layout="PCS_4";
	
	if (arr!=null && arr.size()==1) 
		curr_layout=arr.get(0)[0];
	
	return curr_layout;
}

//--------------------------------------------------------------------------
String loadDashboardTop(Connection conn, HttpSession session) {
	StringBuilder sb=new StringBuilder();
	
	String curr_layout=getUserDashboardLayout(conn,session);
	
	ArrayList<String[]> layoutArr=new ArrayList<String[]>();
	
	layoutArr.add(new String[]{"PCS_8","8 Pieces"});
	layoutArr.add(new String[]{"PCS_4","4 Pieces"});
	layoutArr.add(new String[]{"PCS_3_HOR_1_TOP_2_BOTTOM","3 Pieces - 1 Top 2 Bottom"});
	layoutArr.add(new String[]{"PCS_3_HOR_2_TOP_1_BOTTOM","3 Pieces - 2 Top 1 Bottom"});
	layoutArr.add(new String[]{"PCS_3_VER_1_LEFT_2_RIGHT","3 Pieces - 1 Left 2 Right"});
	layoutArr.add(new String[]{"PCS_3_VER_2_LEFT_1_RIGHT","3 Pieces - 2 Left 1 Right"});
	layoutArr.add(new String[]{"PCS_2_HOR","2 Pieces - Horizontal"});
	layoutArr.add(new String[]{"PCS_2_VER","2 Pieces - Vertical"});
	layoutArr.add(new String[]{"PCS_1","1 Piece"});
	
	
	sb.append("<table border=0 cellspacing=0 cellpadding=0>");
	
	sb.append("<tr>");
	//sb.append("<td><span class=\"label label-warning\">Dashboard Layout : </span></td>");
	sb.append("<td>");
	sb.append(makeComboArr(layoutArr, "", "id=dashboard_layout size=1 onchange=changeDashboardLayout()", curr_layout, 300));
	sb.append("</td>");
	sb.append("</tr>");
	
	sb.append("</table>");
	
	return sb.toString();

	

}




//--------------------------------------------------------------------------
String makeRunMadDashViewDlg(Connection conn, HttpSession session, String view_id, String target_div, String runMode) {
	StringBuilder sb=new StringBuilder();
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select view_name, view_type, sql_id "+
		" from mad_dashboard_view v, mad_dashboard_sql s "+
		" where v.sql_id=s.id "+
		" and v.id=?";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",view_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr==null || arr.size()==0) return "View not found";
	
	String view_name=arr.get(0)[0];
	String view_type=arr.get(0)[1];
	String sql_id=arr.get(0)[2];
	
	
	
	sb.append("<h4>"+view_name+"</h4>");
	
	
	
	sql="select parameter_id, parameter_title, flex_field_id, field_parameter_name  "+ 
		" from mad_dashboard_view_parameter vp, mad_dashboard_parameter p "+
		" where vp.parameter_id=p.id and view_id=?";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",view_id});
	
	ArrayList<String[]> arrParam=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	sb.append("<input type=hidden id=running_view_id value=\""+view_id+"\">");
	sb.append("<input type=hidden id=view_parameter_count value=\""+arrParam.size()+"\">");
	sb.append("<input type=hidden id=view_runMode value=\""+runMode+"\">");
	sb.append("<input type=hidden id=view_target_div value=\""+target_div+"\">");
	

	sb.append("<table class=\"table table-condensed table-striped\">");
	
	

	String view_user_title="";
	String view_user_parameters="";
	
	int user_id=(Integer) session.getAttribute("userid");
	
	sql="select report_title,parameters "+
		" from mad_dashboard_user_configuration "+
		" where user_id=? and view_id=? and divid=? ";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",""+user_id});
	bindlist.add(new String[]{"INTEGER",""+view_id});
	bindlist.add(new String[]{"STRING",""+target_div});

	
	ArrayList<String[]> userConfArr=getDbArrayConf(conn, sql, 1, bindlist);

	
	if (userConfArr!=null && userConfArr.size()==1) {
		view_user_title=userConfArr.get(0)[0];
		view_user_parameters=userConfArr.get(0)[1];
	}

	ArrayList<String[]> flexValsArr=new ArrayList<String[]>();
	
	if (view_user_parameters.length()>0) {
		String[] parArr=view_user_parameters.split("\n|\r");
		for (int p=0;p<parArr.length;p++) {
			String element=parArr[p];
			if (element.trim().length()==0) continue;
			int pos=element.indexOf("=");
			String flex_field_id=element.substring(0,pos);
			String flex_field_val="";
			try{flex_field_val=element.substring(pos+1);} catch(Exception e) {}
			if (flex_field_val.trim().length()==0) continue;
			flexValsArr.add(new String[]{flex_field_id,flex_field_val});
			
		}
	}
	
	sb.append("<tr>");
	sb.append("<td>");
	sb.append("<span class=\"label label-warning\">View Title</span>");
	sb.append(makeText("view_user_title", view_user_title, "", 0));
	sb.append("</td>");
	sb.append("</tr>");
	
	for (int i=0;i<arrParam.size();i++) {
		String parameter_id=arrParam.get(i)[0];
		String parameter_title=arrParam.get(i)[1];
		String flex_field_id=arrParam.get(i)[2];
		String field_parameter_name=arrParam.get(i)[3];
		
		sb.append("<tr>");
		sb.append("<td>");
		sb.append("<input type=hidden id=parameter_id_of_"+i+" value=\""+parameter_id+"\">");
		sb.append("<span class=\"label label-warning\">"+parameter_title+"</span>");
		sb.append(makeFlexField(conn, session, "search", i, "NONE", flex_field_id, field_parameter_name, flexValsArr, "NO", "YES", "YES","", ""));
		sb.append("</td>");
		sb.append("</tr>");

		
	}
	
	
	sb.append("</table>");
	
	return sb.toString();

	

}


//--------------------------------------------------------------------------
String runMadDashView(Connection conn, HttpSession session, ServletContext application, String view_id, 
		String view_user_title, String run_parameters, String runMode, String target_div_id) {
	StringBuilder sb=new StringBuilder();
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	

	
	sql="select view_name, view_type, query_statement, env_id, "+
		" field_list, title_list, color_list, group_by, sum_field, "+
		" sum_function, x_field, y_field, order_by, "+
		" decimal_size, sql_filter "+
		" from mad_dashboard_view v, mad_dashboard_sql s "+
		" where v.sql_id=s.id "+
		" and v.id=?";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",view_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr.size()==0) {
		sb.setLength(0);
		makeDashboardViewHeader(sb, view_id, target_div_id, view_user_title);
		sb.append("View not found ");
		return sb.toString();
	};
	
	String view_name=arr.get(0)[0];
	String view_type=arr.get(0)[1];
	String query_statement=arr.get(0)[2];
	String env_id=arr.get(0)[3];
	String field_list=arr.get(0)[4];
	String title_list=arr.get(0)[5];
	String color_list=arr.get(0)[6];
	String group_by=arr.get(0)[7];
	String sum_field=arr.get(0)[8];
	String sum_function=arr.get(0)[9];
	String x_field=arr.get(0)[10];
	String y_field=arr.get(0)[11];
	String order_by=arr.get(0)[12];
	String decimal_size=arr.get(0)[13];
	String sql_filter=arr.get(0)[14];
	
	if (!query_statement.toLowerCase().contains("where")) query_statement=query_statement+"\n WHERE\n";
	
	query_statement=query_statement+"\n" +sql_filter;
	
	int user_id=(Integer) session.getAttribute("userid");
	
	
	if (runMode.equals("LIVE")) {
		sql="select 1 from mad_dashboard_user_configuration where user_id=? and divid=? and view_id=?";
		
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",""+user_id});
		bindlist.add(new String[]{"STRING",""+target_div_id});
		bindlist.add(new String[]{"INTEGER",""+view_id});
		
		ArrayList<String[]> confArr=getDbArrayConf(conn, sql, 1, bindlist);
		
		if (confArr.size()==0) {
			sql="insert into mad_dashboard_user_configuration (user_id, divid, view_id, report_title, parameters, height)  values (?, ?, ?, ?, ?, ?)";
			
			String default_height=getViewDivValue(conn,session,target_div_id,"height");
			
			bindlist.clear();
			bindlist.add(new String[]{"INTEGER",""+user_id});
			bindlist.add(new String[]{"STRING",""+target_div_id});
			bindlist.add(new String[]{"INTEGER",""+view_id});
			bindlist.add(new String[]{"STRING",""+nvl(view_user_title,view_name)});
			
			bindlist.add(new String[]{"STRING",""+run_parameters});
			bindlist.add(new String[]{"STRING",""+default_height});
			
			execDBConf(conn, sql, bindlist);
		} else {
			sql=" update mad_dashboard_user_configuration set "+
				" report_title=? , parameters=? "+
				" where user_id=? and divid=? and view_id=?";
			

			bindlist.clear();
			bindlist.add(new String[]{"STRING",""+nvl(view_user_title,view_name)});
			bindlist.add(new String[]{"STRING",""+run_parameters});
			bindlist.add(new String[]{"INTEGER",""+user_id});
			bindlist.add(new String[]{"STRING",""+target_div_id});
			bindlist.add(new String[]{"INTEGER",""+view_id});
			
			execDBConf(conn, sql, bindlist);
			
		}
		
		
	}
	
	if (runMode.equals("TEST")) {
		sb.append("<h4>"+view_name+"</h4>");
		
		sb.append("<hr>");
	}
	
	
	
	
	sql="select parameter_id, parameter_title, flex_field_id, field_parameter_name, sql_statement, bind_type  "+ 
		" from mad_dashboard_view_parameter vp, mad_dashboard_parameter p "+
		" where vp.parameter_id=p.id and view_id=?";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",view_id});
	
	ArrayList<String[]> arrParam=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);


	

	if (runMode.equals("TEST"))
		sb.append("<table class=\"table table-condensed table-striped\">");
	
	ArrayList<String> filterArr=new ArrayList<String>();
	
	

	StringBuilder sbSQLWhere=new StringBuilder();
	ArrayList<String[]> wherebindlist=new ArrayList<String[]>();
	
	
	int filter_added=0;

	for (int i=0;i<arrParam.size();i++) {
		String parameter_id=arrParam.get(i)[0];
		String parameter_title=arrParam.get(i)[1];
		String flex_field_id=arrParam.get(i)[2];
		String field_parameter_name=arrParam.get(i)[3];
		String sql_statement=arrParam.get(i)[4];
		String bind_type=arrParam.get(i)[5];
		
		String field_value=extractFilterValue(run_parameters,flex_field_id);
		
		if (runMode.equals("TEST")) {
			sb.append("<tr>");
			sb.append("<td>");
			sb.append("<span class=\"label label-warning\">"+parameter_title+"</span>");
			sb.append("</td>");
			sb.append("<td>");
			sb.append(field_value);
			sb.append("</td>");
			sb.append("</tr>");
		}
		
		
		if (field_value.trim().length()==0 || field_value.equals("${null}")|| sql_statement.trim().length()==0) continue;
		
		
		String[] arrX=field_value.split("\\|::\\|");
		
		if (arrX.length>1) {
			StringBuilder ch=new StringBuilder(sql_statement);
			int pos=ch.indexOf("?");
			if (pos==-1) continue;
			
			ch.delete(pos, pos+1);
			String tmp="";
			
			for (int a=0;a<arrX.length;a++) {
				if (a>0) tmp=tmp+", ";
				tmp=tmp+"?";
			}
			
			ch.insert(pos, tmp);
			
			sql_statement=ch.toString();
		}
		
		filter_added++;
		
		if (filter_added>1) sbSQLWhere.append("\n AND ");
		sbSQLWhere.append(sql_statement);
		
		for (int a=0;a<arrX.length;a++) {
			
			
			String bindval=arrX[a];
			
			System.out.println("a="+a+" : "+ bindval +" ["+bind_type+"]");
			
			if (bind_type.equals("INTEGER")) 
				wherebindlist.add(new String[]{"INTEGER",bindval});
			else if (bind_type.equals("LONG")) 
				wherebindlist.add(new String[]{"LONG",bindval});
			else if (bind_type.equals("DATE")) 
				wherebindlist.add(new String[]{"DATE",bindval});
			else if (bind_type.equals("DATETIME")) 
				wherebindlist.add(new String[]{"DATETIME",bindval});
			else 
				wherebindlist.add(new String[]{"STRING",bindval});
		}
		
		
		
	}
	String selected_fields="";

	
	if (
			(field_list.length()==0 && group_by.length()==0 && sum_field.length()==0)
			|| 
			(sum_field.length()>0 && view_type.equals("PIVOT") )) selected_fields="*";
	else {
		if (group_by.length()>0 || sum_field.length()>0) {
			selected_fields=group_by;
			
			if (sum_field.length()>0) {
				
				String[] arrSumFields=sum_field.replace("\\|::\\|",",").split(",");
				String[] arrSumFunctions=sum_function.replace("\\|::\\|",",").split(",");
				
				
				for (int s=0;s<arrSumFields.length;s++) {
					String a_field=arrSumFields[s];
					if (a_field.trim().length()==0) continue;
					String a_function="";
					try{a_function=arrSumFunctions[s];} catch(Exception e) {}
					if (a_function.trim().length()==0) continue;
					
					if (selected_fields.length()>0) selected_fields=selected_fields+",";
					
					if (a_function.contains("#")) {
						selected_fields=selected_fields+a_function+" " +a_field;
						selected_fields=selected_fields.replace("#", a_field);
					}
					else 
						selected_fields=selected_fields+a_function+"("+a_field+") "+a_field;
				}
				
				
				
			}
		} else 
			selected_fields=field_list;
		
	}
	
	selected_fields=selected_fields.replaceAll("\\|::\\|", ",");
	
	StringBuilder sbSQL=new StringBuilder(query_statement);
	
	sbSQL.insert(0,"SELECT "+selected_fields+" \n FROM (\n");
	


	sbSQL.append("\n) mainblock \n");
	
	if (sbSQLWhere.length()>0) {
		sbSQL.append("WHERE ");
		sbSQL.append(sbSQLWhere);
	}
	
	if (group_by.length()>0) 
		sbSQL.append("\nGROUP BY "+group_by.replaceAll("\\|::\\|",","));
	else if (order_by.length()>0) {
		sbSQL.append("\nORDER BY "+order_by.replaceAll("\\|::\\|",","));
	}
	
	if (runMode.equals("TEST")) {
		sb.append("<tr>");
		sb.append("<td>");
		sb.append("<span class=\"label label-warning\">SQL Statement</span>");
		sb.append("</td>");
		sb.append("<td>");
		sb.append(sbSQL.toString().replaceAll("\n|\r", "<br>"));
		sb.append("</td>");
		sb.append("</tr>");
		
		if (wherebindlist.size()>0) {
			sb.append("<tr>");
			sb.append("<td>");
			sb.append("<span class=\"label label-warning\">Bindlist</span>");
			sb.append("</td>");
			sb.append("<td>");
			for (int b=0;b<wherebindlist.size();b++) {
				String type=wherebindlist.get(b)[0];
				String value=wherebindlist.get(b)[1];
				if (b>0) sb.append("<br>");
				sb.append(""+(b+1)+": {<b>"+value+"</b>} [<i>"+type+"</i>]");
			}
			sb.append("</td>");
			sb.append("</tr>");
		}
		
		
		
		sb.append("</table>");
	}
	
	
	
	
	if (runMode.equals("DOWNLOAD")) {
		sb.setLength(0);
		sb.append(getDashboardViewDataAsCsv(conn, session, sbSQL.toString(), env_id, wherebindlist,nvl(view_user_title,view_name)));
		return sb.toString();
	}  
	
	
	

	
	sb.append(drawMadDashboardView(conn, session, application, sbSQL.toString(), env_id, wherebindlist, 
			view_id,
			nvl(view_user_title,view_name),
			target_div_id,
			view_type,
			field_list,
			title_list,
			color_list,
			group_by,
			sum_field,
			sum_function,
			order_by,
			x_field,
			y_field,
			decimal_size));
	
	
	return sb.toString();

	

}


//*********************************************************
String getDashboardViewDataAsCsv(
		Connection conn, 
		HttpSession session, 
		String sql, 
		String env_id,
		ArrayList<String[]> bindlist, 
		String title
		) {
	StringBuilder sb=new StringBuilder();
	
	ArrayList<String> colList=new ArrayList<String>();
	
	ArrayList<String[]> dashboardRecs=getDbArrayApp(conn, env_id, sql, Integer.MAX_VALUE, bindlist, colList);
	
	if (dashboardRecs==null || dashboardRecs.size()==0)  return "";
	
	//sb.append(title);
	//sb.append("\n");
	
	String delimiter=",";
	
	for (int i=0;i<colList.size();i++) {
		if (i>0) sb.append(delimiter);
		sb.append(colList.get(i));
		
	}
		
	sb.append("\n");
	
	for (int i=0;i<dashboardRecs.size();i++) {
		String[] row=dashboardRecs.get(i);
		
		if (i>0) sb.append("\n");
		
		for (int c=0;c<row.length;c++) {
			if (c>0) sb.append(delimiter);
			sb.append(row[c].replaceAll("\n", "\\n").replaceAll("\r", "\\r").replaceAll("\t", "\\t"));
		}
		
	}
	
	return sb.toString();
	
}

//*********************************************************
void saveChartAsJpeg(
		Connection conn, 
		HttpSession session, 
		ServletContext application, 
		JFreeChart chart, 
		String view_id, 
		String divid, 
		StringBuilder sb) throws Exception {

	 
	 String home = application.getRealPath("/");
		if (home.lastIndexOf(File.separator)==home.length()-1) home=home.substring(0,home.length()-1);
		String download_dir=home+File.separator+"temp";
		
		boolean download_existst=true;
		try {
			File f = new File(download_dir);
			if(!f.exists()) download_existst=false;
		} catch(Exception e) {
			download_existst=false;
			e.printStackTrace();
		}
		
		if (!download_existst) {
			try {
				new File(download_dir).mkdir();
				System.out.println("Directory created : "+download_dir);
			} catch(Exception e) {
				System.out.println("Directory cannot be created : "+download_dir);
				e.printStackTrace();
				return;
			}
		}
		
		String username=(String) session.getAttribute("username");
		String filename=username+"_"+view_id+"_"+divid+".png";
	
	 int height=400;
	 try {height=Integer.parseInt(nvl(getViewDivValue(conn,session,divid,"height"),"400")); } catch(Exception e) {}
	 
	 ChartUtilities.saveChartAsJPEG(new File( download_dir+File.separator+filename),chart,600, height);
	 
	 filename="temp/"+filename;
	 
	 
	 sb.append("<center>");			 
	 sb.append("<IMG SRC=\""+filename+"\" WIDTH=\"80%\" HEIGHT=\"80%\" BORDER=\"0\"  USEMAP=\"#chart\" class=\"img-responsive\">");
	 sb.append("</center>");
	 
}

//*********************************************************
void makeDashboardViewHeader(StringBuilder sb, String view_id, String divid, String report_title) {
	sb.append("<div class=row>");
	
	sb.append("<div class=\"col-md-9\" style=\"background-color:black;\">");
	sb.append("&nbsp;&nbsp;");
	sb.append("<font color=white><big><span class=\"glyphicon glyphicon-fullscreen\" onclick=\"maximizeView('"+divid+"')\"></big></span></font>");
	sb.append("&nbsp;");
	sb.append("<font color=white>"+report_title+"</font>");
	sb.append("</div>");
	
	sb.append("<div class=\"col-md-3\" style=\"background-color:black;\" align=right>");
	
	
	sb.append("<font color=#E6E6E6><big><span class=\"glyphicon glyphicon-cog\" onclick=\"configureDashboardView('"+view_id+"','"+divid+"')\"></big></span></font>");
	sb.append("&nbsp;&nbsp;");
	sb.append("<font color=#19D1FF><big><span class=\"glyphicon glyphicon-save\" onclick=\"downloadDashboardData('"+view_id+"','"+divid+"')\"></big></span></font>");
	sb.append("&nbsp;&nbsp;");
	sb.append("<font color=#FFFF66><big><span class=\"glyphicon glyphicon-pencil\" onclick=\"assignDashboardViewDo('"+view_id+"','"+divid+"')\"></big></span></font>");
	sb.append("&nbsp;&nbsp;");
	sb.append("<font color=lightgreen><big><span class=\"glyphicon glyphicon-refresh\" onclick=\"reloadView('"+view_id+"','"+divid+"')\"></big></span></font>");
	sb.append("&nbsp;&nbsp;");
	sb.append("<font color=red><big><span class=\"glyphicon glyphicon-remove\" onclick=\"removeView('"+view_id+"','"+divid+"')\"></span></big></font>");

	
	sb.append("</div>");
	
	sb.append("</div>");
}

//*********************************************************
String drawMadDashboardView(
		Connection conn, 
		HttpSession session, 
		ServletContext application, 
		String sql_for_view, 
		String env_id,
		ArrayList<String[]> bindlist_for_view, 
		String view_id,
		String report_title,
		String divid,
		String view_type,
		String field_list,
		String title_list,
		String color_list,
		String group_by,
		String sum_field,
		String sum_function,
		String order_by,
		String x_field,
		String y_field,
		String decimal_size
		) {
	StringBuilder sb=new StringBuilder();
	
	String sql="select refresh_interval, refresh_by "+
		" from mad_dashboard_user_configuration "+
		" where user_id=? and view_id=? and divid=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	int user_id=(Integer) session.getAttribute("userid");
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",view_id});
	bindlist.add(new String[]{"INTEGER",""+user_id});
	bindlist.add(new String[]{"STRING",divid});
	ArrayList<String[]> arrX=getDbArrayConf(conn, sql, 1, bindlist);
	
	String refresh_interval="MANUAL";
	String refresh_by="1";
	int remainin_time_as_second=Integer.MAX_VALUE;
	
	if (arrX!=null && arrX.size()==1) {
		refresh_interval=arrX.get(0)[0];
		refresh_by=arrX.get(0)[1];
	}
	
	
	if (!refresh_interval.equals("MANUAL")) {
		
		try {
			int refresh_by_int=Integer.parseInt(refresh_by);
			if (refresh_interval.equals("SECOND")) remainin_time_as_second=refresh_by_int*1;
			if (refresh_interval.equals("MINUTE")) remainin_time_as_second=refresh_by_int*60;
			if (refresh_interval.equals("HOUR")) remainin_time_as_second=refresh_by_int*60*60;
			if (refresh_interval.equals("DAY")) remainin_time_as_second=refresh_by_int*24*60*60;
			
		} catch(Exception e) {
			
		}
	} 
	
	
	sb.append("<input type=hidden name=dashboard_div_ids value=\""+divid+"\">");
	
	sb.append("<input type=hidden id=\"view_id_for_"+divid+"\" value=\""+view_id+"\">");
	sb.append("<input type=hidden id=\"refresh_interval_for_"+divid+"\" value=\""+refresh_interval+"\">");
	sb.append("<input type=hidden id=\"remaining_time_as_second_for_"+divid+"\" value=\""+remainin_time_as_second+"\">");
	
	
	if (!divid.equals("viewExecuteBody")) 
		makeDashboardViewHeader(sb, view_id, divid, report_title);
		
		
	ArrayList<String> colList=new ArrayList<String>();
	
	System.out.println("Executing sql for dashboard view ...");
	
	int MAX_REC=Integer.MAX_VALUE;
	if (view_type.equals("TABLE")) MAX_REC=1000;
	
	ArrayList<String[]> dashboardRecs=getDbArrayApp(conn, env_id, sql_for_view, MAX_REC, bindlist_for_view, colList);
	
	if (dashboardRecs==null || dashboardRecs.size()==0) {
		sb.append("<font color=red>No record found.</font>");
		return sb.toString();
	}
	System.out.println("Executing sql for dashboard view ...Done. Record count :"+dashboardRecs.size());
	
	
	
	
	
	ArrayList<String> colUserList=new ArrayList<String>();
	String[] colArr=field_list.replaceAll("\\|::\\|", ",").split(",");
	
	for (int i=0;i<colArr.length;i++) 
		if (colArr[i].trim().length()>0)
			colUserList.add(colArr[i].trim());
	
	boolean colFiltered=false;
	if (colUserList.size()>0) colFiltered=true;
	ArrayList<String> colUserTitleList=new ArrayList<String>();
	
	String[] titleArr=title_list.replaceAll("\\|::\\|", ",").split(",");
	
	for (int i=0;i<titleArr.length;i++) 
		if (titleArr[i].trim().length()>0)
			colUserTitleList.add(titleArr[i].trim());
	
	ArrayList<String> colorList=new ArrayList<String>();
	String[] colorArr=color_list.replaceAll("\\|::\\|", ",").split(",");
	
	
	
	for (int i=0;i<colorArr.length;i++) 
		if (colorArr[i].trim().length()>0)
			colorList.add(colorArr[i].trim());
	
	if (view_type.equals("TABLE")) {
		sb.append("<table class=\"table table-condensed table-bordered\">");
		
		sb.append("<tr class=warning>");
		for (int i=0;i<colList.size();i++) {
			String colName=colList.get(i);
			try{colName=nvl(colUserTitleList.get(i).trim(),colName);} catch(Exception e) {}
			
			sb.append("<td>");
			sb.append("<b><small>"+colName+"</small></b>");
			sb.append("</td>");
		}	
		sb.append("</tr>");
		
		
		
		
		StringBuilder tdcolor=new StringBuilder();
		
		for (int i=0;i<dashboardRecs.size();i++) {
			String[] row=dashboardRecs.get(i);
			
			sb.append("<tr>");
			for (int r=0;r<row.length;r++) {
				
				if (colFiltered && colUserList.indexOf(colList.get(r))==-1) continue;

				tdcolor.setLength(0);
				try{tdcolor.append(colorList.get(r));} catch(Exception e) {}
				if (tdcolor.length()>0)
					sb.append("<td bgcolor=\""+tdcolor.toString()+"\">");
				else 
					sb.append("<td>");
				sb.append("<small>"+row[r]+"</small>");
				sb.append("</td>");
			}
			sb.append("</tr>");
		}
		
		sb.append("</table>");
	} //if (view_type.equals("TABLE") || view_type.equals("RAW"))
	
		
		
	if (view_type.equals("GRAPH_PIE") || view_type.equals("GRAPH_H_BAR") || view_type.equals("GRAPH_V_BAR") || view_type.equals("GRAPH_LINE")) {
		 
		try {
			DefaultPieDataset pieDataset = new DefaultPieDataset();
			
			final DefaultCategoryDataset categoryDataset = new DefaultCategoryDataset();
			
			for (int i=0;i<dashboardRecs.size();i++) {
				String[] row=dashboardRecs.get(i);
				
				String serie_name="";
				Double serie_value=0.0;
				
				
				int serie_name_col_id=colList.indexOf(x_field.trim());
				
				
				String[] serieFieldsArr=y_field.split(",");
				
				for (int s=0;s<serieFieldsArr.length;s++) {
					String serie_field_name=serieFieldsArr[s];
					if (serie_field_name.trim().length()==0) continue;

					
					int serie_value_col_id=colList.indexOf(serie_field_name);


					
					if (serie_name_col_id==-1)  {
						sb.append("X Column not found in data set: ["+x_field.trim()+"]");
						return toString();
					}
					
					if (serie_value_col_id==-1)  {
						sb.append("Sum Column not found in data set: ["+serie_field_name.trim()+"]");
						return toString();
					}
					
					serie_name=row[serie_name_col_id];
					if (serie_name.trim().length()==0) serie_name="$Empty";
					
					try{serie_value=Double.parseDouble(row[serie_value_col_id]);} catch(Exception e) {continue;}
					
					serie_value=setDecimal(serie_value, decimal_size);
					
					if (view_type.equals("GRAPH_PIE"))
						pieDataset.setValue(serie_name+"="+formatDouble(serie_value,decimal_size), serie_value);
					else if (view_type.equals("GRAPH_LINE"))
						categoryDataset.addValue(serie_value, serie_field_name, serie_name);
					else 
						categoryDataset.addValue(serie_value, serie_field_name, serie_name);
				} //for (int s=0;s<seriesArr.length;s++) 
				
				
				 
			} //or (int i=0;i<dashboardRecs.size();i++)
			
			
			
			
			
			
			JFreeChart chart = null;
			
			String categoryAxisLabel=x_field;
			String valueAxisLabel=sum_function+" of " + y_field;
			
			if (view_type.equals("GRAPH_PIE")) 
				chart=ChartFactory.createPieChart3D("",pieDataset,true,true,false);
			else if (view_type.equals("GRAPH_H_BAR")) 
				chart=ChartFactory.createBarChart3D("", categoryAxisLabel, valueAxisLabel, categoryDataset, PlotOrientation.HORIZONTAL, true,true,false);
			else if (view_type.equals("GRAPH_V_BAR")) 
				chart=ChartFactory.createBarChart3D("", categoryAxisLabel, valueAxisLabel, categoryDataset, PlotOrientation.VERTICAL, true,true,false);
			else if (view_type.equals("GRAPH_LINE")) 
				chart=ChartFactory.createLineChart3D("", categoryAxisLabel, valueAxisLabel, categoryDataset, PlotOrientation.VERTICAL, true,true,false);
			

			
			
			
			
			saveChartAsJpeg(conn,session,application,chart,view_id,divid,sb);
			
			 
		} catch(Exception e) {
			sb.setLength(0);
			sb.append("Chart creation failed.");
			return sb.toString();
		}
		 

	}
		
	if (view_type.equals("PIVOT")) {
		
		HashMap hm = new HashMap();
		
		
		
		ArrayList<String> xArr=new ArrayList<String>();
		ArrayList<String> yArr=new ArrayList<String>();
		
		int x_col_id=colList.indexOf(x_field);
		int y_col_id=colList.indexOf(y_field);
		int sum_col_id=colList.indexOf(sum_field);
		
		if (x_col_id==-1) {
			sb.append("X Column ["+x_field+"] not found in source");
			return sb.toString();
		}
		if (y_col_id==-1) {
			sb.append("Y Column ["+y_field+"] not found in source");
			return sb.toString();
		}
		
		if (sum_col_id==-1) {
			sb.append("Summary Column ["+sum_field+"] not found in source");
			return sb.toString();
		}
		
		StringBuilder sbX=new StringBuilder();
		StringBuilder sbY=new StringBuilder();
		StringBuilder sbSum=new StringBuilder();
		
		Double val=0.0;
		Long cnt= (long) 0;
				
		for (int i=0;i<dashboardRecs.size();i++) {
			
			sbX.setLength(0);  sbX.append(dashboardRecs.get(i)[x_col_id]);
			sbY.setLength(0);  sbY.append(dashboardRecs.get(i)[y_col_id]);
			sbSum.setLength(0);  sbSum.append(dashboardRecs.get(i)[sum_col_id]);
			
			int x_Arrid=xArr.indexOf(sbX.toString());
			int y_Arrid=yArr.indexOf(sbY.toString());
			
			
			if (x_Arrid==-1) {xArr.add(sbX.toString()); x_Arrid=xArr.indexOf(sbX.toString());}
			if (y_Arrid==-1) {yArr.add(sbY.toString()); y_Arrid=yArr.indexOf(sbY.toString());}

			val=0.0;
			cnt=(Long) hm.get("COUNT_"+x_Arrid+"_"+y_Arrid);
			
			if (cnt==null) cnt=(long) 0;
			
			if (sum_function.toLowerCase().trim().equals("count"))  {
				cnt++;
				hm.put("COUNT_"+x_Arrid+"_"+y_Arrid,		cnt);
				hm.put("VAL_"+x_Arrid+"_"+y_Arrid+"_"+cnt,	1.0);
			}
			else {
				try {
					val=Double.parseDouble(sbSum.toString());
					
					cnt++;
					hm.put("COUNT_"+x_Arrid+"_"+y_Arrid,		cnt);
					hm.put("VAL_"+x_Arrid+"_"+y_Arrid+"_"+cnt,	val);
					
					
				} catch(Exception e) {
					
					
				}
			}
			
			
			
			
		}
		
		sb.append("<table class=\"table table-condensed table-bordered\">");
		
		sb.append("<tr class=warning>");
		sb.append("<td class=info><small>"+sum_function+"("+sum_field+") <br> ["+x_field+"/"+y_field+"]</small></td>");
		
		for (int x=0;x<xArr.size();x++) {
			sb.append("<td  align=right>");
			sb.append("<b><small>"+nvl(xArr.get(x),"${null}")+"</small></b>");
			sb.append("</td>");
		}
		
		sb.append("<td  align=right>");
		sb.append("<b><small>Grand Total</small></b>");
		sb.append("</td>");
		
		sb.append("</tr>");
		
		StringBuilder cell_val_str=new StringBuilder();
		
		for (int y=0;y<yArr.size();y++) {
			sb.append("<tr>");
			
			sb.append("<td class=warning align=right>");
			sb.append("<b><small>"+nvl(yArr.get(y),"${null}")+"</small></b>");
			sb.append("</td>");
			
			
			for (int x=0;x<xArr.size();x++) {
				cell_val_str.setLength(0);
				cell_val_str.append(getCellSummaries(hm,sum_function, x,x,y,y,decimal_size));
				
				sb.append("<td align=right>");
				sb.append("<small>"+nvl(cell_val_str.toString(),"-") +"</small>");
				sb.append("</td>");
				
			}
			
			
			sb.append("<td  align=right  class=info>");
			sb.append("<b><small>"+getCellSummaries(hm,sum_function,0,xArr.size()-1,y,y,decimal_size)+"</small></b>");
			sb.append("</td>");
			
			sb.append("</tr>");
		}
		
		
		
		
		sb.append("<tr>");
		
		sb.append("<td  align=right  class=info>");
		sb.append("<b><small>Grand Total</small></b>");
		sb.append("</td>");
		
		for (int x=0;x<xArr.size();x++) {
			
			sb.append("<td  align=right  class=info>");
			sb.append("<b><small>"+getCellSummaries(hm,sum_function,x,x,0,yArr.size()-1,decimal_size)+"</small></b>");
			sb.append("</td>");
		}
		
		sb.append("<td  align=right  class=info>");
		sb.append("<b>"+getCellSummaries(hm,sum_function,0,xArr.size()-1,0,yArr.size()-1,decimal_size)+"</b>");
		sb.append("</td>");
		
		sb.append("</tr>");
		
		sb.append("</table>");
	}
	
	
	return sb.toString();
	
	
}

//*********************************************************
String getCellSummaries(HashMap hm, String sum_function, int start_x, int end_x, int start_y, int end_y, String decimal_size) {
	
	StringBuilder cell_val_str=new StringBuilder();
	
	Double sum_val=0.0;

	
	Double min_val=Double.MAX_VALUE;
	Double max_val=Double.MIN_VALUE;
	
	ArrayList<Double> stdDevArr=new ArrayList<Double>();
	
	Long all_count=(long) 0;
	
	for (int x=start_x;x<=end_x;x++) {
		for (int y=start_y;y<=end_y;y++) {	
			if (
					sum_function.toLowerCase().trim().equals("sum") 
					|| sum_function.toLowerCase().trim().equals("avg")
					|| sum_function.toLowerCase().trim().equals("stddev")
					|| sum_function.toLowerCase().trim().equals("min")
					|| sum_function.toLowerCase().trim().equals("max")
					|| sum_function.toLowerCase().trim().equals("count")
					) {
				Long count=(Long) hm.get("COUNT_"+x+"_"+y);
				
				
				if (count!=null) {
					all_count+=count;
					for (long c=1;c<=count;c++) {
						Double a_val=(Double) hm.get("VAL_"+x+"_"+y+"_"+c);
						sum_val+=a_val;
						
						if (a_val<min_val) min_val=a_val;
						if (a_val>max_val) max_val=a_val;
						
						if ( sum_function.toLowerCase().trim().equals("stddev")) 
							stdDevArr.add(a_val);
					}
				}
					
			}
			
		} //for (int y=start_y;y<=end_y;y++)
	} //for (int x=start_x;x<=end_x;x++)
	
		
		
	
	if (sum_function.toLowerCase().trim().equals("sum"))
		cell_val_str.append(formatDouble(sum_val,decimal_size));
	else if (sum_function.toLowerCase().trim().equals("avg")) {
		if (all_count==null || all_count==0)  
			cell_val_str.append("-");
		else  
			cell_val_str.append(formatDouble(sum_val/all_count,decimal_size));
	} else if (sum_function.toLowerCase().trim().equals("count")) {
		if (all_count==null) 
			cell_val_str.append("0");
		else 
			cell_val_str.append(all_count);
	}
	else if (sum_function.toLowerCase().trim().equals("min")) {
		if (min_val==Double.MAX_VALUE) 
			cell_val_str.append("-");
		else 
			cell_val_str.append(min_val);
	}
	else if (sum_function.toLowerCase().trim().equals("max")) {
		if (max_val==Double.MIN_VALUE) 
			cell_val_str.append("-");
		else 
			cell_val_str.append(max_val);
		
	}
	else if (sum_function.toLowerCase().trim().equals("stddev")) {
		if (all_count==null || all_count==0)  
			cell_val_str.append("-");
		else {
				double avg=sum_val/all_count;
				double sum=0.0;
				for (int c=0;c<all_count;c++) 
					sum += Math.pow((stdDevArr.get(c) - avg), 2);
					Double stddev = Math.sqrt(sum / all_count); 
					
					cell_val_str.append(formatDouble(stddev,decimal_size));
			}
	}
	else {
		cell_val_str.append("N/A");
	}
	
	return cell_val_str.toString();
}

//********************************************************
Double setDecimal(Double in, String decimal_size) {
	try {
		return Double.parseDouble(formatDouble(in,decimal_size).replace(",", ""));
	} catch(Exception e) {
		e.printStackTrace();
		return in;
	}
	 
}

//*********************************************************
String formatDouble(Double in, String decimal_size) {
	int dec_size=0;
	
	try {dec_size=Integer.parseInt(decimal_size);} catch(Exception e) {}
	
	try {
		
		String format="###,###,###,###,###";
		if (dec_size>0) format=format+".";
		for (int i=0;i<dec_size;i++) format=format+"#";
		DecimalFormat formatter = new DecimalFormat(format);
		return formatter.format(in);
	}  catch(Exception e) {
		e.printStackTrace();
		return ""+in;
	}
}
//*********************************************************
String extractFilterValue(String values,String flex_field_id) {
	
	String[] arr=values.split("\n");
	for (int i=0;i<arr.length;i++) {
		String el=arr[i];
		int di=el.indexOf("=");
		if (di==-1) continue;
		String param=el.substring(0,di);
		String val="";
		try{val=el.substring(di+1);} catch(Exception e) {}
		if (param.equals(flex_field_id)) return nvl(val,"$null()");
	}
	return "${null}";
}


//--------------------------------------------------------------------------
String loadDashboardLeft(Connection conn, HttpSession session) {
	StringBuilder sb=new StringBuilder();
	
	sb.append("Left menu");
	
	return sb.toString();

}


//--------------------------------------------------------------------------
String loadDashboardMain(Connection conn, HttpSession session, ServletContext application) {
	StringBuilder sb=new StringBuilder();
	
	String layout=getUserDashboardLayout(conn,session);
	
	if (layout.equals("PCS_1")) {
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-12\" id=divDashboardMain style=\"min-height: "+getViewDivValue(conn,session,"divDashboardMain","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardMain","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application,  "divDashboardMain"));
		sb.append("</div>");
		sb.append("</div>");
		

	}
	
	if (layout.equals("PCS_4")) {
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-6\" id=divDashboardTopLeft style=\"min-height: "+getViewDivValue(conn,session,"divDashboardTopLeft","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardTopLeft","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application,  "divDashboardTopLeft"));
		//sb.append("<script language=\"text/javascript\">alert('0','divDashboardTopLeft')</script>");
		sb.append("</div>");
		sb.append("<div class=\"col-md-6\" id=divDashboardTopRight  style=\"min-height: "+getViewDivValue(conn,session,"divDashboardTopRight","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardTopRight","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application,  "divDashboardTopRight"));
		sb.append("</div>");
		sb.append("</div>");
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-6\" id=divDashboardBottomLeft  style=\"min-height: "+getViewDivValue(conn,session,"divDashboardBottomLeft","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardBottomLeft","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application,  "divDashboardBottomLeft"));
		sb.append("</div>");
		sb.append("<div class=\"col-md-6\" id=divDashboardBottomRight  style=\"min-height: "+getViewDivValue(conn,session,"divDashboardBottomRight","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardBottomRight","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application,  "divDashboardBottomRight"));
		sb.append("</div>");
		sb.append("</div>");

	}
	
	if (layout.equals("PCS_8")) {
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-6\" id=divDashboardTopLeft style=\"min-height: "+getViewDivValue(conn,session,"divDashboardTopLeft","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardTopLeft","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application,  "divDashboardTopLeft"));
		sb.append("</div>");
		sb.append("<div class=\"col-md-6\" id=divDashboardTopRight  style=\"min-height: "+getViewDivValue(conn,session,"divDashboardTopRight","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardTopRight","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application,  "divDashboardTopRight"));
		sb.append("</div>");
		sb.append("</div>");
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-6\" id=divDashboardBottomLeft  style=\"min-height: "+getViewDivValue(conn,session,"divDashboardBottomLeft","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardBottomLeft","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application,  "divDashboardBottomLeft"));
		sb.append("</div>");
		sb.append("<div class=\"col-md-6\" id=divDashboardBottomRight  style=\"min-height: "+getViewDivValue(conn,session,"divDashboardBottomRight","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardBottomRight","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application,  "divDashboardBottomRight"));
		sb.append("</div>");
		sb.append("</div>");

		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-6\" id=divDashboardTopLeft2 style=\"min-height: "+getViewDivValue(conn,session,"divDashboardTopLeft2","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardTopLeft2","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application, "divDashboardTopLeft2"));
		sb.append("</div>");
		sb.append("<div class=\"col-md-6\" id=divDashboardTopRight2  style=\"min-height: "+getViewDivValue(conn,session,"divDashboardTopRight2","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardTopRight2","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application,  "divDashboardTopRight2"));
		sb.append("</div>");
		sb.append("</div>");
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-6\" id=divDashboardBottomLeft2  style=\"min-height: "+getViewDivValue(conn,session,"divDashboardBottomLeft2","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardBottomLeft2","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application,  "divDashboardBottomLeft2"));
		sb.append("</div>");
		sb.append("<div class=\"col-md-6\" id=divDashboardBottomRight2  style=\"min-height: "+getViewDivValue(conn,session,"divDashboardBottomRight2","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardBottomRight2","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application,  "divDashboardBottomRight2"));
		sb.append("</div>");
		sb.append("</div>");
	}
	
	if (layout.equals("PCS_2_HOR")) {
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-12\" id=divDashboardTop style=\"min-height: "+getViewDivValue(conn,session,"divDashboardTop","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardTop","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application,  "divDashboardTop"));
		sb.append("</div>");
		sb.append("</div>");
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-12\" id=divDashboardBottom style=\"min-height: "+getViewDivValue(conn,session,"divDashboardBottom","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardBottom","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application,  "divDashboardBottom"));
		sb.append("</div>");
		sb.append("</div>");
		
	}

	if (layout.equals("PCS_2_VER")) {
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-6\" id=divDashboardLeft style=\"min-height: "+getViewDivValue(conn,session,"divDashboardLeft","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardLeft","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application,  "divDashboardLeft"));
		sb.append("</div>");
		sb.append("<div class=\"col-md-6\" id=divDashboardRight  style=\"min-height: "+getViewDivValue(conn,session,"divDashboardRight","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardRight","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application,  "divDashboardRight"));
		sb.append("</div>");
		sb.append("</div>");
		

	}
		
	
	if (layout.equals("PCS_3_HOR_1_TOP_2_BOTTOM")) {
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-12\" id=divDashboardTop style=\"min-height: "+getViewDivValue(conn,session,"divDashboardTop","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardTop","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application,  "divDashboardTop"));
		sb.append("</div>");
		sb.append("</div>");
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-6\" id=divDashboardBottomLeft  style=\"min-height: "+getViewDivValue(conn,session,"divDashboardBottomLeft","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardBottomLeft","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application,  "divDashboardBottomLeft"));
		sb.append("</div>");
		sb.append("<div class=\"col-md-6\" id=divDashboardBottomRight  style=\"min-height: "+getViewDivValue(conn,session,"divDashboardBottomRight","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardBottomRight","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application, "divDashboardBottomRight"));
		sb.append("</div>");
		sb.append("</div>");
		
	}
	
	
	if (layout.equals("PCS_3_HOR_2_TOP_1_BOTTOM")) {
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-6\" id=divDashboardTopLeft style=\"min-height: "+getViewDivValue(conn,session,"divDashboardTopLeft","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardTopLeft","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application,  "divDashboardTopLeft"));
		sb.append("</div>");
		sb.append("<div class=\"col-md-6\" id=divDashboardTopRight  style=\"min-height: "+getViewDivValue(conn,session,"divDashboardTopRight","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardTopRight","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application,  "divDashboardTopRight"));
		sb.append("</div>");
		sb.append("</div>");
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-12\" id=divDashboardBottom style=\"min-height: "+getViewDivValue(conn,session,"divDashboardBottom","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardBottom","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application,  "divDashboardBottom"));
		sb.append("</div>");
		sb.append("</div>");
		
	}
	
	if (layout.equals("PCS_3_VER_1_LEFT_2_RIGHT")) {
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-6\" id=divDashboardLeft style=\"min-height: "+getViewDivValue(conn,session,"divDashboardLeft","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardLeft","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application,  "divDashboardLeft"));
		sb.append("</div>");
		
		sb.append("<div class=\"col-md-6\" id=divDashboardX>");


		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-12\" id=divDashboardTopRight  style=\"min-height: "+getViewDivValue(conn,session,"divDashboardTopRight","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardTopRight","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application, "divDashboardTopRight"));
		sb.append("</div>");
		sb.append("</div>");
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-12\" id=divDashboardBottomRight  style=\"min-height: "+getViewDivValue(conn,session,"divDashboardBottomRight","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardBottomRight","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application, "divDashboardBottomRight"));
		sb.append("</div>");
		sb.append("</div>");
		
		
		sb.append("</div>");
		sb.append("</div>");
		
		
		
	}

	
	if (layout.equals("PCS_3_VER_2_LEFT_1_RIGHT")) {
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-6\" id=divDashboardX>");

		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-12\" id=divDashboardTopLeft  style=\"min-height: "+getViewDivValue(conn,session,"divDashboardTopLeft","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardTopLeft","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application, "divDashboardTopLeft"));
		sb.append("</div>");
		sb.append("</div>");
		
		sb.append("<div class=row>");
		sb.append("<div class=\"col-md-12\" id=divDashboardBottomLeft  style=\"min-height: "+getViewDivValue(conn,session,"divDashboardBottomLeft","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardBottomLeft","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application, "divDashboardBottomLeft"));
		sb.append("</div>");
		sb.append("</div>");
		
		sb.append("</div>");

		sb.append("<div class=\"col-md-6\" id=divDashboardRight style=\"min-height: "+getViewDivValue(conn,session,"divDashboardRight","height")+"px; max-height: "+getViewDivValue(conn,session,"divDashboardRight","height")+"px; overflow-x: scroll; overflow-y: scroll;\">");
		sb.append(buildDashBoardDiv(conn,session, application, "divDashboardRight"));
		sb.append("</div>");

		sb.append("</div>");

		
	}

	return sb.toString();

	

}

//***********************************************************
String getViewDivValue(Connection conn,HttpSession session,String divid,String fieldname) {
	
	int user_id=(Integer) session.getAttribute("userid");
	
	String sql="select "+fieldname+"  from mad_dashboard_user_configuration where user_id=? and divid=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",""+user_id});
	bindlist.add(new String[]{"STRING",""+divid});
	
	

	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr!=null && arr.size()==1) {
		String val1=arr.get(0)[0];
		
		if (fieldname.equals("height")) {
			try {
				int height=Integer.parseInt(val1);
				if (height<10) height=10;
				if (height>1000) height=1000;
				return ""+height;
			} catch(Exception  e) {
				
			}
		} else return val1;
		
		
	}
	
	

	if (divid.equals("divDashboardTopLeft")) return "240";
	if (divid.equals("divDashboardBottom")) return "240";
	if (divid.equals("divDashboardBottomLeft")) return "240";
	if (divid.equals("divDashboardBottomLeft2")) return "240";
	if (divid.equals("divDashboardBottomRight")) return "240";
	if (divid.equals("divDashboardBottomRight2")) return "240";
	if (divid.equals("divDashboardTop")) return "240";
	if (divid.equals("divDashboardTopLeft")) return "240";
	if (divid.equals("divDashboardTopLeft2")) return "240";
	if (divid.equals("divDashboardTopRight")) return "240";
	if (divid.equals("divDashboardTopRight2")) return "240";
	
	if (divid.equals("divDashboardLeft")) return "480";
	if (divid.equals("divDashboardRight")) return "480";
	
	if (divid.equals("divDashboardMain")) return "480";
	
	
	
		
	return "";
	
}

//***********************************************************
String buildDashBoardDiv(Connection conn, HttpSession session, ServletContext application, String divid) {
	StringBuilder sb=new StringBuilder();
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	int userid=(Integer) session.getAttribute("userid");
	
	String sql="select id, view_id, parameters, report_title from mad_dashboard_user_configuration where user_id=? and divid=?";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",""+userid});
	bindlist.add(new String[]{"STRING",divid});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr==null || arr.size()==0) {
		sb.append("<center><font color=red>No view assigned. Click <a href=\"javascript:assignDashboardView('"+divid+"')\">here</a> to assign one.</font></center>");
		return sb.toString();
	}
	
	String id=arr.get(0)[0];
	String view_id=arr.get(0)[1];
	String parameters=arr.get(0)[2];
	String report_title=arr.get(0)[3];
	
	
	sb.append(
			runMadDashView(conn, session, application,
				view_id, 
				report_title, 
				parameters, 
				"LIVE", 
				divid)
			);
	
	return sb.toString();
}



//***********************************************************
void removeDashBoardDiv(Connection conn, HttpSession session, String divid) {
	StringBuilder sb=new StringBuilder();
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	int userid=(Integer) session.getAttribute("userid");
	
	String sql="delete from mad_dashboard_user_configuration where user_id=? and divid=?";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",""+userid});
	bindlist.add(new String[]{"STRING",divid});
	execDBConf(conn, sql, bindlist);
	
}


//***********************************************************
void changeDashboardLayout(Connection conn, HttpSession session, String layout) {
	StringBuilder sb=new StringBuilder();
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	int userid=(Integer) session.getAttribute("userid");
	
	String sql="delete from mad_dashboard_user_configuration where user_id=? and divid='LAYOUT'";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",""+userid});
	execDBConf(conn, sql, bindlist);


	sql="insert into mad_dashboard_user_configuration(user_id,divid,parameters) values (?, ?, ?)";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",""+userid});
	bindlist.add(new String[]{"STRING","LAYOUT"});
	bindlist.add(new String[]{"STRING",layout});
	execDBConf(conn, sql, bindlist);
}


//*****************************************************************
String downloadDashboardViewData(Connection conn, HttpSession session, ServletContext application, String view_id, String divid) {
	
	
	int user_id=(Integer) session.getAttribute("userid");
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	String sql="select  report_title,parameters " + 
			" from mad_dashboard_user_configuration  " + 
			" where user_id=? and view_id=? and divid=?";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",""+user_id});
	bindlist.add(new String[]{"INTEGER",""+view_id});
	bindlist.add(new String[]{"STRING",""+divid});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr==null || arr.size()==0) return "";
	
	String report_title=arr.get(0)[0];
	String parameters=arr.get(0)[0];
	
	
	
	
	StringBuilder sb=new StringBuilder();
	
	sb.append(runMadDashView(conn, session,  application, view_id, report_title, parameters, "DOWNLOAD", ""));
	
	if (sb.length()==0) return "";
	
	
	
	String home = application.getRealPath("/");
	if (home.lastIndexOf(File.separator)==home.length()-1) home=home.substring(0,home.length()-1);
	String download_dir=home+File.separator+"temp";
	
	boolean download_existst=true;
	try {
		File f = new File(download_dir);
		if(!f.exists()) download_existst=false;
	} catch(Exception e) {
		download_existst=false;
		e.printStackTrace();
	}
	
	if (!download_existst) {
		try {
			new File(download_dir).mkdir();
			System.out.println("Directory created : "+download_dir);
		} catch(Exception e) {
			System.out.println("Directory cannot be created : "+download_dir);
			e.printStackTrace();
			return "";
		}
	}
	
	String username=(String) session.getAttribute("username");
	String filename=username+"_"+view_id+"_"+divid+".csv";
	
	text2file(sb.toString(), download_dir+File.separator+filename);

	filename="temp/"+filename;
	
	

	
	
	return filename;
}

//*************************************************************************
String buildDashBoardConfigurationWindow(Connection conn, HttpSession session, String view_id, String divid) {
	
	StringBuilder sb=new StringBuilder();
	
	int user_id=(Integer) session.getAttribute("userid");
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String sql="select  id, report_title, " + 
			" refresh_interval, refresh_by, send_notification, notification_groups, height " + 
			" from mad_dashboard_user_configuration  " + 
			" where user_id=? and view_id=? and divid=?";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",""+user_id});
	bindlist.add(new String[]{"INTEGER",""+view_id});
	bindlist.add(new String[]{"STRING",""+divid});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr==null || arr.size()==0) return "";
	
	String config_id=arr.get(0)[0];
	String report_title=arr.get(0)[1];
	String refresh_interval=nvl(arr.get(0)[2],"MINUTE");
	String refresh_by=nvl(arr.get(0)[3],"10");
	String send_notification=nvl(arr.get(0)[4],"NO");
	String notification_groups=nvl(arr.get(0)[5],"");
	String height=nvl(arr.get(0)[6],"240");
	
	
	sb.append("<input type=hidden id=config_id value=\""+config_id+"\">");
	sb.append("<input type=hidden id=original_vals value=\""+height+"_"+refresh_by+"_"+refresh_interval+"\">");
	
	sb.append("<b><center><span class=\"label label-warning\">"+report_title+"</class></center></b>");
	sb.append("<hr>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-6\" align=right><span class=\"label label-info\">Height in pixel : </span></div>");
	sb.append("<div class=\"col-md-6\">");
	sb.append(makeNumber("0", "height", height, "", "EDIT", "5", "0", ",", "", "", "100", "1000"));
	sb.append("</div>");
	sb.append("</div>");
	
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-6\" align=right><span class=\"label label-info\">Refresh Interval : </span></div>");
	sb.append("<div class=\"col-md-3\">");
	sb.append(makeNumber("0", "refresh_by", refresh_by, "", "EDIT", "5", "0", ",", "", "", "0", "99999"));
	sb.append("</div>");
	sb.append("<div class=\"col-md-3\">");
	ArrayList<String[]> arrInterval=new ArrayList<String[]>();
	arrInterval.add(new String[]{"MANUAL","Manual"});
	arrInterval.add(new String[]{"DAY","Day"});
	arrInterval.add(new String[]{"HOUR","Hour"});
	arrInterval.add(new String[]{"MINUTE","Minute"});
	arrInterval.add(new String[]{"SECOND","Second"});
	sb.append(makeComboArr(arrInterval, "", "size=1 id=refresh_interval ", refresh_interval, 0));	
	sb.append("</div>");
	sb.append("</div>");
	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-6\" align=right><span class=\"label label-info\">Notify me with email : </span></div>");
	sb.append("<div class=\"col-md-6\">");
	ArrayList<String[]> yesnoArr=new ArrayList<String[]>();
	yesnoArr.add(new String[]{"YES","Yes"});
	yesnoArr.add(new String[]{"NO","No"});
	sb.append(makeComboArr(yesnoArr, "", "size=1 id=send_notification ", send_notification, 0));	
	sb.append("</div>");
	sb.append("</div>");

	
	sb.append("<div class=row>");
	sb.append("<div class=\"col-md-12\">");
	sql="select id, group_name from mad_group where group_type='NOTIFICATION' order by 2";
	bindlist.clear();
	ArrayList<String[]> source_arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	ArrayList<String[]> picked_arr=new ArrayList<String[]>();

	
	String[] grpArr=notification_groups.split("\\|::\\|");
	for (int g=0;g<grpArr.length;g++) {
		if (grpArr[g].length()==0) continue;
		picked_arr.add(new String[]{grpArr[g]});
	}
	
	sb.append(makePickList("0", "notification_groups", source_arr, picked_arr, "Additional Notification Groups", ""));
	sb.append("</div>");
	sb.append("</div>");
	
	
	
	return sb.toString();
	
	
}

//***********************************************************
void saveDashboardViewConfig(Connection conn, HttpSession session, 
		String config_id,
		String height,
		String refresh_by,
		String refresh_interval,
		String send_notification,
		String notification_groups
		) {
	StringBuilder sb=new StringBuilder();
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	String sql="update mad_dashboard_user_configuration set "+
		" height=?, \n"+
		" refresh_by=?, \n"+
		" refresh_interval=?, \n"+
		" send_notification=?, \n"+
		" notification_groups=? \n"+
		" where id=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",""+height});
	bindlist.add(new String[]{"INTEGER",""+refresh_by});
	bindlist.add(new String[]{"STRING",""+refresh_interval});
	bindlist.add(new String[]{"STRING",""+send_notification});
	bindlist.add(new String[]{"STRING",""+notification_groups});
	bindlist.add(new String[]{"INTEGER",""+config_id});
	execDBConf(conn, sql, bindlist);


}



//*****************************************************************
String userpassdecrypt(String val) {
	String ret1="";
	int i=0;
	while (true) {
		int char_len=0;
		try {char_len=Integer.parseInt(val.substring(i,i+1));} catch(Exception e) {break;}
		char c=(char) Integer.parseInt(val.substring(i+1,i+1+char_len));
		ret1=ret1+c;
		i=i+char_len+1;
	}
	
	return ret1;
}

//*****************************************************************
boolean doLoginAttempt(Connection conn, HttpSession session, String input_username, String input_password) {
	
	
	String username=userpassdecrypt(input_username);
	String password=userpassdecrypt(input_password);


	
	int user_id=checkuser(conn,username,password);

	if (user_id==0) {
		session.setAttribute("invalid_user_attempt", "true");
		return false;
	}
	
	
	

	String sql="select fname, lname, email, lang, authentication_method from tdm_user where valid='Y' and id=?";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	ArrayList<String[]> res=new ArrayList<String[]>();
	bindlist.add(new String[]{"INTEGER",""+user_id});
	

	res=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (res==null || res.size()==0) {
		session.setAttribute("invalid_user_attempt", "true");
		return false;
	}

	String fname=res.get(0)[0];
	String lname=res.get(0)[1];
	String email=res.get(0)[2];
	String lang=res.get(0)[3];
	//String authentication_method=res.get(0)[4];
	
	session.setAttribute("username", username);	
	session.setAttribute("userid", user_id);	
	session.setAttribute("userfname", fname);	
	session.setAttribute("userlname", lname);	
	session.setAttribute("useremail", email);	
	session.setAttribute("curr_lang", lang);
	//session.setAttribute("authentication_method", authentication_method);
	
	
	
	
	
	
	
	sql="select shortcode from tdm_user_role ur, tdm_role r where ur.role_id=r.id and user_id=" + user_id;
	
	bindlist=new ArrayList<String[]>();
	res=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	for (int i=0;i<res.size();i++) {
		session.setAttribute("hasrole_"+res.get(i)[0], "true");
	}
	
	loadUserPermissions(conn,session,""+user_id);
	
	sql="select lang, lang_desc from mad_lang order by 2";
	bindlist.clear();
	ArrayList<String[]> langArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	session.setAttribute("langArr", langArr);
	
	
	
	session.setAttribute("invalid_user_attempt", null);
	
	return true;
}

//**********************************************************************************
String getListOfParentRequests(Connection conn, HttpSession session, String child_request_id) {
	StringBuilder sb=new StringBuilder();
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select \n"+
		"	r.id,  \n"+
		"	description , \n"+
		"	request_type, \n"+
		"	status, \n"+
		"	concat(fname, ' ', lname) created_by, \n"+
		"	date_format(r.entdate,?) entdate, \n"+
		"	date_format(deployment_date,?) deployment_date, \n"+
		"   request_group \n"+
		"	from  \n"+
		"	mad_request_link lnk,  \n"+
		"	mad_request r,  \n"+
		"	mad_request_type rt, \n"+
		"	tdm_user u \n"+
		"	where lnk.linked_request_id=? and is_saved='YES' \n"+
		"	and lnk.request_id=r.id \n"+
		"	and r.request_type_id=rt.id \n"+
		"	and r.entuser=u.id \n"+
		"	order by 1 desc";
	
	bindlist.clear();
	bindlist.add(new String[]{"STRING",mysql_format});
	bindlist.add(new String[]{"STRING",mysql_format});
	bindlist.add(new String[]{"INTEGER",child_request_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	sb.append("<table class=\"table table-condensed table-striped\">");
	
	sb.append("<tr class=info>");
	sb.append("<td><b>"+decodeStringTitle(conn, session, "#", "SYS_REQ_REQUEST_ID", false)+"</b></td>");
	sb.append("<td><b>"+decodeStringTitle(conn, session, "Description", "SYS_REQ_LIST_TITLES_DESCRIPTION", false)+"</b></td>");
	sb.append("<td><b>"+decodeStringTitle(conn, session, "Request Type", "SYS_REQ_REQUEST_TYPE", false)+"</b></td>");
	sb.append("<td><b>"+decodeStringTitle(conn, session, "Status", "SYS_REQ_LIST_TITLES_STATUS", false)+"</b></td>");
	sb.append("<td><b>"+decodeStringTitle(conn, session, "Created By", "SYS_REQ_LIST_TITLES_CREATED_BY", false)+"</b></td>");
	sb.append("<td><b>"+decodeStringTitle(conn, session, "Creation Time", "SYS_REQ_LIST_TITLES_CREATED_AT", false)+"</b></td>");
	sb.append("<td><b>"+decodeStringTitle(conn, session, "Deployment Time", "SYS_REQ_DEPLOYMENT_TIME", false)+"</b></td>");
	sb.append("</tr>");
	
	System.out.println("rec " + arr.size());
	
	for (int i=0;i<arr.size();i++) {
		
		String request_id=arr.get(i)[0];
		String description=arr.get(i)[1];
		String request_type=arr.get(i)[2];
		String status=arr.get(i)[3];
		String created_by=arr.get(i)[4];
		String creation_time=arr.get(i)[5];
		String deployment_time=arr.get(i)[6];
		String request_group=arr.get(i)[7];
		
		
		
		sb.append("<tr>");
		sb.append("<td align=right>");
		sb.append("<b>"+request_id+"</b> ");
		sb.append("<a href=\"javascript:openRequest('"+request_id+"','"+request_group+"');\"><span class=\"glyphicon glyphicon-share-alt\"></span></a>");
		sb.append("</td>");
		sb.append("<td>"+codehtml(description)+"</td>");
		sb.append("<td>"+request_type+"</td>");
		sb.append("<td>"+status+"</td>");
		sb.append("<td>"+created_by+"</td>");
		sb.append("<td>"+creation_time+"</td>");
		sb.append("<td>"+deployment_time+"</td>");
		sb.append("</tr>");

	}
	
	sb.append("</table>");
	
	return sb.toString();
}

//******************************************************************
void reorderMadFlowStateActionMethod(Connection conn, HttpSession session, String action_id, String execution_order, String direction) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	
	sql="select id from mad_flow_state_action_methods where flow_state_action_id=? and execution_order=?";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",action_id});
	bindlist.add(new String[]{"INTEGER",execution_order});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String curr_id=arr.get(0)[0];
	
	sql="select id,execution_order  from mad_flow_state_action_methods where flow_state_action_id=?";
	
	if (direction.equals("UP")) 
		sql=sql +" and execution_order<? order by execution_order desc";
	else 
		sql=sql +" and execution_order>? order by execution_order asc";
		
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",action_id});
	bindlist.add(new String[]{"INTEGER",execution_order});
	arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String swap_id=arr.get(0)[0];
	String swap_execution_order=arr.get(0)[1];
	
	
	
	
	sql="update mad_flow_state_action_methods set execution_order=? where id=?";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",swap_execution_order});
	bindlist.add(new String[]{"INTEGER",curr_id});
	execDBConf(conn, sql, bindlist);
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",execution_order});
	bindlist.add(new String[]{"INTEGER",swap_id});
	execDBConf(conn, sql, bindlist);
	
	
	
}

//******************************************************************
String testMadMethod(Connection conn, HttpSession session, String method_id, String action_method_id) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	StringBuilder sb=new StringBuilder();
	
	
	sql="select " +
			" 	parameter_count, method_name, method_type, "+
			"	source_code, reflection_classname, reflection_methodname,  "+
			"	param_name_1, param_name_2, param_name_3, param_name_4, param_name_5,  " +
			"	param_name_6, param_name_7, param_name_8, param_name_9, param_name_10, " +
			"	param_default_val_1, param_default_val_2, param_default_val_3, param_default_val_4, param_default_val_5,  " +
			"	param_default_val_6, param_default_val_7, param_default_val_8, param_default_val_9, param_default_val_10 " +
			"	from  " +
			"	mad_method m " +
			"	where m.id=? ";
		
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",method_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	
	int parameter_count=Integer.parseInt(arr.get(0)[0]);
	String method_name=arr.get(0)[1];
	String method_type=arr.get(0)[2];
	String source_code=arr.get(0)[3];
	String reflection_classname=arr.get(0)[4];
	String reflection_methodname=arr.get(0)[5];
	
	
	String[] param_names=new String[10];
	String[] values=new String[10];
	
	for (int i=0;i<10;i++) {
		param_names[i]=nvl(arr.get(0)[6+i],"Parameter "+(i+1));
		values[i]=arr.get(0)[6+10+i];
	}
	
	
	//if action method id given, override the values
	if (!nvl(action_method_id,"0").equals("0")) {
		sql="select "+
				" value_1, value_2, value_3, value_4, value_5, "+
				" value_6, value_7, value_8, value_9, value_10 "+
				" from mad_flow_state_action_methods where id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",action_method_id});
		
		arr=getDbArrayConf(conn, sql, 1, bindlist);
		
		if (arr!=null && arr.size()==1) {
			for (int i=0;i<10;i++) {
				values[i]=arr.get(0)[i];
			}
		}
		
		
	}

	sb.append("<input type=hidden id=test_method_id value=\""+method_id+"\">");
	sb.append("<input type=hidden id=test_action_method_id value=\""+action_method_id+"\">");
	sb.append("<input type=hidden id=test_parameter_count value=\""+parameter_count+"\">");

	
	
	sb.append("<table class=\"table table-condensed table-bordered table-striped\">");
	sb.append("<tr class=primary>");
	sb.append("<td bgcolor=blue>");
	sb.append("<h4><font color=black> [<b>"+method_name+"</b>]</font></h4>");
	sb.append("</td>");
	sb.append("</tr>");	
	sb.append("</table>");
	
	sb.append("<h4><span class=\"label label-primary\">Executable Source :</span></h4>");
	
	if (method_type.equals("JAVA")) {
		sb.append("<table class=\"table table-condensed table-bordered table-striped\">");
		
		sb.append("<tr>");
		sb.append("<td align=right nowrap><b>Java Class : </b></td>");
		sb.append("<td>");
		sb.append(reflection_classname);
		sb.append("</td>");
		sb.append("</tr>");	
		
		sb.append("<tr>");
		sb.append("<td align=right nowrap><b>Java Method : </b></td>");
		sb.append("<td>");
		sb.append(reflection_methodname);
		sb.append("</td>");
		sb.append("</tr>");	

		sb.append("</table>");
	} else {
		sb.append("<table class=\"table table-condensed table-bordered table-striped\">");
		
		sb.append("<tr>");
		sb.append("<td>");
		sb.append("<textarea readonly rows=4 style=\"width:100%; background-color:black; color:white; font-family: monospace;\">"+clearHtml(source_code)+"</textarea>");
		sb.append("</td>");
		sb.append("</tr>");	

		sb.append("</table>");
	}
	
	String test_request_id=nvl((String) session.getAttribute("test_request_id"),"0");
	
	sb.append("<h4><span class=\"label label-primary\">Sample Request Id :</span></h4>");
	sb.append("<table class=\"table table-condensed table-bordered table-striped\">");
	sb.append("<tr>");
	sb.append("<td>");
	sb.append(makeText("test_request_id", test_request_id, "  ", 0));
	sb.append("</td>");
	sb.append("</tr>");		
	sb.append("</table>");
	
	if (parameter_count==0) 
		sb.append("No parameters to edit.");
	else {
		
		sb.append("<h4><span class=\"label label-primary\">Parameters :</span></h4>");
		sb.append("<table class=\"table table-condensed table-bordered table-striped\">");
		
		for (int i=0;i<parameter_count;i++) {
			sb.append("<tr>");
			sb.append("<td align=right nowrap><b>"+param_names[i]+" </b></td>");
			sb.append("<td>");
			sb.append(makeText("value_"+(i+1), clearHtml(values[i]), " onchange=\"saveMadFlowStateActionMethodField(this,'"+action_method_id+"'); \" ", 0));
			sb.append("</td>");
			sb.append("</tr>");		
		}
		sb.append("</table>");
	}
	
	
	
	sb.append("<h4><span class=\"label label-primary\">Test Result :</span></h4>");
	sb.append("<table class=\"table table-condensed table-bordered table-striped\">");
	sb.append("<tr>");
	sb.append("<td>");
	sb.append("<div id=testMethodResultDiv></div>");
	sb.append("</td>");
	sb.append("</tr>");	
	sb.append("</table>");
	
	sb.append("<h4><span class=\"label label-primary\">Logs :</span></h4>");
	sb.append("<table class=\"table table-condensed table-bordered table-striped\">");
	sb.append("<tr>");
	sb.append("<td>");
	sb.append("<div id=testMethodLogsDiv></div>");
	sb.append("</td>");
	sb.append("</tr>");	
	sb.append("</table>");

	return sb.toString();
}


//****************************************************************
static final String AB = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
static Random rnd = new Random();

String generateToken(){
	int len=20;
	StringBuilder sb = new StringBuilder(len);
   for( int i = 0; i < len; i++ ) 
      sb.append( AB.charAt( rnd.nextInt(AB.length()) ) );
   return sb.toString();
}


//******************************************************************
boolean executeMadMethodsOnRequestStateChange(
		Connection conn,
		HttpSession session,
		String request_id,
		String flow_state_action_id
		) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="select "+
		" 	sam.id, sam.method_id, sam.execution_type, sam.retry_count, sam.on_fail, "+
		" 	method_name, m.parameter_count, "+
		"	param_name_1, param_name_2, param_name_3, param_name_4, param_name_5, "+
		"	param_name_6, param_name_7, param_name_8, param_name_9, param_name_10, "+
		"	value_1, value_2, value_3, value_4, value_5, "+
		"	value_6, value_7, value_8, value_9, value_10 "+		
		" from "+
		" mad_flow_state_action_methods sam, mad_method m "+
		" where "+
		" flow_state_action_id=? "+
		" and method_id=m.id and m.is_valid='YES' " +
		" and sam.is_valid='YES' "+
		" order by execution_order ";
			
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",flow_state_action_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	if (arr.size()==0) {
		System.out.println("No Method to execute for this action.");
		return true;
	}
	
	
	sql="select id from mad_request_flow_logs where request_id=? and status='OPEN'";
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",request_id});
	
	ArrayList<String[]> idARr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String request_flow_logs_id="";
	try {request_flow_logs_id=idARr.get(0)[0];} catch(Exception e ) {request_flow_logs_id="0";}
	
	StringBuilder executable=new StringBuilder();
	StringBuilder result=new StringBuilder();
	StringBuilder logs=new StringBuilder();
	
	
	
	for (int i=0;i<arr.size();i++) {
		String flow_action_method_id=arr.get(i)[0];
		String method_id=arr.get(i)[1];
		String execution_type=arr.get(i)[2];
		String retry_count=arr.get(i)[3];
		String on_fail=arr.get(i)[4];
		String method_name=arr.get(i)[5];
		int parameter_count=Integer.parseInt(arr.get(i)[6]);
		
		
		String parameters="";
		
		for (int p=0;p<parameter_count;p++) {
			String param_name=arr.get(i)[7+p];
			String param_val=arr.get(i)[7+10+p];
			if (p>0) parameters=parameters+"\n";
			parameters=parameters+param_name+"="+param_val;
		}
		
		
		executable.setLength(0);
		result.setLength(0);
		logs.setLength(0);
		
		sql="SELECT AUTO_INCREMENT FROM information_schema.tables WHERE table_name = 'mad_method_call_logs' AND table_schema = DATABASE()";
		String next_call_log_id=getDBSingleVal(conn, sql);
		
		
		
		if (execution_type.equals("ASYNCH")) {
			
			sql="insert into mad_method_call_logs " +	
					" (" +
						" id, " + 
						" request_flow_logs_id, "+
						" token, " +
						" attempt_no, "+
						" request_id, " +
						" flow_state_action_id, " +
						" method_id, " +
						" action_method_id, " +
						" parameters, " + 
						" status, " +
						" entdate " +
						") "+
					" VALUES "+
					" (" +
						"?,"+ // id,   
						"?,"+ // request_flow_logs_id,
						"?,"+ // token, 
						"'0', "+ // attempt_no, 
						"?,"+ // request_id, 
						"?,"+ // flow_state_action_id, 
						"?,"+ // method_id, 
						"?,"+ // action_metod_id, 
						"?,"+ // parameters, 
						"'NEW',"+ // status, 
						"now()"+  // entdate 
					")";
			
			String token=""+System.currentTimeMillis()+generateToken();
			
			bindlist.clear();
			bindlist.add(new String[]{"INTEGER",next_call_log_id});
			bindlist.add(new String[]{"INTEGER",request_flow_logs_id});
			bindlist.add(new String[]{"STRING",token});
			bindlist.add(new String[]{"INTEGER",request_id});
			bindlist.add(new String[]{"INTEGER",flow_state_action_id});
			bindlist.add(new String[]{"INTEGER",method_id});
			bindlist.add(new String[]{"INTEGER",flow_action_method_id});
			bindlist.add(new String[]{"STRING",parameters});
			
			execDBConf(conn, sql, bindlist);
			
			continue;
		}
			
		

		
		
		System.out.println("Executing method ["+method_name+"]...");
					
		long start_ts=System.currentTimeMillis();
		
		executeMadMethod(
				conn, 
				session, 
				method_id,
				flow_action_method_id,
				request_id,
				parameters,
				executable,
				result,
				logs
			);
		
		long duration=System.currentTimeMillis()-start_ts;
		
		System.out.println("Done. Executing method ["+method_name+"]...");
		System.out.println("Returns : "+result.toString());
		System.out.println("Logs     : "+logs.toString());
		
		
		sql="insert into mad_method_call_logs " +	
				" (" +
					"id, " +  
					" request_flow_logs_id, " +
					" token, " +
					" request_id, " +
					" flow_state_action_id, " +
					" method_id, " +
					" action_method_id, " +
					" status, " +
					" last_execution_date, " +
					" attempt_no, " +
					" executable, " +
					" parameters, " +
					" duration, " +
					" execution_result, " +
					" execution_log, " +
					" entdate " +
					") "+
				" VALUES "+
				" (" +
					"?,"+ // id,   
					"?,"+ // request_flow_logs_id,
					"?,"+ // token, 
					"?,"+ // request_id, 
					"?,"+ // flow_state_action_id, 
					"?,"+ // method_id, 
					"?,"+ // action_metod_id, 
					"'FINISHED',"+ // status, 
					"now(),"+ // last_execution_date, 
					"1,"+ // attempt_no, 
					"?,"+ // executable, 
					"?,"+ // parameters, 
					"?,"+ // duration, 
					"?,"+ // executable_result, 
					"?,"+ // executable_log, 
					"now()"+  // entdate 
				")";
		
		
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",next_call_log_id});
		bindlist.add(new String[]{"INTEGER",request_flow_logs_id});
		bindlist.add(new String[]{"STRING","N/A"});
		bindlist.add(new String[]{"INTEGER",request_id});
		bindlist.add(new String[]{"INTEGER",flow_state_action_id});
		bindlist.add(new String[]{"INTEGER",method_id});
		bindlist.add(new String[]{"INTEGER",flow_action_method_id});
		bindlist.add(new String[]{"STRING",executable.toString()});
		bindlist.add(new String[]{"STRING",parameters});
		bindlist.add(new String[]{"INTEGER",""+duration});
		bindlist.add(new String[]{"STRING",result.toString()});
		bindlist.add(new String[]{"STRING",logs.toString()});
		
		execDBConf(conn, sql, bindlist);

		//write result and log here
		//set status to finished
		
		if (!result.toString().equals("true") && on_fail.equals("STOP")) 
			return false;
		
		
	}
	
	
	return true;
}


//******************************************************************
String executeMadMethod(
		Connection conn, 
		HttpSession session, 
		String method_id, 
		String action_method_id, 
		String test_request_id,
		String parameters
		) {
	
	return executeMadMethod(
				conn, 
				session, 
				method_id,
				action_method_id,
				test_request_id,
				parameters,
				new StringBuilder(),
				new StringBuilder(),
				new StringBuilder()
			);
}


//******************************************************************************
ArrayList<String[]> getRequestParameters(Connection conn, HttpSession session, String request_id) {
		
	ArrayList<String[]> paramArr=new ArrayList<String[]>();
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	String sql="select request_group, "+
		" date_format(r.entdate, ? ) ent_date, " + 
		" r.description,  "+
		" u.username " + 
		" from "+
		" mad_request r, mad_request_type rt, tdm_user u "+
		" where "+
		" request_type_id=rt.id "+
		" and r.entuser=u.id "+
		" and r.id=?";
		
	bindlist.clear();
	bindlist.add(new String[]{"STRING", mysql_format});
	bindlist.add(new String[]{"INTEGER", request_id});
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
		
	String request_group=arr.get(0)[0];
	String request_date=arr.get(0)[1];
	String request_description=arr.get(0)[2];
	String request_username=arr.get(0)[3];
		
		
	String request_action_username="";

	ArrayList<String[]> standartParamsArr=new ArrayList<String[]>();
	standartParamsArr.add(new String[]{"TEXT","REQUEST_ID",request_id,"",""});
	standartParamsArr.add(new String[]{"TEXT","REQUEST_NO",request_id,"",""});
	standartParamsArr.add(new String[]{"TEXT","REQUEST_NUMBER",request_id,"",""});
	standartParamsArr.add(new String[]{"TEXT","REQUEST_GROUP",request_group,"",""});
	standartParamsArr.add(new String[]{"TEXT","REQUEST_DATE",request_date,"",""});
	standartParamsArr.add(new String[]{"TEXT","REQUEST_DESCRIPTION",request_description,"",""});
	standartParamsArr.add(new String[]{"TEXT","REQUEST_USERNAME",request_username,"",""});
	standartParamsArr.add(new String[]{"TEXT","REQUEST_ACTION_USERNAME",request_action_username,"",""});

	sql="select \n"+
		"	entry_type, \n"+
		"	rtf.field_parameter_name,  \n"+
		"	field_value, \n"+
		"	date_format(field_value_ts,?) field_value_ts, \n"+
		"	field_value_num \n"+
		"	from  \n"+
		"	mad_request_fields rf, mad_request r, mad_flex_field ff, mad_request_type_field rtf \n"+
		"	where rf.flex_field_id=ff.id and ff.entry_type not in ('ATTACHMENT','TABLE') \n"+
		"	and rf.request_id=r.id \n"+
		"	and r.request_type_id=rtf.request_type_id \n"+
		" 	and rf.flex_field_id=rtf.flex_field_id \n"+
		"	and field_parameter_name is not null \n"+
		"	and request_id=? \n"+
		
		"	UNION ALL  \n"+
		
		"	select  \n"+
		"	distinct \n"+
		"	'TEXT' entry_type, \n"+
		"	aff.field_parameter_name,  \n"+
		"	field_value, \n"+
		"	null field_value_ts, \n"+
		"	null field_value_num \n"+
		"	from  \n"+
		"	mad_request_env_fields ref, mad_flex_field ff, mad_application_flex_fields aff \n"+
		"	where ref.flex_field_id=ff.id and ff.entry_type not in ('ATTACHMENT','TABLE') \n"+
		"	and field_parameter_name is not null \n"+
		"	and ref.request_id=? and ref.application_id>0 \n"+
		"	and ref.application_id=aff.application_id and ref.flex_field_id=aff.flex_field_id \n"+
		
		"	UNION ALL \n"+
		
		"	select \n"+
		"	distinct \n"+
		"	'TEXT' entry_type, \n"+
		"	ptff.field_parameter_name,  \n"+
		"	ref.field_value, \n"+
		"	null field_value_ts, \n"+
		"	null field_value_num \n"+
		"	from  \n"+
		"	mad_request_env_fields  ref, mad_platform p, mad_platform_type_flex_fields ptff \n"+
		"	where request_id=? and application_id=0 \n"+
		"	and platform_id=p.id \n"+
		"	and ref.flex_field_id=ptff.flex_field_id  \n"+
		"	and p.platform_type_id=ptff.platform_type_id";
		
		bindlist.clear();
		bindlist.add(new String[]{"STRING", mysql_format});
		bindlist.add(new String[]{"INTEGER", request_id});
		bindlist.add(new String[]{"INTEGER", request_id});
		bindlist.add(new String[]{"INTEGER", request_id});
		
		arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		arr.addAll(standartParamsArr);
		
	
		
		for (int p=0;p<arr.size();p++) {
			String entry_type=arr.get(p)[0];
			String field_parameter_name=arr.get(p)[1];
			String field_value=arr.get(p)[2];
			String field_value_ts=arr.get(p)[3];
			String field_value_num=arr.get(p)[4];
			
			if (entry_type.equals("DATE") || entry_type.equals("DATETIME"))
				paramArr.add(new String[]{field_parameter_name, field_value_ts});
			else if (entry_type.equals("NUMBER"))
				paramArr.add(new String[]{field_parameter_name, field_value_num});
			else 
				paramArr.add(new String[]{field_parameter_name, field_value});
		}
		
		
		return paramArr;
}

//******************************************************************
String executeMadMethod(
		Connection conn, 
		HttpSession session, 
		String method_id, 
		String action_method_id, 
		String test_request_id,
		String parameters,
		StringBuilder executable,
		StringBuilder result, 
		StringBuilder logs) {
	
	String sql="";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	StringBuilder sb=new StringBuilder();
	
	ArrayList<String[]> arr=new ArrayList<String[]>();
	
	ArrayList<String[]> paramArr=new ArrayList<String[]>();
	if (!test_request_id.equals("0")) 
		paramArr=getRequestParameters(conn, session, test_request_id);
		
	sql="select " +
			" 	parameter_count, method_name, method_type, "+
			"	source_code, reflection_classname, reflection_methodname, database_id, start_directory, success_keyword " +
			"	from  " +
			"	mad_method m " +
			"	where m.id=? ";
		
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",method_id});
	
	arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	
	int parameter_count=Integer.parseInt(arr.get(0)[0]);
	String method_name=arr.get(0)[1];
	String method_type=arr.get(0)[2];
	String source_code=arr.get(0)[3];
	String reflection_classname=arr.get(0)[4];
	String reflection_methodname=arr.get(0)[5];
	String database_id=arr.get(0)[6];
	String start_directory=arr.get(0)[7];
	String success_keyword=arr.get(0)[8];
	
	source_code=replaceAllParams(source_code,paramArr);
	
	reflection_classname=replaceAllParams(reflection_classname,paramArr);
	reflection_methodname=replaceAllParams(reflection_methodname,paramArr);
	
	start_directory=replaceAllParams(start_directory,paramArr);
	success_keyword=replaceAllParams(success_keyword,paramArr);
	
	String[] param_names=new String[10];
	String[] values=new String[10];
	String[] types=new String[10];
	
	
	
	
	String[] splitArr=parameters.split("\n|\r");
	int param_count=0;
	
	
	
	sql="";
	
	for (int i=0;i<splitArr.length;i++) {
		String line=splitArr[i];
		int ind=line.indexOf("=");
		if (ind==-1) continue;
		String param_name=line.substring(0,ind);
		String param_val="";
		try {param_val=line.substring(ind+1);} catch(Exception e) {}
		param_count++;
		param_names[param_count-1]=param_name;
		values[param_count-1]=replaceAllParams(param_val,paramArr);
		
		sql="select param_type_"+param_count +" from mad_method where id=?";
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER", method_id});
		
		arr=getDbArrayConf(conn, sql, 1, bindlist);
		
		String type="";
		
		if (arr!=null && arr.size()==1) type=arr.get(0)[0];
		
		types[param_count-1]=type;
		
	}
	
	
	
	
	
	for (int p=0;p<param_count;p++) 
		paramArr.add(new String[]{param_names[p], replaceAllParams(values[p],paramArr)});
	
	
	
	executable.setLength(0);
	
	logs.append("Executable Source  : \n");
	
	logs.append("------------------------------------------------------------\n");
	if (method_type.equals("JAVA")) {
		logs.append("Java Class :  ={"+reflection_classname+"}\n");
		logs.append("Java Method :  ={"+reflection_methodname+"}\n");
		
		executable.append(reflection_classname+"."+reflection_methodname);
	}
	else {
		logs.append(source_code+"\n");
		executable.append(source_code);
	}
		
	logs.append("------------------------------------------------------------\n");
	
	session.setAttribute("last_method_execution_logs", logs);
	
	
	
	executeMethodNow(conn, session, 
			method_id,
			method_name, 
			method_type, 
			source_code, 
			reflection_classname, 
			reflection_methodname, 
			database_id, 
			start_directory,
			success_keyword,
			param_count,
			types,
			values,
			result, 
			logs
			);
	
	
	
	sb.append("<textarea readonly rows=2 style=\"width:100%; background-color:yellow; color:black; font-family: monospace;\">"+result.toString()+"</textarea>");

	return sb.toString();
}

//******************************************************************
public String replaceAllParams(String str, ArrayList<String[]> params) {
	StringBuilder ret1=new StringBuilder(str);

	if (params==null) return str;
	
	for (int i=0;i<params.size();i++) {
		String param_name="${"+params.get(i)[0]+"}";
		String param_val=params.get(i)[1];
		
		while (true) {
			int loc=ret1.toString().toUpperCase().indexOf(param_name.toUpperCase());
			if (loc==-1) break;
			
			int len=param_name.length();
			
			ret1.delete(loc, loc+len);
			ret1.insert(loc, param_val);
		}
	}
	
	
	return ret1.toString();
}

//******************************************************************
void 	executeMethodNow(Connection conn, HttpSession session, 
		String method_id, 
		String method_name, 
		String method_type,
		String source_code, 
		String reflection_classname, 
		String reflection_methodname, 
		String database_id,
		String start_directory,
		String success_keyword,
		int parameter_count,
		String[] typeArr,
		String[] valueArr,
		StringBuilder result, 
		StringBuilder logs) {
	
	
	long start_ts=System.currentTimeMillis();
	
	
	
	
	logs.append("Executing... : "+method_name+"\n");
	
	result.setLength(0);
	boolean is_success=true;

	
	if (method_type.equals("DATABASE")) {
		
		logs.append("Connecting to database... \n");
		Connection app=getconn(conn, database_id);
		if (app!=null) logs.append("Connected. \n");
		else {
			logs.append("DB connection is not successfull : "+last_connection_error+". \n");
			return;
		}
		
		
		PreparedStatement stmt=null;
		try {
			
			stmt=app.prepareStatement(source_code);
			for (int p=0;p<parameter_count;p++) {
				String type=typeArr[p];
				String val=valueArr[p];
				logs.append("Binding ["+(p+1)+"] ("+type+") : {"+val+"}\n");
				
				if (type.equals("Integer")) 
					stmt.setInt(p+1, Integer.parseInt(val));
				else 
					stmt.setString(p+1, val);
			}
			
			int x=stmt.executeUpdate();
			logs.append("Executed successfully. "+x+ " records affected.");
		} catch(Exception e) {
			is_success=false;
			logs.append("Exception@Execution db command : " +e.getMessage()+"\n");
		} finally {
			try {stmt.close();} catch(Exception e) {}
			try {app.close();} catch(Exception e) {}
		}
		
		
	} else if (method_type.equals("JAVASCRIPT")) {
		ScriptEngineManager factory=null;
		ScriptEngine engine=null;
		try {
			factory = new ScriptEngineManager();
			
			
			engine = factory.getEngineByName("JavaScript");
			//engine = factory.getEngineByName("nashorn");
			String ret1=""+ engine.eval(source_code);
			logs.append("Javascript Eval Returns : " + ret1+"\n");
			if (ret1.length()>0 && !ret1.equals("null"))
				result.append(ret1);
			
			if (result.indexOf("false")==0) {
				is_success=false;
				result.setLength(0);
				result.append("false");

			}
			
		} catch(Exception e) {
			is_success=false;
			logs.append("Exception@Execution javascript : " +e.getMessage()+"\n");
		}
		
	} 
	else if (method_type.equals("SHELL")) {
		
		String start_cmd="cmd";
		String start_path="";
		
		
		
		try {start_cmd=valueArr[0];}  catch(Exception e) {start_cmd="cmd";}
		
		StringBuilder shellLogs=new StringBuilder();
		
		is_success=runShellScript(source_code, start_directory, shellLogs);
		
		if (is_success && success_keyword.trim().length()>0) {
			is_success=checkStrings(shellLogs.toString(), success_keyword);
		}
		
		logs.append(shellLogs.toString());
		
		if (is_success)
			result.append("true");
		else 
			result.append("false");
		
		System.out.println("shell logs  : "+shellLogs.toString());

	}
	else {
		result.append("true");
	}
	
	if (result.length()==0)
		if (is_success) 
			result.append("true");
		else 
			result.append("false");
	
	
	
	String duration=""+(System.currentTimeMillis()-start_ts);

	logs.append("Executed... : "+method_name+", Duration  : ("+formatnum(""+duration)+") msecs\n");

}



//******************************************************************
String getLastExecuteMethodLogs(Connection conn, HttpSession session) {

	StringBuilder sb=new StringBuilder();
	StringBuilder logs=(StringBuilder) session.getAttribute("last_method_execution_logs");
	
	if (logs==null)
		sb.append("No log found.");
	else 
		sb.append("<textarea readonly rows=12 style=\"width:100%; background-color:black; color:lightgreen; font-family: monospace;\" >"+logs.toString()+"</textarea>");
	

	return sb.toString();
}

//******************************************************************
boolean runShellScript(String source_code, String start_directory, StringBuilder shellLogs) {
	
	String command_to_run="";
	Runtime r=null;
	ProcessBuilder pb=null;
	Process p=null;
	
	BufferedReader output = null;
	OutputStream sendkeys =null;
	
	String[] cmds=source_code.split("\n|\r");
	ArrayList<String> cmdArr=new ArrayList<String>();
	
	for (int i=0;i<cmds.length;i++) {
		command_to_run=cmds[i];
		if (command_to_run.trim().length()==0) continue;
		cmdArr.add(command_to_run);
	}
	
	
	if (cmdArr.size()==0) {
		shellLogs.append("No command to execute...\n");
		return false;
	}
	
	try {
		
		String start_command=cmdArr.get(0);
		
		
		
		pb=new ProcessBuilder(start_command.split(" "));
		
		if (start_directory.trim().length()>0) {
			File start_dirF=new File(start_directory);
			try {
				pb.directory(start_dirF);
			} catch(Exception e) {
				e.printStackTrace();
				
			}
			
		}
		
		
		
		
		pb.redirectErrorStream(true);
		shellLogs.append("Running start command : " + start_command);
		p=pb.start();
		
		output = new BufferedReader(new  InputStreamReader(p.getInputStream()));
		sendkeys=p.getOutputStream();

		waitCommandOutput(p, output, 1000, "", shellLogs);
		long timeout=30*60*1000;
		String waitstr="";
		
		for (int i=1;i<cmdArr.size();i++) {
			String a_cmd_line=cmdArr.get(i);
			
			System.out.println("running ["+i+"]: " + a_cmd_line);
			
			if (a_cmd_line.toLowerCase().indexOf("@waittime")==0) {
				int first_id=a_cmd_line.indexOf("(");
				int last_id=a_cmd_line.lastIndexOf(")");

				if (first_id>-1 && last_id>-1 && last_id>first_id+1) {
					String wait_timeout=a_cmd_line.substring(first_id+1, last_id);
					try {timeout=Long.parseLong(wait_timeout);} catch(Exception e) {timeout=1000; e.printStackTrace(); }
				}
				
				shellLogs.append("set wait time ["+timeout+"]");
				continue;
			} 
			
			if (a_cmd_line.toLowerCase().indexOf("@waitstr")==0) {
				int first_id=a_cmd_line.indexOf("(");
				int last_id=a_cmd_line.lastIndexOf(")");

				if (first_id>-1 && last_id>-1 && last_id>first_id+1) {
					waitstr=a_cmd_line.substring(first_id+1, last_id);
				}
				shellLogs.append("set wait string ["+waitstr+"]");
				continue;
			} 
			
			sendkeys.write(a_cmd_line.getBytes());
			sendkeys.write(System.lineSeparator().getBytes());
			
			try {sendkeys.flush(); } catch(Exception e) {}
			
			boolean cmd_success=waitCommandOutput(p, output, timeout, waitstr, shellLogs);
			
			if (!cmd_success) return false;
			
		}
		
			
	}  catch(Exception e) {
		shellLogs.append("Exception@runShellScript :  "+e.getMessage()+"\n");
		return false;
	} finally {
		try  {output.close(); } catch(Exception e) {}
		try  {sendkeys.close(); } catch(Exception e) {}
		try {p.destroy(); }  catch(Exception e) {}
		
	}
	
	
	return true;
}
//******************************************************************
boolean waitCommandOutput(Process p,  BufferedReader output, long timeout, String waitstr, StringBuilder shellLogs) {
	
	StringBuilder sb=new StringBuilder();
	try { 

		int value = -1;
		long last_read_ts=System.currentTimeMillis();
		while(true) {
			if (output.ready())   {
				last_read_ts=System.currentTimeMillis();
				
				value=output.read();
				System.out.print((char) value);
				
            	if (value==-1) continue;
                
            	sb.append((char) value);
			} else {
				Thread.sleep(100);
			}
			
			if (System.currentTimeMillis()>last_read_ts+timeout) {
				
				if (waitstr.trim().length()>0 &&  checkStrings(sb.toString(), waitstr.trim())==false) {
					shellLogs.append(sb.toString());
					return false;
				}
				shellLogs.append(sb.toString());
				break;
			}
			
			if (waitstr.trim().length()>0 &&  checkStrings(sb.toString(), waitstr.trim())) {
				shellLogs.append(sb.toString());
				return true;
			}
			
		} //while
	
		return true;
		
	} catch(Exception e) {
		sb.append("Exception@waitCommandOutput :  "+e.getMessage()+"\n");
		shellLogs.append(sb.toString());
		return false;
	} 
	
}
//******************************************************************
String setMadFlowStateActionMethodParameters(Connection conn, HttpSession session, String action_method_id) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	StringBuilder sb=new StringBuilder();
	
	
	sql="select " +
		" 	parameter_count, method_name, method_id, "+
		"	param_name_1, param_name_2, param_name_3, param_name_4, param_name_5,  " +
		"	param_name_6, param_name_7, param_name_8, param_name_9, param_name_10, " +
		"	value_1, value_2, value_3, value_4, value_5,  " +
		"	value_6, value_7, value_8, value_9, value_10 " +
		"	from  " +
		"	mad_flow_state_action_methods am , mad_method m " +
		"	where am.id=? " +
		"	and am.method_id=m.id";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",action_method_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	int parameter_count=Integer.parseInt(arr.get(0)[0]);
	String method_name=arr.get(0)[1];
	String method_id=arr.get(0)[2];
	
	String[] param_names=new String[10];
	String[] values=new String[10];
	
	for (int i=0;i<10;i++) {
		param_names[i]=arr.get(0)[3+i];
		values[i]=arr.get(0)[3+10+i];
	}
	
	
	sb.append("<input type=hidden id=editing_method_id value="+method_id+">");
	sb.append("<input type=hidden id=editing_action_method_id value="+action_method_id+">");
	
	if (parameter_count==0) {
		sb.append("No parameters to edit.");
		return sb.toString();
	}
	
	
	
	
	sb.append("<h4><span class=\"label label-warning\">Parameters of  method [<b>"+method_name+"</b>]</span></h4>");
	
	sb.append("<table class=\"table table-condensed table-bordered table-striped\">");
	
	for (int i=0;i<parameter_count;i++) {
		String parameter_name=nvl(param_names[i].trim(),"Parameter "+(i+1));
		
		sb.append("<tr>");
		sb.append("<td align=right nowrap><b>"+parameter_name+" </b></td>");
		sb.append("<td>");
		sb.append(makeText("value_"+(i+1), clearHtml(values[i]), " onchange=\"saveMadFlowStateActionMethodField(this,'"+action_method_id+"'); \" ", 0));
		sb.append("</td>");
		sb.append("</tr>");		
	}
	sb.append("</table>");
	
	return sb.toString();
	
}

//**************************************************************
String getRequestGroup(Connection conn,HttpSession session,String request_id) {
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String sql="select request_group from mad_request r, mad_request_type rt where request_type_id=rt.id and r.id=?";
	bindlist.add(new String[]{"INTEGER",request_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	if (arr==null || arr.size()==0) return "UNKNOWN_REQUEST_TYPE";
	
	return arr.get(0)[0];
	
}





//**************************************************************
void makeAjaxCallLog(Connection conn,HttpSession session, HttpServletRequest request, 
		String action, String div,
		String par1,String par2,String par3,String par4,String par5,String msg,
		long duration) {
	 
	ArrayList<String> actionArrToSkip=new ArrayList<String>();
	actionArrToSkip.add("get_MAD_Warnings");
	actionArrToSkip.add("send_lock_requests");
	actionArrToSkip.add("set_request_footer");
	
	if (actionArrToSkip.indexOf(action)>-1) return;
	
	
	 String username=nvl((String) session.getAttribute("username"),"unknown");
	 String remote_host=request.getRemoteHost();
	 String remote_user=request.getRemoteUser();
	 
	 
	 /*
	 System.out.println("username : " + username);
	 System.out.println("remote_host : " + username);
	 System.out.println("remote_user : " + remote_user);
	 System.out.println("action : " + action);
	 System.out.println("div : " + div);
	 System.out.println("par1 : " + par1);
	 System.out.println("par2 : " + par2);
	 System.out.println("par3 : " + par3);
	 System.out.println("par4 : " + par4);
	 System.out.println("par5 : " + par5);
	 System.out.println("msg : " + msg);
	 System.out.println("duration : " + duration);
	 System.out.println("---------------------------");
	 */
	 
	 //*******
	 //action daha onceden olusturulmadiysa action def tablosuna koy raporlama amacli
	 //partitionlu olsun tablo otomatik partition olabiliyorsa
	 //ya da tabloyu biz olusturalim
	 
	 String sql="insert into mad_ajax_action_log (username, username, remote_user ,action, div_id, par1, par2, par3, par4, par5, msg, duration, call_time) "+
	 		" values "+
	 		" (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, now())";
	 
	 

}


//**************************************************************
void createHistory(Connection conn, HttpSession session, String action,  String table_name,String id) {
	
		
	
	
	ArrayList<String> histFieldsArr=new ArrayList<String>();
	String key_field_name="id";
	String history_table_name="mad_generic_history";
	
	if (table_name.equals("mad_request")) {
		
		 key_field_name="request_id";
		 history_table_name="mad_request_history";
		 
		histFieldsArr.add("description");
		histFieldsArr.add("status");
		histFieldsArr.add("deployment_slot_id");
		histFieldsArr.add("deployment_slot_detail_id");
		histFieldsArr.add("deployment_date");
		
	} else if (table_name.equals("mad_request_app_env")) {
		
		 key_field_name="request_app_env_id";
		 history_table_name="mad_request_app_env_history";
		 
		histFieldsArr.add("request_id");
		histFieldsArr.add("application_id");
		histFieldsArr.add("environment_id");	
	} else if (table_name.equals("mad_request_application_member")) {
		
		 key_field_name="request_application_member_id";
		 history_table_name="mad_request_application_member_history";
		 
		histFieldsArr.add("request_id");
		histFieldsArr.add("application_id");
		histFieldsArr.add("member_name");	
		histFieldsArr.add("member_path");	
		histFieldsArr.add("member_version");	
		histFieldsArr.add("member_order");	
		histFieldsArr.add("to_skip");	
		histFieldsArr.add("skip_reason");	
		histFieldsArr.add("member_tag_info");	
		
		
	}
	else if (table_name.equals("mad_request_env_fields")) {
		
		 key_field_name="request_env_fields_id";
		 history_table_name="mad_request_env_fields_history";
		 
		histFieldsArr.add("request_id");
		histFieldsArr.add("environment_id");
		histFieldsArr.add("platform_id");	
		histFieldsArr.add("application_id");	
		histFieldsArr.add("flex_field_id");	
		histFieldsArr.add("field_value");	
		
	}
	else if (table_name.equals("mad_request_fields")) {
		
		 key_field_name="request_fields_id";
		 history_table_name="mad_request_fields_history";
		 
		histFieldsArr.add("request_id");
		histFieldsArr.add("flex_field_id");
		histFieldsArr.add("field_value");	
		histFieldsArr.add("field_value_ts");	
		histFieldsArr.add("field_value_num");	
		
	}
	else if (table_name.equals("mad_request_link")) {
		
		 key_field_name="request_link_id";
		 history_table_name="mad_request_link_history";
		 
		histFieldsArr.add("request_id");
		histFieldsArr.add("linked_request_id");	
		
	}
	else if (table_name.equals("mad_request_platform_skip")) {
		
		 key_field_name="request_platform_skip_id";
		 history_table_name="mad_request_platform_skip_history";
		 
		histFieldsArr.add("request_id");
		histFieldsArr.add("platform_id");	
		
	}
	else if (history_table_name.equals("mad_generic_history")) {
		createGenericHistory(conn, session, action,  table_name, id, histFieldsArr);
		return;
	} else {
		return;
	}
		
	
	if (histFieldsArr.size()>0) {
		ArrayList<String[]> bindlist=new ArrayList<String[]>();
		String hist_sql="select ";
		String curr_sql="select ";
		
		ArrayList<String> histValuesArr=new ArrayList<String>();
		ArrayList<String> currValuesArr=new ArrayList<String>();
		
		for (int i=0;i<histFieldsArr.size();i++) {
			if (i>0) hist_sql=hist_sql+", ";
			if (i>0) curr_sql=curr_sql+", ";
			hist_sql=hist_sql+histFieldsArr.get(i);
			curr_sql=curr_sql+histFieldsArr.get(i);
			
			histValuesArr.add("");
			currValuesArr.add("");
		}
		
		hist_sql=hist_sql+" from "+ history_table_name + " where "+key_field_name+"=? order by id desc limit 0,1";
		curr_sql=curr_sql+" from "+ table_name + " where id=?";
		
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",id});
		
		ArrayList<String[]> arrHist=getDbArrayConf(conn, hist_sql, 1, bindlist);
		ArrayList<String[]> arrCurr=getDbArrayConf(conn, curr_sql, 1, bindlist);
		
		if (arrHist==null) return;
		if (arrCurr==null) return;
		
		String[] valsHist=new String[histValuesArr.size()];
		String[] valsCurr=new String[currValuesArr.size()];
		
		if (arrCurr.size()==1) valsCurr=arrCurr.get(0);
		
		boolean history_needed=false;
		
		
		if (arrHist.size()==1) {
			valsHist=arrHist.get(0);
			history_needed=true;
		}
		
		if (action.equals("DELETE")) history_needed=true;
		if (action.equals("INSERT")) history_needed=true;
		
		if (!history_needed) {
			for (int i=0;i<valsHist.length;i++)
				if (valsHist[i]!=valsCurr[i]) {
					history_needed=true;
					break;
				}
		}
		
		if (history_needed) {
			
			
			int user_id=(Integer) session.getAttribute("userid");	
			String hostname=nvl((String) session.getAttribute("hostname"),"UNKNOWN");
			
			histFieldsArr.add(key_field_name);
			histFieldsArr.add("history_action");
			histFieldsArr.add("history_user");
			histFieldsArr.add("history_host");
			histFieldsArr.add("history_date");

			
			String history_sql="insert into "+history_table_name+" (";
			
			for (int i=0;i<histFieldsArr.size();i++) {
				if (i>0) history_sql=history_sql+", ";
				history_sql=history_sql+histFieldsArr.get(i);
			}
		
			history_sql=history_sql+") \n select ";
		
			bindlist.clear();
			
			for (int i=0;i<histFieldsArr.size();i++) {
				if (i>0) history_sql=history_sql+", ";
				if (histFieldsArr.get(i).equals(key_field_name)) {
					history_sql=history_sql+"?";
					bindlist.add(new String[]{"INTEGER",id});
				}
				else if (histFieldsArr.get(i).equals("history_action")) {
					history_sql=history_sql+"?";
					bindlist.add(new String[]{"STRING",action});
				}
				else if (histFieldsArr.get(i).equals("history_user")) {
					history_sql=history_sql+"?";
					bindlist.add(new String[]{"INTEGER",""+user_id});
				}
				else if (histFieldsArr.get(i).equals("history_host")) {
					history_sql=history_sql+"?";
					bindlist.add(new String[]{"STRING",""+hostname});
				}
				else if (histFieldsArr.get(i).equals("history_date"))
					history_sql=history_sql+"now()";
				else
					history_sql=history_sql+histFieldsArr.get(i);
			}
		
			history_sql=history_sql+" from  " + table_name + " where id=?";
			bindlist.add(new String[]{"INTEGER",id});
			
			
			execDBConf(conn, history_sql, bindlist);
		}
		
	} //if (histFieldsArr.size()>0)
	
	
}


//**********************************************************************************
void createGenericHistory(
		Connection conn, 
		HttpSession session, 
		String action, 
		String table_name, 
		String id, 
		String Historyfields) {
	
	ArrayList<String> histFieldsArr=new ArrayList<String>();
	
	if (Historyfields.equals("ALL")) {
		
		ArrayList<String> noLogFields=new ArrayList<String>();
		noLogFields.add("id");
		noLogFields.add("entusr");
		noLogFields.add("entdate");
		
		String schema_name="";
		ArrayList<String[]> fields=getFieldListFromApp(conn, "", schema_name , table_name,"MYSQL");
		for (int i=0;i<fields.size();i++) {
			String field_name=fields.get(i)[0];
			if (noLogFields.indexOf(field_name)>-1) continue;
			histFieldsArr.add(field_name);
		}
	}
	else {
		String[] arr=Historyfields.split(",");
		for (int i=0;i<arr.length;i++) {
			if (arr[i].trim().length()==0) continue;
			histFieldsArr.add(arr[i].trim());
		}
	}
	
	
	if (histFieldsArr.size()==0) return;
	
	createGenericHistory(
			 conn, 
			 session, 
			 action, 
			 table_name, 
			 id, 
			 histFieldsArr);
}

//**********************************************************************************
void createGenericHistory(
		Connection conn, 
		HttpSession session, 
		String action, 
		String table_name, 
		String id, 
		ArrayList<String> histFieldsArr) {
	
	long change_id=System.currentTimeMillis() % 1000000000;
	
	String curr_sql="select ";

	ArrayList<String> currValuesArr=new ArrayList<String>();

	for (int i=0;i<histFieldsArr.size();i++) {
				if (i>0) curr_sql=curr_sql+", ";
				curr_sql=curr_sql+histFieldsArr.get(i);
				
				currValuesArr.add("");
			}

	curr_sql=curr_sql+" from "+ table_name + " where id=?";
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});

	ArrayList<String[]> arrCurr=getDbArrayConf(conn, curr_sql, 1, bindlist);

	if (arrCurr==null) return;


	String[] valsCurr=new String[currValuesArr.size()];

	if (arrCurr.size()==1) valsCurr=arrCurr.get(0);
	
	String check_change_sql="select field_value "+
			" from mad_generic_history "+
			" where "+
			" table_name =? "+
			" and table_id=? "+
			" and field_name=? "+
			" order by change_id desc "+
			" limit 0,1";
	
	String insert_hist_sql="insert into mad_generic_history "+
		" (table_name, table_id, field_name, field_value, change_id , "+
			" history_action, history_user, history_date, history_host ) "+
			" values "+
			" (?, ?, ?, ?, ?, "+
			" ?, ?, now(), ? )";
	
	int user_id=(Integer) session.getAttribute("userid");	
	String hostname=nvl((String) session.getAttribute("hostname"),"UNKNOWN");
	
	for (int i=0;i<valsCurr.length;i++) {
		
		
		
		bindlist.clear();
		bindlist.add(new String[]{"STRING",table_name});
		bindlist.add(new String[]{"INTEGER",id});
		bindlist.add(new String[]{"STRING",histFieldsArr.get(i)});
		
		ArrayList<String[]> arr=getDbArrayConf(conn, check_change_sql, 1, bindlist);
		
		String hist_val="";
		if (arr==null) continue;
		if (arr.size()==1) hist_val=arr.get(0)[0];
		
		if (hist_val.equals(valsCurr[i])) continue;
		
		bindlist.add(new String[]{"STRING",valsCurr[i]});
		bindlist.add(new String[]{"INTEGER",""+change_id});
		
		bindlist.add(new String[]{"STRING",action});
		bindlist.add(new String[]{"INTEGER",""+user_id});
		bindlist.add(new String[]{"STRING",hostname});
		
		execDBConf(conn, insert_hist_sql, bindlist);

	} //for (int i=0;i<valsCurr.length;i++)

}

//******************************************************************
String getRepositoryIdByApplicationId(Connection conn, HttpSession session, String application_id) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	
	sql="select r.id from mad_repository r, mad_application a where repository_id=r.id and a.id=? ";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",application_id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String repository_id="0";
	
	if (arr!=null || arr.size()==1) repository_id=arr.get(0)[0];
	
	return repository_id;
}
//******************************************************************
String showCheckOutHistory(Connection conn, HttpSession session, String application_id, String member_path) {
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	StringBuilder sb=new StringBuilder();
	
	String repository_id=getRepositoryIdByApplicationId(conn,session, application_id);
	
	sql="select \n"+
		"	member_version, cl.status, \n"+
		"	check_out_user_info, check_out_machine_info, date_format(check_out_date, ?) check_out_date, \n"+
		"	check_in_user_info, check_in_machine_info, date_format(check_in_date, ?) check_in_date, \n"+
		"	r.id request_id, r.description request_description, \n"+
		"	check_in_note, cl.id  checkout_id, cl.member_id " + 
		"	from mad_checkout_log cl, mad_request r \n"+
		"	where repository_id=? \n"+
		"	and member_path=? \n"+
		"	and request_id=r.id \n"+
		"	order by cl.id desc";
	
	bindlist.clear();
	bindlist.add(new String[]{"STRING",mysql_format});
	bindlist.add(new String[]{"STRING",mysql_format});
	bindlist.add(new String[]{"INTEGER",repository_id});
	bindlist.add(new String[]{"STRING",member_path});
	
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	
	sb.append("<h4>Checkout History for :<b>"+member_path+"</b></h4>");
	
	if (arr==null || arr.size()==0) {
		sb.append("<b><font color=red>No checkout record found.</font></b>");
		return sb.toString();
	}

	
	sb.append("<table class=\"table table-condensed table-striped table-bordered\">");
	
	sb.append("<tr class=info>");
	sb.append("<td><b>Version</b></td>");
	sb.append("<td><b>Status</b></td>");
	sb.append("<td><b>Check-out Info</b></td>");
	sb.append("<td><b>Check-in Info</b></td>");
	sb.append("<td><b>Check-in Note</b></td>");
	sb.append("<td><b>Related Package</b></td>");
	sb.append("<td><b>Get Code</b></td>");
	sb.append("</tr>");
	
	for (int i=0;i<arr.size();i++) {
		String member_version=arr.get(i)[0];
		String status=arr.get(i)[1];
		String check_out_user_info=arr.get(i)[2];
		String check_out_machine_info=arr.get(i)[3];
		String check_out_date=arr.get(i)[4];
		String check_in_user_info=arr.get(i)[5];
		String check_in_machine_info=arr.get(i)[6];
		String check_in_date=arr.get(i)[7];
		String request_id=arr.get(i)[8];
		String request_description=arr.get(i)[9];
		String check_in_note=arr.get(i)[10];
		String checkout_id= arr.get(i)[11];
		String member_id= arr.get(i)[12];
		
		if (status.equals("OPEN")) 
			sb.append("<tr class=danger>");
		else 
			sb.append("<tr>");
		
		sb.append("<td align=right>"+member_version+"</td>");
		
		if (status.equals("OPEN"))
			sb.append("<td valign=top>Checked Out</td>");
		else if (status.equals("CLOSED"))
			sb.append("<td valign=top>Checked In</td>");
		else 
			sb.append("<td valign=top>Cancelled</td>");
		
		sb.append("<td valign=top>"+check_out_user_info+"<br>"+check_out_machine_info+"<br>"+check_out_date+"</td>");
		
		if (status.equals("OPEN")) {
			sb.append("<td valign=top>-</td>");
			sb.append("<td valign=top>-</td>");
		}
		else {
			sb.append("<td valign=top>"+check_in_user_info+"<br>"+check_in_machine_info+"<br>"+check_in_date+"</td>");
			sb.append("<td valign=top>"+clearHtml(check_in_note)+"</td>");
		}
		
		sb.append("<td valign=top>"+"["+request_id+"] "+clearHtml(request_description)+"</td>");
		
		
		
		sb.append("<td align=center>");
		sb.append("<button type=button class=\"btn btn-sm btn-info\" onclick=\"javascript:showFileContent('"+request_id+"','"+member_id+"','"+member_version+"','-1')\">");
		sb.append("...");
		sb.append("</botton>");
		sb.append("</td>");
	
		
		sb.append("</tr>");

	}
	
	sb.append("</table>");
	
	return sb.toString();
	
}

//------------------------------------------------------------------------------------

String getCopyName(Connection conn, HttpSession session, String table_name, String naming_field, String id ) {
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	String sql="select "+naming_field+" from "+table_name + " where id=?";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",id});
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String base_name=arr.get(0)[0];
	String copy_name="";
	
	sql="select 1 from "+table_name + " where "+naming_field+"=?";
	
	int counter=2;
	
	while(true) {
		
		copy_name=base_name+" " + counter;
		
		bindlist.clear();
		bindlist.add(new String[]{"STRING",copy_name});
		
		arr=getDbArrayConf(conn, sql, 1, bindlist);
		
		if (arr!=null & arr.size()==0) return copy_name;
		
		counter++;
		
		
	}
}

//------------------------------------------------------------------------------------
String getOtherColumnNames(Connection conn, HttpSession session, 
		String table_name, String naming_column_name, String link_column_name ) {
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	String sql="select column_name from information_schema.columns \n"+
				"	where table_name='"+table_name+"' and table_schema = DATABASE() \n"+
				"	and column_name not in ('id','"+naming_column_name+"','"+link_column_name+"')  \n"+
				"	order by ordinal_position";
	
	bindlist.clear();
	
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	String ret1="";
	for (int i=0;i<arr.size();i++) {
		String col_name=arr.get(i)[0];
		ret1=ret1+", "+col_name;
	} 
	
	return ret1;
}

void duplicateMadConfiguration(
		Connection conn, 
		HttpSession session,
		String base_table_name,
		String naming_column_name,
		String link_column_name,
		String source_id,
		String sub_tables
		
		) {
	
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	String sql="";
	
	String copy_name=getCopyName(conn,session,base_table_name,naming_column_name,source_id); 
	
	sql="SELECT AUTO_INCREMENT FROM information_schema.tables WHERE table_name = '"+base_table_name+"' AND table_schema = DATABASE( )";
	bindlist.clear();
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String duplicated_id=arr.get(0)[0];
	
	ArrayList<String> copySqls=new ArrayList<String>();
	
	String base_copy_sql="insert into "+base_table_name + " (id, "+naming_column_name+"  #fields ) select ?, ? #fields from "+base_table_name+" where id=?" ;
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",duplicated_id});
	bindlist.add(new String[]{"STRING",copy_name});
	bindlist.add(new String[]{"STRING",source_id});
	
	String other_columns=getOtherColumnNames(conn, session, base_table_name, naming_column_name, link_column_name);
	
	base_copy_sql=base_copy_sql.replaceAll("#fields", other_columns);
	
	 
	boolean is_ok=execDBConf(conn, base_copy_sql, bindlist);
	
	if (is_ok) {
		
		String[] subTabsArr=sub_tables.split(",");
		
			for (int i=0;i<subTabsArr.length;i++) {
				String sub_table_name=subTabsArr[i];
				if (sub_table_name.length()==0) continue;
				
				String sub_copy_sql="insert into "+sub_table_name+
										"( "+link_column_name+" #fields ) " +
										" select  " +
										" ? #fields "+
										" from "+sub_table_name+
										" where "+link_column_name+"=?";
				
				other_columns=getOtherColumnNames(conn, session, sub_table_name, naming_column_name, link_column_name);
				
				sub_copy_sql=sub_copy_sql.replaceAll("#fields", other_columns);
				
				bindlist.clear();
				bindlist.add(new String[]{"INTEGER",duplicated_id});
				bindlist.add(new String[]{"INTEGER",source_id});
				
				is_ok=execDBConf(conn, sub_copy_sql, bindlist);
				
				if (!is_ok) break;
			} //for 
		} //if (is_ok)
}

//------------------------------------------------------------------------------------
void duplicateMadPlatformType(Connection conn, HttpSession session, String source_id) {
	
	
	String base_table_name="mad_platform_type";
	String naming_column_name="platform_type_name";
	String link_column_name="platform_type_id";
	String sub_tables="mad_platform_type_flex_fields,mad_platform_type_modifier_group";
	
	duplicateMadConfiguration(
			conn, 
			session,
			base_table_name,
			naming_column_name,
			link_column_name,
			source_id,
			sub_tables
			);
			
	}
		
//------------------------------------------------------------------------------------
void duplicateMadPlatform(Connection conn, HttpSession session, String source_id) {
	
	
	String base_table_name="mad_platform";
	String naming_column_name="platform_name";
	String link_column_name="platform_id";
	String sub_tables="mad_platform_fields";
	
	duplicateMadConfiguration(
			conn, 
			session,
			base_table_name,
			naming_column_name,
			link_column_name,
			source_id,
			sub_tables
			);
			
	}
	
//------------------------------------------------------------------------------------
void duplicateMadModifierGroup(Connection conn, HttpSession session, String source_id) {
	
	
	String base_table_name="mad_modifier_group";
	String naming_column_name="modifier_group_name";
	String link_column_name="modifier_group_id";
	String sub_tables="mad_modifier_rule";
	
	duplicateMadConfiguration(
			conn, 
			session,
			base_table_name,
			naming_column_name,
			link_column_name,
			source_id,
			sub_tables
			);
			
	}
	
//------------------------------------------------------------------------------------
void duplicateMadApplication(Connection conn, HttpSession session, String source_id) {
	
	
	String base_table_name="mad_application";
	String naming_column_name="application_name";
	String link_column_name="application_id";
	String sub_tables="mad_application_dependency,mad_application_flex_fields";
	
	duplicateMadConfiguration(
			conn, 
			session,
			base_table_name,
			naming_column_name,
			link_column_name,
			source_id,
			sub_tables
			);
			
	}

//------------------------------------------------------------------------------------
void duplicateMadFlow(Connection conn, HttpSession session, String flow_id) {
	
	
	String sql="";
	ArrayList<String[]> bindlist=new ArrayList<String[]>();
	
	sql="SELECT AUTO_INCREMENT FROM information_schema.tables WHERE table_name = 'mad_flow' AND table_schema = DATABASE( )";
	bindlist.clear();
	ArrayList<String[]> arr=getDbArrayConf(conn, sql, 1, bindlist);
	
	String new_flow_id=arr.get(0)[0];
	sql="insert into mad_flow (id, flow_name #fields ) select ?, concat(flow_name,' Copy') #fields from mad_flow where id=?" ;
	
	
	String other_columns=getOtherColumnNames(conn, session, "mad_flow", "flow_name", "");
	sql=sql.replaceAll("#fields", other_columns);
	
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",new_flow_id});
	bindlist.add(new String[]{"INTEGER",flow_id});
	
	execDBConf(conn, sql, bindlist);
	
	
	
	ArrayList<String[]> flowStateMap=new ArrayList<String[]>();
	
	String other_fstate_columns=getOtherColumnNames(conn, session, "mad_flow_state", "", "flow_id");
	
	sql="select id from mad_flow_state where flow_id=?";
	
	bindlist.clear();
	bindlist.add(new String[]{"INTEGER",flow_id});
	
	ArrayList<String[]> flowStateArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
	
	for (int fs=0;fs<flowStateArr.size();fs++) {
		
		
		
		sql="SELECT AUTO_INCREMENT FROM information_schema.tables WHERE table_name = 'mad_flow_state' AND table_schema = DATABASE( )";
		bindlist.clear();
		arr=getDbArrayConf(conn, sql, 1, bindlist);
		
		String flow_state_id=flowStateArr.get(fs)[0];
		String new_flow_state_id=arr.get(0)[0];
		
		
		
		sql="insert into mad_flow_state (id, flow_id #fields)   select ?, ? #fields from mad_flow_state where id=? ";
		sql=sql.replaceAll("#fields", other_fstate_columns);
		
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",new_flow_state_id});
		bindlist.add(new String[]{"INTEGER",new_flow_id});
		bindlist.add(new String[]{"INTEGER",flow_state_id});

		execDBConf(conn, sql, bindlist);
		
		flowStateMap.add(new String[]{flow_state_id,new_flow_state_id});
	}
	
	
	String cols_mad_flow_state_edit_permissions=getOtherColumnNames(conn, session, "mad_flow_state_edit_permissions", "", "flow_state_id");
	String cols_mad_flow_state_action=getOtherColumnNames(conn, session, "mad_flow_state_action", "next_state_id", "flow_state_id");
	
	ArrayList<String[]> flowStateActionMap=new ArrayList<String[]>();
	
	for (int i=0;i<flowStateMap.size();i++) {
		String flow_state_id=flowStateMap.get(i)[0];
		String new_flow_state_id=flowStateMap.get(i)[1];
		
		sql="insert into mad_flow_state_edit_permissions (flow_state_id #fields)   select ? #fields from mad_flow_state_edit_permissions where flow_state_id=? ";
		sql=sql.replaceAll("#fields", cols_mad_flow_state_edit_permissions);
		
		
		
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",new_flow_state_id});
		bindlist.add(new String[]{"INTEGER",flow_state_id});
		
		execDBConf(conn, sql, bindlist);
		
		sql="select id, next_state_id from mad_flow_state_action where flow_state_id=?";
		
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",flow_state_id});

		ArrayList<String[]> flowStateActionArr=getDbArrayConf(conn, sql, Integer.MAX_VALUE, bindlist);
		
		for (int fsa=0;fsa<flowStateActionArr.size();fsa++) {
			
			
			String flow_state_action_id=flowStateActionArr.get(fsa)[0];
			String next_state_id=flowStateActionArr.get(fsa)[1];
			
			for (int m=0;m<flowStateMap.size();m++) {
				if (next_state_id.equals(flowStateMap.get(m)[0])) {
					//System.out.println("changing action["+flow_state_action_id+"] next_state from " +next_state_id+" to " +flowStateMap.get(m)[1]);
					next_state_id=flowStateMap.get(m)[1];
					break;
				}
			}
			
			sql="SELECT AUTO_INCREMENT FROM information_schema.tables WHERE table_name = 'mad_flow_state_action' AND table_schema = DATABASE( )";
			bindlist.clear();
			arr=getDbArrayConf(conn, sql, 1, bindlist);
			
			String new_flow_state_action_id=arr.get(0)[0];
			
			
			sql="insert into mad_flow_state_action (id, flow_state_id, next_state_id #fields)   select ?, ?, ? #fields from mad_flow_state_action where id=? ";
			sql=sql.replaceAll("#fields", cols_mad_flow_state_action);
			
			bindlist.clear();
			bindlist.add(new String[]{"INTEGER",new_flow_state_action_id});
			bindlist.add(new String[]{"INTEGER",new_flow_state_id});
			bindlist.add(new String[]{"INTEGER",next_state_id});
			bindlist.add(new String[]{"INTEGER",flow_state_action_id});
			
			execDBConf(conn, sql, bindlist);
			
			flowStateActionMap.add(new String[]{flow_state_action_id, new_flow_state_action_id});
			
		}
		
		
	}
	
	String cols_mad_flow_state_action_groups=getOtherColumnNames(conn, session, "mad_flow_state_action_groups", "", "flow_state_action_id");
	String cols_mad_flow_state_action_methods=getOtherColumnNames(conn, session, "mad_flow_state_action_methods", "", "flow_state_action_id");
	String cols_mad_flow_state_action_permissions=getOtherColumnNames(conn, session, "mad_flow_state_action_permissions", "", "flow_state_action_id");

	
	for (int i=0;i<flowStateActionMap.size();i++) {
		String flow_state_action_id=flowStateActionMap.get(i)[0];
		String new_flow_state_action_id=flowStateActionMap.get(i)[1];
		
		sql="insert into mad_flow_state_action_groups (flow_state_action_id #fields)   select ? #fields from mad_flow_state_action_groups where flow_state_action_id=? ";
		sql=sql.replaceAll("#fields", cols_mad_flow_state_action_groups);
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",new_flow_state_action_id});
		bindlist.add(new String[]{"INTEGER",flow_state_action_id});
		execDBConf(conn, sql, bindlist);
		
		sql="insert into mad_flow_state_action_methods (flow_state_action_id #fields)   select ? #fields from mad_flow_state_action_methods where flow_state_action_id=? ";
		sql=sql.replaceAll("#fields", cols_mad_flow_state_action_methods);
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",new_flow_state_action_id});
		bindlist.add(new String[]{"INTEGER",flow_state_action_id});
		execDBConf(conn, sql, bindlist);
		
		sql="insert into mad_flow_state_action_permissions (flow_state_action_id #fields)   select ? #fields from mad_flow_state_action_permissions where flow_state_action_id=? ";
		sql=sql.replaceAll("#fields", cols_mad_flow_state_action_permissions);
		bindlist.clear();
		bindlist.add(new String[]{"INTEGER",new_flow_state_action_id});
		bindlist.add(new String[]{"INTEGER",flow_state_action_id});
		execDBConf(conn, sql, bindlist);
		
		
	}
			
	}

//------------------------------------------------------------------------------------
void duplicateMadRequestType(Connection conn, HttpSession session, String source_id) {
	
	
	String base_table_name="mad_request_type";
	String naming_column_name="request_type";
	String link_column_name="request_type_id";
	String sub_tables="mad_request_type_application,mad_request_type_environment,mad_request_type_field,mad_request_type_state_field_override";
	
	duplicateMadConfiguration(
			conn, 
			session,
			base_table_name,
			naming_column_name,
			link_column_name,
			source_id,
			sub_tables
			);
			
	}



//------------------------------------------------------------------------------------
public  boolean testRegex(String test_str, String regex_str) {
	Pattern pattern = null;
	
	try {
		pattern=Pattern.compile(regex_str);
		Matcher matcher = pattern.matcher(test_str);
		while (matcher.find()) return true;
	} catch(Exception e) {
		e.printStackTrace();
		return false;
	}
	
			
	
	return false;
	
}


//----------------------------------------------------------------
public boolean testStrings(String test_str, String search_str) {
	if (test_str.indexOf(search_str)>-1) return true;
	
	return false;
	
}

//-----------------------------------------------------------------
public boolean checkStrings(String test_str, String search_str) {
	
	String[] arr=search_str.split("\n|\r");
	if (arr.length==1) arr=search_str.split("\\|\\|");
	
	for (int i=0;i<arr.length;i++) {
		if (arr[i].trim().length()==0) continue;
		boolean check_res=testStrings(test_str, arr[i]) || testRegex(test_str, arr[i]);
		if (check_res) return true;
	}
	
	
	return false;
	
}


%>


